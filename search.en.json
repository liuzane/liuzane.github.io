[{"title":"The Little Thing Is 3 Years Old","url":"/en/2025/10/13/little-thing-turned-3.html","content":"","categories":["my-cat"]},{"title":"ESLint Automatic Formatting Configuration","url":"/en/2025/09/05/eslint-automatic-formatting-configuration.html","categories":["guides"]},{"title":"Shrimp Omelet","url":"/en/2025/04/04/shrimp-omelet.html","content":"Ingredients   Ingredient   Quantity   Shrimp   100g   Eggs   4 pieces   Green onion   To taste   Salt   To taste   Oil   To taste   Cooking Steps   Image   Step   1.    Prepare ingredients   2.    Add chopped green onion to eggs, marinate shrimp with water and a pinch of salt   3.    Beat eggs and add shrimp (add the salted water too)   4.    Add oil, pour in eggs, fry until set, then flip   5.    Remove from pan   6.    Plate and serve","categories":["cookbooks"]},{"title":"Stir-fried Meat with Lettuce","url":"/en/2025/04/04/stir-fried-meat-with-lettuce.html","content":"Ingredients   Ingredient   Quantity   Lettuce   2 pieces   Pork   400g   Garlic Sprout Leaves   2 pieces   Green Onion   To taste   Garlic   To taste   Dried Chili   To taste   Sichuan Peppercorn   To taste   Star Anise   To taste   Salt   To taste   Light Soy Sauce   To taste   Dark Soy Sauce   To taste   Oyster Sauce   To taste   Cooking Steps   Image   Step   1.    Prepare ingredients   2.    Prepare seasonings: green onion, garlic, chili, Sichuan peppercorn, star anise   3.    Cut lettuce in half, then slice   4.    Slice garlic sprout leaves   5.    Slice pork   6.    Add oil and stir-fry pork, seasonings, dark soy sauce   7.    Set aside cooked meat   8.    Add oil and stir-fry lettuce, then add meat and stir-fry   9.    Add oyster sauce, light soy sauce, salt and stir-fry   10.    Add garlic sprout leaves and stir-fry   11.    Remove from heat   12.    Plate and serve","categories":["cookbooks"]},{"title":"Stir-fried Romaine Lettuce","url":"/en/2025/04/04/stir-fried-romaine.html","content":"Ingredients   Ingredient   Quantity   Romaine Lettuce   500g   Green Bell Pepper   2 pieces   Oil   To taste   Garlic   To taste   Salt   To taste   Light Soy Sauce   To taste   Oyster Sauce   To taste   Cooking Steps   Image   Step   1.    Prepare ingredients   2.    Cut green bell pepper into sections and mince garlic, put together   3.    Add oil and stir-fry green bell pepper and garlic   4.    Add romaine lettuce and stir-fry, then add oyster sauce, light soy sauce, salt and stir-fry again   5.    Remove from heat   6.    Plate and serve","categories":["cookbooks"]},{"title":"Stir-fried Beef with Celery and Garlic Sprouts","url":"/en/2025/04/04/stir-fried-beef-with-celery.html","content":"Ingredients   Ingredient   Quantity   Celery   250g   Garlic Sprouts   4 pieces   Braised Beef   400g   Oil   To taste   Green Onion   To taste   Garlic   To taste   Chili   To taste   Sichuan Peppercorn   To taste   Salt   To taste   Light Soy Sauce   To taste   Dark Soy Sauce   To taste   Cooking Steps   Image   Step   1.    Prepare ingredients   2.    Prepare seasonings: chili, Sichuan peppercorn, green onion, garlic   3.    Cut green bell pepper into sections   4.    Cut garlic sprout leaves into sections   5.    Cut garlic sprout roots in half lengthwise, then into sections   6.    Cut celery into sections   7.    Slice beef   8.    Put garlic sprout roots and celery together, set aside   9.    Put garlic sprout leaves and beef together, set aside   10.    Add oil and stir-fry garlic sprout roots and celery   11.    Add seasonings and stir-fry   12.    Add garlic sprout leaves and beef, stir-fry until thoroughly cooked   13.    Add light soy sauce, dark soy sauce, salt and stir-fry   14.    Remove from heat   15.    Plate and serve","categories":["cookbooks"]},{"title":"Stir-fried Meat with Mushrooms and Garlic Sprouts","url":"/en/2025/03/17/stir-fried-meat-with-mushrooms-and-garlic-sprouts.html","content":"Ingredients   Ingredient   Quantity   Mushrooms   500g   Garlic Sprouts   4 pieces   Pork   500g   Oil   To taste   Green Onion   To taste   Garlic   To taste   Chili   To taste   Sichuan Peppercorn   To taste   Salt   To taste   Light Soy Sauce   To taste   Dark Soy Sauce   To taste   Cooking Steps   Image   Step   1.    Prepare ingredients   2.    Prepare seasonings: Sichuan peppercorn, chili, green onion, garlic   3.    Slice mushrooms   4.    Cut garlic sprouts into sections   5.    Cut pork into strips   6.    Blanch mushrooms and set aside   7.    Add oil and stir-fry pork until fragrant, add dark soy sauce for color   8.    Push meat to one side, add seasonings and stir-fry until fragrant   9.    Add mushrooms and stir-fry   10.    Add garlic sprouts, salt, light soy sauce and stir-fry evenly   11.    Remove from heat   12.    Plate and serve","categories":["cookbooks"]},{"title":"NPM Error Resolution","url":"/en/2024/11/01/npm-error-resolve.html","content":"postinstall error:   Environment   Version   windows   10   node   20.14.0   pnpm   9.4.0   When executing    pnpm install    or    npm install    for the first time, PNPM reports an error: npm postinstall failed command not found node ./scripts/postinstall.js   Solution 1:   Run commands:   rimraf .\\node_modules\\   npm cache clean --force   pnpm store prune   Solution 2:   Find the package.json file of the plugin that&#39;s causing the error   Record the scripts.postinstall command in package.json somewhere, and modify the command to    pnpm --version   Then execute    pnpm install    once. After completion, you&#39;ll find that the postinstall of the error plugin executed successfully   Go into the package.json file level of each error plugin one by one   Execute the original postinstall command of each plugin one by one   pnpm dev    starts successfully...   node-pre-gyp error:   Plugin   Version   linux   13.6.0   node   18.20.4   npm   10.7.0   When executing    npm install    for the first time, sometimes npm error node-pre-gyp appears.   Cause:   https://github.com/mozilla/pdf.js#user-content-getting-the-code   On MacOS M1/M2 you may see some node-gyp-related errors when running npm install. This is because one of our dependencies, &quot;canvas&quot;, does not provide pre-built binaries for this platform and instead npm will try to build it from source. Please make sure to first install the necessary native dependencies using brew:    https://github.com/Automattic/node-canvas#compiling   .   Solution:   Refer to the solution provided by    https://github.com/Automattic/node-canvas#compiling    to add image plugin support to the environment.   Remove all plugins related to canvas (project name: node-canvas) from the project.","categories":["javascript"]},{"title":"Windows PowerShell Assist","url":"/en/2024/05/16/windows-powershell-assist.html","content":"Output Colored Text   function Write-Color([String[]]$Text, [ConsoleColor[]]$Color) {  for ($i = 0; $i -lt $Text.Length; $i++) {    Write-Host $Text[$i] -Foreground $Color[$i] -NoNewLine  }  Write-Host}# Usage$scriptLocationPath = (Get-Location).PathWrite-Color -Text \"Title: \", \"Write Color\" -Color Blue, GreenWrite-Color -Text \"Script Path: \", $scriptLocationPath -Color Blue, Green","categories":["scripts"]},{"title":"Windows Create New PowerShell Window","url":"/en/2024/05/16/windows-crate-new-powershell-window.html","content":"Create New PowerShell Window by Double-clicking CMD/BAT Script   :: start.batstart Powershell -executionpolicy RemoteSigned -noexit -file \".\\powershell-window.ps1\" \"Argument 1\" \"Argument 2\"# powershell-window.ps1$param1 = $args[0]$param2 = $args[1]$host.ui.RawUI.WindowTitle = \"Hello PowerShell\"Write-Output \"I'm $param1\"Write-Output \"I'm $param2\"// Can run some commandsipconfignode -vnpm run dev   Create New CMD Window by Double-clicking CMD/BAT Script   :: start.batstart \"Title\" /d C:\\xxx\\xxx cmd /k \"echo npm run dev &amp;&amp; npm run dev\"","categories":["scripts"]},{"title":"Git Configuration","url":"/en/2024/01/25/git-configuration.html","content":"Git Configuration Commands   # Get global + local Git configurationgit config --list# Get global Git configurationgit config --global --list   Git Configuration   git config --global core.ignorecase false# true: Git ignores case differences in filenames (e.g., README.md and readme.md are considered the same file on case-insensitive file systems).# false: Git treats file names as case-sensitive.git config --global core.autocrlf false# true：auto convert CRLF to LF or convert to CRLF when git checkout.# false：no convert.git config --global core.safecrlf true# warn(default): Warning when submitting a file that contains mixed newlines.# true: Refuse to submit files containing mixed newlines (Fatal:xxx is displayed).# false: Allows you to submit files that contain mixed newlines.   Git Proxy   # Check Git proxy settingsgit config --global --get http.proxygit config --global --get https.proxy# Set Git proxygit config --global http.proxy http://127.0.0.1:7890git config --global https.proxy http://127.0.0.1:7890# Remove Git proxygit config --global --unset http.proxygit config --global --unset https.proxy   .gitattributes    File Configuration   # Set the default behavior, in case people don&apos;t have core.autocrlf set.* text=auto# Explicitly declare text files you want to always be normalized and converted# to native line endings on checkout.*.c text*.h text# Declare files that will always have CRLF line endings on checkout.*.sln text eol=crlf# Denote all files that are truly binary and should not be modified.*.png binary*.jpg binary   Gvim   Open _vimrc file, add flowing code:   # Setting show ^M and $ symbol:set encoding=utf-8:scriptencoding utf-8:set binary:set list:set listchars=tab:&gt;-,eol:$,space:·","categories":["notes"]},{"title":"Windows CMD Common Commands Reference","url":"/en/2023/11/23/windows-cmd-commands.html","content":"There are two ways to execute CMD commands:   Execute commands through the command prompt window: Right-click the Start button and pop up the menu, click Run (shortcut: Win + R), enter cmd in the input box and click OK.   Execute CMD commands by creating script files with .cmd or .bat extensions.   Creating .cmd script files to execute CMD commands.   This will create a command prompt window titled &quot;Hello World&quot; and execute operations like outputting &quot;Hello World!&quot; and creating files inside it.   rem start.cmdrem \"rem\" and \"::\" are comments in batch processingstart \"Hello World\" cmd /k .\\input.batrem input.cmdrem chcp changes page encoding, UTF-8 code is 65001, solves Chinese garbled characters in command linechcp 65001@echo Hello World!@echo offset /p text=Please enter: (PS: Use set to set variables, use /p parameter to block commands, wait for input completion before executing other commands.)echo Your input content is %text%set /p isSave=Save as file? (y/n)if \"%isSave%\" == \"y\" (  if exist input_content.txt (    @echo input_content.txt file already exists  )  @echo %text%&gt;&gt;input_content.txt  @echo File saved.) else (  echo Don't save file.)pause   Appendix:    Windows Commands Reference   1.    cd command   ,    (chdir command)   Display the name of the current directory or change the current directory. If used with a drive letter (for example, cd C:), cd displays the name of the current directory in the specified drive. If used without parameters, cd displays the current drive and directory.   If the path to jump is in different disks, add/d parameter, otherwise it cannot jump.   Syntax   cd [/d] [&lt;drive&gt;:][&lt;path&gt;]cd [..]   Parameter   Description   /d   Changes the current drive and the current directory of the drive.   &lt;drive&gt;:   Specifies the drive to display or change (if different from the current drive).   &lt;path&gt;   Specifies the path to display or change the directory.   [..]   Specifies to change to the parent folder.   /?   Displays help at the command prompt.   Example   rem  CMD execution path: $ C:\\Users\\liuzane&gt;D:                  // Enter d driveF:                  // Enter F drivecd \\                // Jump to the root directory of the current hard diskcd C:\\WINDOWS       // Jump to the C: drive's WINDOWS folder, (no need for/d parameter in the same drive)cd /d e:\\software   // Jump to the e: drive's software folder, (need to add/d parameter)cd..                // Jump to the upper layer directory   2.    dir command   Display a list of files and subdirectories in a directory.   Syntax   dir [&lt;drive&gt;:][&lt;path&gt;][&lt;filename&gt;] [...] [/p] [/q] [/w] [/d] [/a[[:]&lt;attributes&gt;]][/o[[:]&lt;sortorder&gt;]] [/t[[:]&lt;timefield&gt;]] [/s] [/b] [/l] [/n] [/x] [/c] [/4] [/r]   Parameter   Description   [&lt;drive&gt;:][&lt;path&gt;]   Specifies the drive and directory to view the list of.   [&lt;filename&gt;]   Specifies the specific file or file group to view the list of.   /p   Displays one list screen at a time. Press any key to view the next screen.   /q   Displays file ownership information.   /w   Displays the list in wide format, with a maximum of five file names or directory names per line.   /d   Displays the list in the same format as /w, but files are sorted by column.   /a[[:]&lt;attributes&gt;]   Displays the names of directories and files with the specified attributes. If this parameter is not used, this command displays the names of all files except hidden and system files. If this parameter is used without specifying any attributes, this command displays the names of all files, including hidden and system files. Possible attribute value lists include:   d - Directory   h - Hidden files   s - System files   l - Re-parse point   r - Read-only files   a - Files that can be used for archiving   i - Non-content indexed files    You can use any combination of these values, but do not use spaces to separate values. (Optional) You can use the colon (   :   ) separator, or you can use the hyphen (   -   ) as a prefix to indicate &quot;non&quot;. For example, using the    -s    attribute does not display system files.   /o[[:]&lt;sortorder&gt;]   Sorts output based on sortorder, which can be any combination of the following values:    n - Sorts by name alphabetically   e - Sorts by extension name alphabetically   g - Lists groups first   s - Sorts by size, lists smallest files first   d - Sorts by date/time, lists earliest files first   Use - prefix to reverse sort order    Multiple values are processed in the order you list them. Do not use spaces to separate multiple values, but you can use a colon (   :   ) to separate them.     If sortorder is not specified,    dir /o    sorts directories first, then files, which are also sorted alphabetically.   /t[[:]&lt;timefield&gt;]   Specifies the time field to display or use for sorting. The available values for timefield are:   c - Creation time   a - Last access time   w - Last write time   /s   Lists each matching occurrence of the specified file name in the specified directory and all subdirectories.   /b   Displays a pure directory and file list, without other information.    /b    parameter overrides    /w   .   /l   Displays directory and file names in lowercase without sorting.   /n   Displays a long list format with file names on the right side of the screen.   /x   Displays short names generated from non-8dot3 file names. Displays content identical to    /n   , but short names are inserted before long names.   /c   Displays file sizes with thousands separators. This option is the default behavior. Use    /-c    to hide separators.   /4   Displays year in four-digit format.   /r   Displays year in four-digit format.   /?   Displays help at the command prompt.   Notes   If you use multiple filename parameters, separate each filename with a space, comma, or semicolon.   You can use wildcards (   *    or ?) to represent one or more characters in a filename and display a subset of files or subdirectories.   You can use the wildcard * to replace any string. For example:   dir *.txt    will list all files in the current directory that start with .txt, such as .txt, .txt1, .txt_old.   dir read *.txt    will list all files in the current directory that start with read and have a .txt extension, such as .txt, .txt1, or .txt_old.   dir read *.*    will list all files in the current directory that start with read (regardless of extension). The asterisk wildcard always uses short name mapping, so you might get unexpected results. For example, the following directory contains two files (t.txt2 and t97.txt):  You might expect typing    dir t97*    to return file t97.txt. However, typing dir t97* returns both files because the asterisk wildcard uses its short name mapping T97B4~1.TXT, so it thinks file t.txt2 matches t97.txt. Similarly, typing del t97* deletes both files.   You can use the question mark (   ?   ) instead of a single character in a name. For example, typing    dir read???.txt    will list all files in the current directory with a .txt extension that start with read and have up to three characters. This includes Read.txt, Read1.txt, Read12.txt, Read123.txt, and Readme1.txt, but not Readme12.txt.   If you use    /a    and multiple values in attributes, this command only displays the names of files with all specified attributes. For example, if you use    /a    with    r    and    -h    as attributes (using    /a:r-h    or    /ar-h   ), this command only displays the names of unhidden read-only files.   If you specify multiple sortorder values, this command sorts file names first by the first condition, then by the second condition, and so on. For example, if you use    /o    with sortorder    e    and    -s    parameters (using    /o:e-s    or /oe-s), this command sorts directory and file names by extension, first displaying the largest file, then the final result. Sorting by extension alphabetically sorts directory names first, then file names, then directory names with extensions.   If you use the redirection symbol (   &gt;   ) to send the output of this command to a file, or use the pipe symbol (   |   ) to send the output of this command to another command, you must use    /a:-d    and    /b   , to list only file names. You can use filename with    /b    and    /s    to specify this command to search for all file names matching the filename parameter in the current directory and all subdirectories. This command lists only the drive letter, directory name, filename, and file extension (one path per line) for each file name it finds. Before sending the output of this command to another command using the pipe symbol, you should first set the TEMP environment variable in the Autoexec.nt file.   Example   dir                       // View files in the current directory, similar to linux's lsdir /s/w/o/p/a:-d         // Display file names and extensions, but omit directory namesdir c:\\*.txt /w/o/s/p     // List all directory names in drive C with .txt extensiondir &gt; \\records\\dir.doc    // Redirect dir command output to file                          // If dir.doc does not exist, dir will create this file                          // Unless records directory does not exist. If records directory does not exist                          // Will display message: `File creation error`   3.    md command   ,    (mkdir command)   Create a directory or subdirectory. Command extension (enabled by default) allows you to use a single md command to create intermediate directories in the specified path.   Syntax   md [&lt;drive&gt;:]&lt;path&gt;   Parameter   Description   &lt;drive&gt;:   Specifies the drive in which to create the new directory.   &lt;path&gt;   Specifies the name and location of the new directory. The maximum length of any single path is determined by the file system. This is a required parameter.   /?   Displays help at the command prompt.   Example   md Directory1                // Create a directory named Directory1 in the current directorymd \\Taxes\\Property\\Current   // Create directory tree Taxes\\Property\\Current in the root directory in the case of command extension enabled   4.    rd command   ,    (mkdir command)   Delete a directory.   Syntax   rd [&lt;drive&gt;:]&lt;path&gt; [/s [/q]]   Parameter   Description   [&lt;drive&gt;:]&lt;path&gt;   Specifies the location and name of the directory to delete. Path is required. If a backslash () is included at the beginning of the specified path, the path starts from the root directory (regardless of the current directory).   /s   Deletes the directory tree (specified directory and all files in it).   /q   Specifies quiet mode. Deletes the directory tree without prompting for confirmation. This parameter is only effective when also specified /s.    Note: When running in quiet mode, no confirmation is required to delete the entire directory tree. Before running the /q command line option, please ensure that important files are moved or backed up.   /?   Displays help at the command prompt.   Example   rd /s test       // Delete directory named test in the current directory (and all files and directories in it)rd /s /q test    // Run the previous example in quiet mode   5.    copy command   Copy one or more files from one location to another location.   Syntax   copy [/d] [/v] [/n] [/y | /-y] [/z] [/a | /b] &lt;source&gt; [/a | /b] [+&lt;source&gt; [/a | /b] [+ ...]] [&lt;destination&gt; [/a | /b]]   Parameter   Description   /d   Allows the copied encrypted file to be saved as an unencrypted file to the destination.   /v   Verifies that the new file has been correctly written.   /n   Uses short names (if available) when copying file names that exceed eight characters or file extensions that exceed three characters.   /y   Disables prompting you to confirm overwriting an existing destination file.   /-y   Prompts you to confirm overwriting an existing destination file.   /z   Copies network files in restartable mode.   /a   Indicates an ASCII text file.   /b   Indicates a binary file.   &lt;source&gt;   Required. Specifies the location from which to copy one or more files. source can be a drive letter followed by a semicolon, directory name, file name, or a combination of these.   &lt;destination&gt;   Required. Specifies the location to which to copy one or more files. destination can be a drive letter followed by a semicolon, directory name, file name, or a combination of these.   /?   Displays help at the command prompt.   Notes   You can copy ASCII text files that use file termination character (CTRL+Z) to indicate file termination.   If    /a    is specified in the file list before or after the command line, this option applies to all files listed until    copy    encounters    /b   . In this case,    /b    applies to files before    /b   .   /a    effect depends on its location in the command line string: - If    /a    follows source,    copy    command copies data before the first file termination character (CTRL+Z) in the file. - If    /a    follows destination,    copy    command adds a file termination character (CTRL+Z) as the last character of the file.   If    /b    indicates the command interpreter reads the number of bytes specified by the file size in the directory. Unless    copy    merges files,    /b    is the default value for    copy   .   If    /b    is specified in the file list before or after the command line, this option applies to all files listed until    copy    encounters    /a   . In this case,    /a    applies to files before    /a   .   /b    effect depends on its location in the command line string: - If    /b    follows source,    copy    command copies the entire file, including any file termination characters (CTRL+Z). - If    /b    follows destination,    copy    command does not add a file termination character (CTRL+Z).   If verification cannot be performed, an error message is displayed. You can use    /v    to verify that critical data has been recorded, although    copy    command rarely records errors.    /v    command line option also slows down    copy    command because it checks each sector recorded on the disk.   If    /y    is preset in the COPYCMD environment variable, you can use    /-y    instead of this preset in the command line. The default is not to prompt unless a    copy    command is executed in a batch script.   To append files, specify a destination file but specify multiple files for source (using wildcard or file1+file2+file3 format).   If the connection is broken during the copy phase (for example, if the server is offline, the connection is broken), you can use    copy /z    to recover after reconnecting.    /z    option also displays completion percentage for each file copy operation.   You can replace one or more source or destination with device names.   If destination is a device (for example Com1 or Lpt1),    /b    option copies data to device in binary mode. In binary mode,    copy /b    copies all characters (including CTRL+C, CTRL+S, CTRL+Z, and ENTER, etc. special characters) as data to device. However, if    /b    is omitted, data is copied to device in ASCII mode. In ASCII mode, special characters might cause files to merge during copy.   If no destination file is specified, a copy of the file with the same name, modification date, and modification time as the original file is created. The new copy is stored in the current directory of the current drive. If the source file is in the current drive and current directory, and you do not specify a different drive or directory for the destination file, the    copy    command stops and displays the following error message:   File cannot be copied onto itself0 File(s) copied   If multiple files are specified in source,    copy    command uses the file name specified in destination to merge all files into a single file. Unless    /b    option is used,    copy    command assumes merged files are ASCII files.   To copy a file with a length of 0 bytes, or to copy all files and subdirectories in a directory, use    xcopy command   .   To assign the current date and time to a file without modifying the file, use the following syntax:   copy /b &lt;source&gt; +,,    // where , is a placeholder indicating intentionally omitted destination parameter.   Example   copy robin.typ c:\\birds                           // Copy file named robin.typ from current drive and directory to existing directory named birds on drive Ccopy memo.doc letter.doc /a                       // Copy file named memo.doc to current drive's letter.doc, and ensure file termination character (CTRL+Z) is at the end of the copied file                                                  // If birds directory does not exist, file robin.typ will be copied to birds file in root directory of disk C.copy mar89.rpt + apr89.rpt + may89.rpt Report     // Merge Mar89.rpt, Apr89.rpt, and May89.rpt in the current directory, and place them in Report file (also in current directory)                                                  // If merged files, copy command uses current date and time to mark target file.                                                  // If destination is omitted, the merged file is stored with the name of the first file in the list.copy report + mar89.rpt + apr89.rpt + may89.rpt   // Merge all files in Report, when Report file already existscopy *.txt Combined.doc                           // Merge all files in the current directory with .txt extension into a single Combined.doc file                                                  // If merged binary files, generated file might not be usable due to internal format issues.copy *.txt + *.ref *.doc                          // Merge each file with its corresponding .ref file to create file with same name but .doc extension.                                                  // copy command merges file1.txt with file1.ref into file1.doc,                                                  // then the command merges file2.txt with file2.ref into file2.doc, and so oncopy *.txt + *.ref Combined.doc                   // Merge all files with .txt extension, then merge all files with .ref extension into a Combined.doc file   6.    move command   Move one or more files from one directory to another directory.   Syntax   move [{/y|-y}] [&lt;source&gt;] [&lt;target&gt;]   Parameter   Description   /y   Disables prompting you to confirm overwriting an existing destination file. COPYCMD environment variable may preset this parameter. You can use -y parameter instead of this preset. Unless command is executed from batch script, default prompts before overwriting file.   -y   Starts prompting you to confirm overwriting an existing destination file.   &lt;source&gt;   Specifies the path and name of the file to move. If moving or renaming directory, source should be the path and name of the current directory.   &lt;target&gt;   Specifies the path and name to which to move the file. If moving or renaming directory, target should be the path and name of the target directory.   /?   Displays help at the command prompt.   Example   move \\data\\*.xls \\second_q\\reports\\    // Move all .xls files from \\Data directory to \\second_Q\\reports directory   7.    del command   ,    erase command   Delete one or more files. (This is specifically for deleting files, not directories)   Syntax   del [/p] [/f] [/s] [/q] [/a[:]&lt;attributes&gt;] &lt;names&gt;   Parameter   Description   &lt;names&gt;   Specifies a list of one or more files or directories. Wildcards can be used to delete multiple files. If a directory is specified, all files in the directory are deleted.   /p   Prompts you to confirm before deleting specified files.   /f   Forces deletion of read-only files.   /s   Deletes specified files from the current directory and all subdirectories. Displays the name of the file being deleted.   /q   Specifies quiet mode. System does not prompt you to confirm deletion.   /a[:]&lt;attributes&gt;   Deletes files based on the following file attributes:    r Read-only files   h Hidden files   i Non-content indexed files   s System files   a Files that can be used for archiving   l Re-parse point   - Used as a prefix to indicate &quot;non&quot;   /?   Displays help at the command prompt.   Notes   If you use    del /p    command, you will see the following message:   FileName, Delete (Y/N)?   To confirm deletion, press Y. To cancel deletion and display next filename (if a group of files is specified), press N. To stop    del    command, press Ctrl+C.   If command extension is disabled,    /s    parameter displays the name of any files not found, instead of the name of the file being deleted.   If    &lt;names&gt;    parameter specifies a specific directory, all contained files are also deleted. For example, to delete all files in \\work directory, type:   del \\work   You can use wildcards (   *    and    ?   ) to delete multiple files at once. However, be cautious when using wildcards to avoid unintended deletion of files. For example, if you type the following command:   del *.*   del command displays the following prompt:   Are you sure (Y/N)?   To delete all files in the current directory, press Y, then press Enter. To cancel deletion, press N, then press Enter.Before using wildcards in del command, use the same wildcards in dir command to list all files to be deleted.   Example   del c:\\test                // Delete all files in test folder on drive Cdel c:\\test\\*.*            // Same as abovedel \"c:\\test folder\\\"      // Delete all files in folder with space in name, need to use double quotes around full pathdel \"c:\\test folder\\*.*\"   // Same as abovedel *.bat                  // Delete all files with .bat extension in current directorydel /a:r *.*               // Delete all read-only files in current directory   8.    cls command   Clear the command prompt window.   cls    // Similar to linux's clear   9.    ping command   Through sending Internet Control Message Protocol (ICMP) Echo Request Messages, verify IP level connection with another TCP/IP computer.   Syntax   ping [/t] [/a] [/n &lt;count&gt;] [/l &lt;size&gt;] [/f] [/I &lt;TTL&gt;] [/v &lt;TOS&gt;] [/r &lt;count&gt;] [/s &lt;count&gt;] [{/j &lt;hostlist&gt; | /k &lt;hostlist&gt;}] [/w &lt;timeout&gt;] [/R] [/S &lt;Srcaddr&gt;] [/4][/6] &lt;targetname&gt;   Parameter   Description   /t   Specifies that ping continues to send Echo Request Messages to the target until interrupted. Press Ctrl+Enter to interrupt and display statistics. Press Ctrl+C to interrupt and exit this command.   /a   Specifies Reverse Name Resolution for the target IP address. If this operation succeeds, ping displays the corresponding host name.   /n &lt;count&gt;   Specifies the number of Echo Request Messages to send. Default value is 4.   /l &lt;size&gt;   Specifies the length of the &quot;data&quot; field in the Echo Request Message (in bytes). Default value is 32. Maximum size is 65,500.   /f   Specifies that Echo Request Message is sent with the &quot;Don&#39;t Fragment&quot; flag set to 1 in the IP header (only available on IPv4). Echo Request Message cannot be fragmented by routers on the path. This parameter can be used to troubleshoot Path Maximum Transmission Unit (PMTU) issues.   /I &lt;TTL&gt;   Specifies the value of the Time to Live (TTL) field in the IP header of the sent Echo Request Message. Default value is the default TTL value of the host. Maximum TTL is 255.   /v &lt;TOS&gt;   Specifies the value of the Type of Service (TOS) field in the IP header of the sent Echo Request Message (only available on IPv4). Default value is 0. TOS specified as a decimal value between 0 and 255.   /r &lt;count&gt;   Specifies that the &quot;Record Route&quot; option in the IP header is used to record the path taken by Echo Request Message and corresponding Echo Reply Message (only available on IPv4). Each hop in the path uses an entry in the &quot;Record Route&quot; option. If possible, specify a count equal to or greater than the number of hops between source and target. Count must be at least 1 and maximum 9.   /s &lt;count&gt;   Specifies that the &quot;Internet Timestamp&quot; option in the IP header is used to record arrival time of Echo Request Message and corresponding Echo Reply Message at each hop. Count must be at least 1 and maximum 4. For local link target address, this parameter is required.   /j &lt;hostlist&gt;   Specifies that Echo Request Message uses the &quot;Loose Source Routing&quot; option in the IP header, it has hostlist specified in the group of intermediate targets (only available on IPv4). When using Loose Source Routing, consecutive intermediate targets can be separated by one or more routers. Host list address or name count in hostlist does not exceed 9. Host list is a series of space-separated IP addresses (in dot-decimal format).   /k &lt;hostlist&gt;   Specifies that Echo Request Message uses the &quot;Strict Source Routing&quot; option in the IP header, it has hostlist specified in the group of intermediate targets (only available on IPv4). When using Strict Source Routing, the next intermediate target must be directly accessible (it must be adjacent to the router interface). Host list address or name count in hostlist does not exceed 9. Host list is a series of space-separated IP addresses (in dot-decimal format).   /w &lt;timeout&gt;   Specifies the time (in milliseconds) to wait for Echo Reply Message corresponding to the given Echo Request Message. If Echo Reply Message is not received within the timeout value, &quot;Request Timed Out&quot; error message is displayed. Default timeout value is 4000 (4 seconds).   /R   Specifies Track Route (only available on IPv6).   /S &lt;Srcaddr&gt;   Specifies the source address to use in the Echo Request Message (only available on IPv6).   /4   Specifies that ping uses IPv4. This parameter is not required when identifying target host by IP address. It is required when identifying target host by name.   /6   Specifies that ping uses IPv6. This parameter is not required when identifying target host by IP address. It is required when identifying target host by name.   &lt;targetname&gt;   Specifies the target host name or IP address.   /?   Displays help at the command prompt.   Example   ping /a 10.0.99.221              // Ping target 10.0.99.221 and resolve 10.0.99.221 to host nameping /n 10 /l 1000 10.0.99.221   // Ping target 10.0.99.221 with 10 Echo Request Messages (each message \"data\" field is 1000 bytes)ping /r 4 10.0.99.221            // Ping target 10.0.99.221 and record 4 hops in route   10.    netstat command   Display the number of active TCP connections, computer listening ports, Ethernet statistics, IP routing table, IPv4 statistics, and IPv6 statistics.   Syntax   netstat [-a] [-b] [-e] [-n] [-o] [-p &lt;Protocol&gt;] [-r] [-s] [&lt;interval&gt;]   Parameter   Description   -a   Displays the number of active TCP connections and TCP and UDP ports that the computer is listening on.   -b   Displays the executable file that created each connection or listening port that is involved in creating the connection. In some cases, well-known executable files carry multiple independent components, in these cases, the executable file name is located at the bottom of the [] and the top is the component it calls, and so on, until reaching TCP/IP. Note that this option may be very time-consuming and may fail unless you have sufficient permissions.   -e   Displays Ethernet statistics, such as the number of bytes sent and received and the number of packets sent and received. This parameter can be used with -s.   -n   Displays the number of active TCP connections, but addresses and port numbers are in numeric form and no attempt is made to determine names.   -o   Displays the number of active TCP connections, and includes the process ID (PID) of each connection. You can find applications based on PID in the &quot;Processes&quot; tab in Task Manager. This parameter can be used with    -s   ,    -n   , and    -p   .   -p &lt;Protocol&gt;   Displays connections for the Protocol specified. In this case, Protocol can be tcp, udp, tcpv6, or udpv6. If this parameter is used with -s to display statistics by protocol, Protocol can be tcp, udp, icmp, ip, tcpv6, udpv6, icmpv6, or ipv6.   -s   Displays statistics by protocol. The default is to display statistics for TCP, UDP, ICMP, and IP protocols. If IPv6 protocol is installed, it displays statistics for based IPv6 TCP, based IPv6 UDP, ICMPv6, and IPv6 protocols.    -p    parameter can be used to specify a group of protocols.   -r   Displays the contents of the IP routing table. This is equivalent to the route print command.   &lt;interval&gt;   Displays the selected information repeatedly every interval seconds. Press CTRL+C to stop replaying. If this parameter is omitted, this command prints the selected information only once.   /?   Displays help at the command prompt.   Example   netstat -ano                  // View network connections, status, and corresponding process IDnetstat -aon|findstr \"8080\"   // View PID corresponding to occupied portnetstat -e -s                 // Display both Ethernet statistics and statistics for all protocolsnetstat -s -p tcp udp         // Display statistics only for TCP and UDP protocolsnetstat -o 5                  // Display active TCP connections and process ID every 5 secondsnetstat -n -o                 // Display active TCP connections and process ID in numeric form   11.    tasklist command   Display a list of currently running processes on the local computer or remote computer.   Syntax   tasklist [/s &lt;computer&gt; [/u [&lt;domain&gt;\\]&lt;username&gt; [/p &lt;password&gt;]]] [{/m &lt;module&gt; | /svc | /v}] [/fo {table | list | csv}] [/nh] [/fi &lt;filter&gt; [/fi &lt;filter&gt; [ ... ]]]   Parameter   Description   /s &lt;computer&gt;   Specifies the name or IP address of the remote computer (do not use backslashes). Default is the local computer.   /u &lt;domain&gt;\\&lt;username&gt;   Uses the account permissions of the user specified in    &lt;username&gt;    or    &lt;domain&gt;\\&lt;username&gt;    to run the command. You can only specify    /u    parameter when also specifying    /s   . Default value is the permissions of the user currently logged on to the computer issuing the command.   /p &lt;password&gt;   Specifies the password for the user account specified in the    /u    parameter.   /m &lt;module&gt;   Lists all tasks that have loaded DLL modules that match the given pattern name. If no module name is specified, this option displays all modules loaded by each task.   svc   Lists all service information for each process, without truncating. Valid when    /fo    parameter is set to table.   /v   Displays detailed task information in the output. To get full detailed output without truncating, use    /v    and    /svc   .   /fo {table | list | csv}   Specifies the format to use for output. Valid values are table, list, or csv. The default format for output is table.   /nh   Cancels displaying column headings in the output. Valid when    /fo    parameter is set to table or csv.   /fi &lt;filter&gt;   Specifies to include or exclude a type of process in the query. Multiple filters or wildcard (   \\   ) can be used to specify all tasks or image names. The &quot;Filter Name, Operator, and Value&quot; section below lists valid filters.   /?   Displays help at the command prompt.   tasklist                                // Get PID process listtasklist|findstr \"8080\"                 // View process specified PIDtasklist /fi \"IMAGENAME eq nginx.exe\"   // Find all processes with image name nginx.exe   12.    taskkill command   Kill process task and process ID   Syntax   taskkill [/s &lt;computer&gt; [/u [&lt;domain&gt;\\]&lt;username&gt; [/p [&lt;password&gt;]]]] {[/fi &lt;filter&gt;] [...] [/pid &lt;processID&gt; | /im &lt;imagename&gt;]} [/f] [/t]   Parameter   Description   /s &lt;computer&gt;   Specifies the name or IP address of the remote computer (do not use backslashes). Default is the local computer.   /u &lt;domain&gt;\\&lt;username&gt;   Uses the account permissions of the user specified in    &lt;username&gt;    or    &lt;domain&gt;\\&lt;username&gt;    to run the command. You can only specify    /u    parameter when also specifying    /s   . Default value is the permissions of the user currently logged on to the computer issuing the command.   /p &lt;password&gt;   Specifies the password for the user account specified in the    /u    parameter.   /fi &lt;filter&gt;   Applies filter to select a group of tasks. Multiple filters or wildcard (*) can be used to specify all tasks or image names. The &quot;Filter Name, Operator, and Value&quot; section below lists valid filters.   /pid &lt;processID&gt;   Specifies the process ID of the process to terminate.   /im &lt;imagename&gt;   Specifies the image name of the process to terminate. Use wildcard (*) to specify all image names.   /f   Specifies forced termination. This parameter is ignored for remote processes; all remote processes are forced to end.   /t   Ends the specified process and any child processes it starts.   Example   taskkill /PID 8080         // Kill process with PID 8080taskkill /T /F /PID 8080   // Force (/F parameter) kill all processes with PID 8080 including child processes (/T parameter)taskkill /IM nginx.exe     // Kill all processes with image name nginx.exe   13.    tracert command   tracert is also called Windows Route Trace Utility, in the command prompt (cmd) you can use tracert command to determine the path IP data packet accesses the target.   Syntax   tracert [/d] [/h &lt;maximumhops&gt;] [/j &lt;hostlist&gt;] [/w &lt;timeout&gt;] [/R] [/S &lt;srcaddr&gt;] [/4][/6] &lt;targetname&gt;   Parameter   Description   /d   Stop trying to resolve the IP address of intermediate routers. This can speed up the result return speed.   /h &lt;maximumhops&gt;   Specifies the maximum number of hops in the path to search for the target. Default value is 30 hops.   /j &lt;hostlist&gt;   Specifies that Echo Request Message uses the &quot;Loose Source Routing&quot; option in the IP header, it has hostlist specified in the group of intermediate targets. When using Loose Source Routing, consecutive intermediate targets can be separated by one or more routers. List address or name count in hostlist does not exceed 9.    &lt;hostlist&gt;    is a series of space-separated IP addresses (in dot-decimal format). This parameter is used only when tracing IPv4 address.   /w &lt;timeout&gt;   Specifies the time (in milliseconds) to wait for Echo Reply Message corresponding to the given Echo Request Message. If Echo Reply Message is not received within the timeout value, a star (*) is displayed. Default timeout value is 4000 (4 seconds).   /R   Specifies that Echo Request Message is sent to local host with IPv6 Routing Extension Header, target used as intermediate target and test reverse route.   /S &lt;srcaddr&gt;   Specifies the source address to use in the Echo Request Message. This parameter is used only when tracing IPv6 address.   /4   Specifies that tracert.exe uses IPv4 only for this trace.   /6   Specifies that tracert.exe uses IPv6 only for this trace.   &lt;targetname&gt;   Specifies the target, identified by IP address or host name.   /?   Displays help at the command prompt.   Example   tracert www.microsoft.com        // Track path to host named www.microsoft.comtracert /d www.microsoft.com     // Track path to host named www.microsoft.com, and prevent each IP address from being resolved to its name   14.    start command   Start a separate command prompt window to run the specified program or command.   Syntax   start &lt;\"title\"&gt; [/d &lt;path&gt;] [/i] [{/min | /max}] [&lt;command&gt; [&lt;parameter&gt;... ] | &lt;program&gt; [&lt;parameter&gt;... ]]   Parameter   Description   &quot;title&quot;   Specifies the title to display in the &quot;Command Prompt&quot; window title bar.   /d &lt;path&gt;   Specifies the startup directory.   /i   Passes the Cmd.exe startup environment to the new &quot;Command Prompt&quot; window. If not specified /i, the current environment is used.   &lt;command&gt; [&lt;parameter&gt;... ]   Specifies the command to start, &lt;parameter&gt; is command parameter.   &lt;program&gt; [&lt;parameter&gt;... ]   Specifies the program to start, &lt;parameter&gt; is program parameter.   /?   Displays help at the command prompt.   Example   // Open new command prompt window set path to D:\\workspace\\project and execute echo Hello Worldstart \"Hello World\" /d D:\\workspace\\project cmd /k echo Hello World   15.    cmd command   Start a new instance of the Cmd.exe command interpreter. If no parameters are used, cmd displays the operating system version and copyright information.   Syntax   cmd [/c|/k] [/s] [/q] [/d] [/a|/u] [/t:{&lt;b&gt;&lt;f&gt; | &lt;f&gt;}] [/e:{on | off}] [/f:{on | off}] [/v:{on | off}] [&lt;string&gt;]   Parameter   Description   /c   Executes the command specified by    &lt;string&gt;   , then exits the command processor.   /k   Executes the command specified by    &lt;string&gt;   , and keeps the command processor running.   /s   When used with    /c    or    /k   , triggers special non-analyzed rules, which remove the first and last quotes (&quot;) around    &lt;string&gt;   , but keep the rest of the command unchanged.   /q   Turns off echo.   /d   Disables automatic execution of commands.   /a   Sets the output format to American National Standards Institute (ANSI).   /u   Sets the output format to Unicode.   /t:{&lt;b&gt;&lt;f&gt; | &lt;f&gt;}   Sets background color (b) and foreground color (f).   /e:on   Enables command extension.   /e:off   Disables command extension.   /f:on   Enables file and directory name completion.   /f:off   Disables file and directory name completion.   /v:on   Enables delayed environment variable expansion.   /v:off   Disables delayed environment variable expansion.   &lt;string&gt;   Specifies the command to execute.   /?   Displays help at the command prompt.   The following table lists valid hexadecimal digits that can be used as &lt;b&gt; and &lt;f&gt; values:   Value   Color   0   Black   1   Blue   2   Green   3   Aqua   4   Red   5   Purple   6   Yellow   7   White   8   Gray   9   Light Blue   a   Light Green   b   Light Blue Green   c   Light Red   d   Light Purple   e   Light Yellow   F   Bright White   Example   // If you want to redirect the output of a command to the input of another command, use the pipe (|) character. For example:&lt;command1&gt; | &lt;command2&gt;// If you want to use multiple commands for &lt;string&gt;, use command separator &amp;&amp; to separate them. For example:&lt;command1&gt;&amp;&amp;&lt;command2&gt;&amp;&amp;&lt;command3&gt;// If the provided directory path, file, or any information contains spaces, you must enclose the text in double quotes (\") if it is a directory path or filename. For example:mkdir Test&amp;&amp;mkdir \"Test 2\"&amp;&amp;move \"Test 2\" Test   16.    echo and @echo command   Display a message or open or close command echo functionality. If not used with any parameters, echo displays the current echo setting.echo and @echo command difference: Adding @ will not display command line content   Syntax   echo [&lt;message&gt;]echo [on | off]   Parameter   Description   [on | off]   Opens or closes command echo functionality. Command echo functionality is enabled by default.   &lt;message&gt;   Specifies the text to display on the screen.   /?   Displays help at the command prompt.   Example   echo Hello World// Displays the following content// $ D:\\workspace\\scripts&gt;echo Hello World// $ Hello World@echo Hello World// Displays// $ Hello World@echo off  // Prevent all commands (including echo off command) from displaying on screen in batch file@echo on   // Turn on commands to display on screen in batch file   Notes   When    echo    is turned off,    echo &lt;message&gt;    command is more useful. If you want to display a message that spans several lines without displaying any command, you can add multiple    echo &lt;message&gt;    commands after    echo off    command in the batch file.   When echo is turned off, the command prompt does not appear in the &quot;Command Prompt&quot; window. If you want to display the command prompt, type    echo on   .   If you use    echo    in a batch file and the batch file contains empty variables, you will see &quot;echo off&quot; message. To prevent seeing this message, instead generate an empty line, place a colon (   :   ) between    echo    and variable. For example    echo:%var%   .   If you want to prevent echoing specific commands in a batch file, place (   @   ) symbol before the command. If you want to prevent echoing all commands in a batch file, place    echo off    command at the beginning of the file.   If you want to display exclamation mark (   !   ) at the end of a word or phrase in a batch file, place a caret (   ^   ) before exclamation mark, then place exclamation mark, and enclose this string in double quotes (   Hello World^!   ). Alternatively, you can use double caret (   ^^   ) without using double quotes (   Hello World^^!   ).   If you want to display vertical line (   |   ), ampersand (   &amp;   ) or redirection character (   &lt;    or    &gt;   ) when using    echo   , place a caret (   ^   ) before the character. For example    ^|   ,    ^&amp;   ,    ^&gt;    or    ^&lt;   . If you want to display caret, type two caret (   ^^   ) consecutively.   17.    set command   Display, set, or delete cmd.exe environment variable. If not used with any parameters, set displays the current environment variable setting.   Syntax   set [&lt;variable&gt;=[&lt;string&gt;]]set [/p] &lt;variable&gt;=[&lt;promptString&gt;]set /a &lt;variable&gt;=&lt;expression&gt;   Parameter   Description   &lt;variable&gt;   Specifies the environment variable to set or modify.   &lt;string&gt;   Specifies the string to associate with the specified environment variable.   /p   Sets    &lt;variable&gt;    value to a line input from the user.   &lt;promptstring&gt;   Specifies the message to prompt the user for input. This parameter must be used with    /p    parameter.   /a   Sets    &lt;string&gt;    to a calculated numeric expression.   &lt;expression&gt;   Specifies a numeric expression.   /?   Displays help at the command prompt.   Example   set /p text=Please enter:        // Please enter: is placeholder, input text after variable text is set to input content.echo %text%set /p isSave=Save as file? (y/n)echo %isSave%   18.    if command   Execute conditional processing in a batch program.   Syntax   if [not] ERRORLEVEL &lt;number&gt; &lt;command&gt; [else &lt;expression&gt;]if [not] &lt;string1&gt;==&lt;string2&gt; &lt;command&gt; [else &lt;expression&gt;]if [not] exist &lt;filename&gt; &lt;command&gt; [else &lt;expression&gt;]   If command extension is enabled, use the following syntax:   if [/i] &lt;string1&gt; &lt;compareop&gt; &lt;string2&gt; &lt;command&gt; [else &lt;expression&gt;]if cmdextversion &lt;number&gt; &lt;command&gt; [else &lt;expression&gt;]if defined &lt;variable&gt; &lt;command&gt; [else &lt;expression&gt;]   Parameter   Description   not   Specifies that the command should be executed only when the condition is false.   errorlevel &lt;number&gt;   Specifies a true condition only when the exit code of the last program run by Cmd.exe is equal to or greater than number.   &lt;command&gt;   Specifies the command to execute when the above condition is true.   &lt;string1&gt;==&lt;string2&gt;   Specifies a true condition only when string1 and string2 are the same. These values can be strings or batch variables (for example, %1). Do not enclose strings in quotes.   exist &lt;filename&gt;   Specifies a true condition if the specified filename exists.   &lt;compareop&gt;   Specifies a three-letter comparison operator, including:    EQU - Equal   NEQ - Not Equal   LSS - Less Than   LEQ - Less Than or Equal   GTR - Greater Than   GEQ - Greater Than or Equal   /i   Forces string comparison to ignore case. You can use /i in if string1==string2 form. These comparisons are generic because if string1 and string2 consist only of digits, the strings are converted to numeric values and numeric comparison is performed.   cmdextversion &lt;number&gt;   Specifies a true condition only when the internal version number associated with Cmd.exe command extension functionality is equal to or greater than the specified value. The first version is 1. Large amounts of enhancement are added to command extension when it is incremented by 1. Command extension is disabled by default (enabled command extension).   defined &lt;variable&gt;   Specifies a true condition if the variable is defined.   &lt;expression&gt;   Specifies command line command and any parameters to pass to that command in the else clause.   /?   Displays help at the command prompt.   Example   if not exist product.dat echo Unable to find product.dat fileif exist product.dat (  del product.dat) ELSE (  echo Unable to find product.dat file)   Notes   If the condition in the if clause is true, the command following the condition is executed. If the condition is false, the commands in the if clause are ignored and the command following the else clause is executed.   Program stops when it returns an exit code. If you want to use exit code as a condition, use errorlevel parameter.   %errorlevel%: Expands to a string representation of the current value of the ERRORLEVEL environment variable. This variable assumes that no existing environment variable named ERRORLEVEL exists. If it exists, the ERRORLEVEL value is obtained.   %cmdcmdline%: Expands to the original command line passed to Cmd.exe before any processing. This assumes that no existing environment variable named CMDCMDLINE exists. If it exists, the CMDCMDLINE value is obtained.   %cmdextversion%: Expands to a string representation of the current value of cmdextversion. This assumes that no existing environment variable named CMDEXTVERSION exists. If it exists, the CMDEXTVERSION value is obtained.   You must use else clause on the same line as the command in the if clause.   19.  Auxiliary symbol &#39;|&#39;   &quot;|&quot;cmd command in cmd command | represents the input of the previous command as the input of the next command   netstat -ano|find \"192.168.1.10\"  // Find specific ip network connection and process ID   20  Redirection output symbol&gt; &gt;&gt;   Store the content originally output to command window to file, such as jstack 12912 &gt;d:/s.txt Print thread to specified file   cmd &gt; Redirection output and overwrite source file.   echo hello &gt;c:\\1.txt   // 1.txt file content is cleared before hello is written.   cmd &gt;&gt; Redirection output append to file end   echo hello &gt;&gt;c:\\1.txt  // Add hello to end of 1.txt file   21.  Redirection input symbol&lt; &lt;&lt;   cmd &lt; file     // cmd command reads from filecmd &lt;&lt; text    // Read input from command line until a line ending with text is encountered.// Unless using quotes to enclose input, this mode performs shell variable substitution on input content.// If using &lt;&lt;- , will ignore tab at the beginning of next input line, end line can also be a bunch of tab plus a line ending with text, can refer to the example below.cmd &lt;&lt;&lt; word   // Provide word (instead of file word) and following newline as input to cmd.cmd &lt;&gt; file    // Open file in read-write mode for input, file file will not be destroyed. Only meaningful when application utilizes this feature.cmd &gt;| file    // Function same as &gt;, but even when noclobber is set, will overwrite file file, note use of | rather than some book said !, currently only in csh still use ! to implement this feature.","categories":["scripts"]},{"title":"The Future of Operations is Platform Engineering","url":"/en/2023/07/19/platform-engineering.html","content":"","categories":["reprints"]},{"title":"Software Eats Software, Will Programming Jobs Increase?","url":"/en/2023/07/07/will-programmers-increase.html","content":"","categories":["reprints"]},{"title":"Big Plate Chicken","url":"/en/2022/08/16/big-plate-chicken.html","content":"Ingredients   Ingredient   Quantity   Chicken   One whole   Potatoes   Two pieces   Green Bell Peppers   Two pieces   Oil   To taste   White Sugar   To taste   Green Onion   To taste   Ginger   To taste   Garlic   To taste   Chili   To taste   Sichuan Peppercorn   To taste   Star Anise   To taste   Bay Leaves   To taste   Cinnamon   To taste   Salt   To taste   Light Soy Sauce   To taste   Dark Soy Sauce   To taste   Chili Oil   To taste   Cooking Wine   To taste   Cooking Steps   Image   Step   1.    Prepare ingredients   2.    Prepare seasonings: garlic, ginger, garlic, chili, Sichuan peppercorn, star anise, bay leaves, cinnamon   3.    Blanch chicken pieces, add ginger slices and cooking wine   4.    Cut potatoes into rolling chunks   5.    Remove chicken pieces after skimming off foam   6.    Add oil over high heat, add white sugar or rock sugar and caramelize   7.    Add chicken pieces and stir-fry until fragrant   8.    Add seasonings and stir-fry   9.    Add salt, light soy sauce, dark soy sauce, chili oil, cooking wine and stir-fry evenly   10.    Add potatoes and stir-fry, then add water to cover potatoes and cover with lid   11.    Add green bell peppers halfway through cooking, reduce sauce over high heat   12.    Plate and serve","categories":["cookbooks"]},{"title":"Language Tags","url":"/en/2022/04/10/language-tags.html","content":"Language Tag   ISO 639-1   Language   Region   Description   ar-SA   ar   Arabic   Saudi Arabia   Arabic (Saudi Arabia)   bn-BD   bn   Bangla   Bangladesh   Bangla (Bangladesh)   bn-IN   bn   Bangla   India   Bangla (India)   cs-CZ   cs   Czech   Czech Republic   Czech (Czech Republic)   da-DK   da   Danish   Denmark   Danish (Denmark)   de-AT   de   German   Austria   Austrian German   de-CH   de   German   Switzerland   &quot;Swiss&quot; German   de-DE   de   German   Germany   Standard German (as spoken in Germany)   el-GR   el   Greek   Greece   Modern Greek   en-AU   en   English   Australia   Australian English   en-CA   en   English   Canada   Canadian English   en-GB   en   English   United Kingdom   British English   en-IE   en   English   Ireland   Irish English   en-IN   en   English   India   Indian English   en-NZ   en   English   New Zealand   New Zealand English   en-US   en   English   United States   US English   en-ZA   en   English   South Africa   English (South Africa)   es-AR   es   Spanish   Argentina   Argentine Spanish   es-CL   es   Spanish   Chile   Chilean Spanish   es-CO   es   Spanish   Columbia   Colombian Spanish   es-ES   es   Spanish   Spain   Castilian Spanish (as spoken in Central-Northern Spain)   es-MX   es   Spanish   Mexico   Mexican Spanish   es-US   es   Spanish   United States   American Spanish   fi-FI   fi   Finnish   Finland   Finnish (Finland)   fr-BE   fr   French   Belgium   Belgian French   fr-CA   fr   French   Canada   Canadian French   fr-CH   fr   French   Switzerland   &quot;Swiss&quot; French   fr-FR   fr   French   France   Standard French (especially in France)   he-IL   he   Hebrew   Israel   Hebrew (Israel)   hi-IN   hi   Hindi   India   Hindi (India)   hu-HU   hu   Hungarian   Hungary   Hungarian (Hungary)   id-ID   id   Indonesian   Indonesia   Indonesian (Indonesia)   it-CH   it   Italian   Switzerland   &quot;Swiss&quot; Italian   it-IT   it   Italian   Italy   Standard Italian (as spoken in Italy)   ja-JP   ja   Japanese   Japan   Japanese (Japan)   ko-KR   ko   Korean   Republic of Korea   Korean (Republic of Korea)   nl-BE   nl   Dutch   Belgium   Belgian Dutch   nl-NL   nl   Dutch   The Netherlands   Standard Dutch (as spoken in The Netherlands)   no-NO   no   Norwegian   Norway   Norwegian (Norway)   pl-PL   pl   Polish   Poland   Polish (Poland)   pt-BR   pt   Portuguese   Brazil   Brazilian Portuguese   pt-PT   pt   Portuguese   Portugal   European Portuguese (as written and spoken in Portugal)   ro-RO   ro   Romanian   Romania   Romanian (Romania)   ru-RU   ru   Russian   Russian Federation   Russian (Russian Federation)   sk-SK   sk   Slovak   Slovakia   Slovak (Slovakia)   sv-SE   sv   Swedish   Sweden   Swedish (Sweden)   ta-IN   ta   Tamil   India   Indian Tamil   ta-LK   ta   Tamil   Sri Lanka   Sri Lankan Tamil   th-TH   th   Thai   Thailand   Thai (Thailand)   tr-TR   tr   Turkish   Turkey   Turkish (Turkey)   zh-CN   zh   Chinese   China   Mainland China, simplified characters   zh-HK   zh   Chinese   Hong Kong   Hong Kong, traditional characters   zh-TW   zh   Chinese   Taiwan   Taiwan, traditional characters","categories":["notes"]},{"title":"How to Check and Update NPM Package Versions","url":"/en/2021/10/22/npm-check-update.html","content":"First, check which packages have updates   $ npm outdated   To view the latest version information of a specific package   $ npm view xxx versions  or$ npm info xxx   Install a package with a specific version using npm   $ npm i xxx@1.11.1 --save-dev   Update a package to a specific version using npm   $ npm update xxx --save-dev   Install the latest version of a package   $ npm i xxx@latest --save-dev   View the list of installed packages using npm   $ npm list   View version information of a specific installed package using npm   $ npm list xxx   Use npm-check to view package updates   $ npm install -g npm-check  # First install npm-check globally$ npm-check -u              # Check for updates in the current project$ npm-check -u -g           # Check for updates in globally installed packages   This will list all updates. Use arrow keys to navigate, spacebar to select or deselect, and press Enter when done.","categories":["notes"]},{"title":"Stewed Lamb Chop with Mushrooms","url":"/en/2021/10/19/stewed-lamb-chop-with-mushroom.html","content":"Ingredients   Ingredient   Quantity   Lamb Chops   6 pieces   Mushrooms   300g   Oil   Large amount   Salt   To taste   Chili   To taste   Sichuan Peppercorn   To taste   Star Anise   To taste   Cumin   To taste   Lamb chops must be blanched to remove blood foam, otherwise the smell will be strong.   Cooking Steps   Image   Step   1.    Prepare ingredients   2.    Seasoning plate: chili, Sichuan peppercorn, star anise, cumin   3.    Soak lamb chops in water to release blood   4.    Blanch in warm water and remove   5.    Add to seasonings and stir-fry lamb chops over medium heat   6.    Add water, mushrooms, and salt   7.    Stew over medium heat for 30 minutes   8.    Plate and serve","categories":["cookbooks"]},{"title":"Stir-fried Meat with Green Bell Pepper","url":"/en/2021/09/05/green-pepper-parch-meat.html","content":"Ingredients   Ingredient   Quantity   Green Bell Pepper   300g   Pork   120g   Oil   To taste   Garlic   To taste   Salt   To taste   Light Soy Sauce   To taste   Dark Soy Sauce   Small amount   Cooking Wine   To taste   Key to tender meat and delicious green bell pepper: no high heat, use medium heat throughout.   Cooking Steps   Image   Step   1.    Prepare ingredients   2.    Prepare seasonings: garlic, chili   3.    Cut green bell pepper into strips   4.    Cut meat into strips, squeeze out water, add starch, light soy sauce, cooking wine   5.    Mix until sticky and marinate   6.    Add oil over medium heat, add seasonings to fragrance   7.    Add meat strips and cook through   8.    Add green bell pepper and stir-fry evenly   9.    Add salt and dark soy sauce, stir-fry   10.    Finish cooking   11.    Plate and serve","categories":["cookbooks"]},{"title":"Scrambled Eggs with Tomato and Sausage","url":"/en/2021/06/14/scrambled-egg-with-tomato-sausage.html","content":"Ingredients   Ingredient   Quantity   Tomato   250g   Eggs   2 pieces   Sausage   60g   Oil   To taste   Dried chili   To taste   Salt   To taste   Rock sugar   To taste   Cooking Steps   Image   Step   1.    Prepare ingredients   2.    Cut off tomato base for easier peeling after boiling   3.    Boil until tomato skin cracks   4.    Peel tomato   5.    Cut tomato into small pieces   6.    Beat eggs, add chopped green onion   7.    Slice sausage and chili, set aside   8.    Heat oil, pour in egg mixture   9.    Add sausage and chili, stir-fry evenly   10.    Add tomato pieces, stir-fry evenly, add salt (crush tomato pieces with spatula)   11.    Remove from heat   12.    Plate and serve   #### 食材用料   食材   数量   -------   ------   番茄   250克   鸡蛋   两个   香肠   60克   油   适量   干辣椒   适量   盐   适量   冰糖   适量   做法步骤   图片   步骤   1.    准备食材   2.    番茄底部切掉，为了煮开的时候更好裂皮   3.    开水煮到番茄表面裂皮   4.    番茄剥皮   5.    番茄切成小块   6.    打入鸡蛋、葱花搅拌   7.    香肠切片和辣椒装在一起   8.    热锅热油，油冒烟放入鸡蛋液   9.    放入香肠辣椒翻炒均匀   10.    放入番茄块翻炒均匀，放入盐（番茄块用锅铲摁烂）   11.    收锅   12.    装盘","categories":["cookbooks"]},{"title":"JavaScript Comment Standards","url":"/en/2021/04/28/javascript-document-convertions.html","content":"Type Syntax   Type Name   Syntax Example   Description   Symbol name   {string}, {myNamespace.MyClass}   Specifies the name of a symbol.   Multiple types   {number|boolean}   This means the value may be one of several types, with the complete list of types separated by &quot;   Arrays   {string[]}, {MyClass[]}   The expression    string[]    represents an array of strings,    the expression    {MyClass[]}    identifies an array with MyClass instances   Objects   {a: number, b: string, c}     // or     {object} myObj     {number} myObj.a     {string} myObj.b     {any} myObj.c   Object &quot;MyObj&quot; has properties &#39;a&#39; (a number) &#39;b&#39; (a string) and &#39;c&#39; (any type),    For objects with a set of known properties,    you can use Closure Compiler syntax to document annotated types.    You can also describe each property separately,    which allows you to provide more detailed information about each property.   Nullable type   {?number}   Indicates the type is the specified type, or null.   Non-nullable type   {!number}   Indicates the type is the specified type, but will never be null.   Variable number of that type   @param {...number} num   Indicates that the function accepts a variable number of parameters, and specifies a type of parameter.   Optional parameter   @param {number} [foo=1]   Indicates the parameter is optional, you can also specify the default value of the parameter.   Callbacks   @callback myCallback     @param {number} x - ...   Use the @callback tag to specify a callback.    Same as the @typedef tag,    the difference is that the callback type is always &quot;function&quot;.   Type definitions   @typedef {object} PropertiesHash     @property {string} id     @property {string} name     @property {number} age   You can use the @typedef tag to document complex types.   Common Comment Keywords   Comment Name   Alias   Description   @param   @argument, @arg   Documents parameters passed to a function.   @return   @returns   Documents the return value of a function.   @method   @function, @func   Describes a function or method.   @typedef   Documents a custom type.   @property   @prop   Documents a property of an object.   @callback   Describes a callback function.   @author   Specifies the author of the project.   @copyright   Describes copyright information for a file.   @description   Describes an identifier.   @param   Documents parameters passed to a function.   Aliases: @arg, @argument   /*** @param {string} somebody - Somebody's name.*/function sayHello(somebody) {alert('Hello ' + somebody);}   If the parameter is an object with specific properties:   /*** Assign the project to an employee.* @param {object} employee            - The employee who is responsible for the project.* @param {string} employee.name       - The name of the employee.* @param {string} employee.department - The employee's department.*/Project.prototype.assign = function(employee) { ... };   If the parameter&#39;s property values are in an array:   /*** Assign the project to a list of employees.* @param {object[]} employees            - The employees who are responsible for the project.* @param {string} employees[].name       - The name of an employee.* @param {string} employees[].department - The employee's department.*/Project.prototype.assign = function(employees) { ... };   An optional parameter with default value:   /*** @param {string} [somebody=John Doe] - Somebody's name.*/function sayHello(somebody) {if (!somebody) {  somebody = 'John Doe';}alert('Hello ' + somebody);}   Allowing one type or another:   /*** @param {string|string[]} [somebody=John Doe] - Somebody's name, or an array of names.*/function sayHello(somebody) {if (!somebody) {  somebody = 'John Doe';} else if (Array.isArray(somebody)) {  somebody = somebody.join(', ');}alert('Hello ' + somebody);}   Parameter accepts a callback function:   /*** @param {requestCallback} cb*//*** @callback requestCallback* @param {number} responseCode* @param {string} responseMessage*/function doSomethingAsynchronously(cb) { ... }   @return   Documents the return value of a function.   Alias: @returns   /*** Returns the sum of a and b* @param {number} a* @param {number} b* @param {boolean} retArr If set to true, the function will return an array* @return {number|array} Sum of a and b or an array that contains a, b and the sum of a and b.*/function sum(a, b, retArr) {if (retArr) {  return [a, b, a + b];}return a + b;}   @method   Describes a function or method.   Aliases: @function, @func   /*** Returns the sum of a and b* @method sum* @param {number} a* @param {number} b* @return {number} Sum of a and b or an array that contains a, b and the sum of a and b.*/function sum(a, b) {return a + b;}   @typedef   Documents a custom type.   /*** The complete Triforce, or one or more components of the Triforce.* @typedef {Object} WishGranter~Triforce* @property {boolean} hasCourage - Indicates whether the Courage component is present.* @property {boolean} hasPower   - Indicates whether the Power component is present.* @property {boolean} hasWisdom  - Indicates whether the Wisdom component is present.*//*** A class for granting wishes, powered by the Triforce.* @class* @param {...WishGranter~Triforce} triforce - One to three {@link WishGranter~Triforce} objects* containing all three components of the Triforce.*/function WishGranter() {}   @property   Documents a property of an object.   /*** @namespace* @property {object}  defaults               - The default values for parties.* @property {number}  defaults.players       - The default number of players.* @property {string}  defaults.level         - The default level for the party.* @property {object}  defaults.treasure      - The default treasure.* @property {number}  defaults.treasure.gold - How much gold the party starts with.*/var config = {defaults: {  players: 1,  level: 'beginner',  treasure: {    gold: 0  }}};   @callback   Describes a callback function.   /*** @class*/function Requester() {}   /**   Send a request.   @param {Requester~requestCallback} cb - The callback that handles the response.   /Requester.prototype.send = function(cb) {// code};   /**   This callback is displayed as part of the Requester class.   @callback Requester~requestCallback   @param {number} responseCode   @param {string} responseMessage   /   @author   Specifies the author of the project.   /*** @author Zane Liu &lt;liuzane@example.com&gt;*/function MyClass() {}   @copyright   Describes some copyright information.   /*** @file This is my cool script.* @copyright Zane Liu 2021*/   @description   Describes an identifier.   /*** @param {number} a* @param {number} b* @returns {number}* @description Add two numbers.*/function add(a, b) {return a + b;}","categories":["javascript"]},{"title":"Spicy Fried Shrimp","url":"/en/2020/12/27/fried-shrimp-with-chilli.html","content":"Ingredients   Ingredient   Quantity   Shrimp   10 pieces   Oil   To taste   Green Onion   To taste   Garlic   To taste   Ginger   To taste   Chili   To taste   Bay Leaves   To taste   Salt   To taste   Water   Half bowl   Light Soy Sauce   To taste   Cooking Steps   Image   Step   1.    Prepare ingredients   2.    Cut green onion into sections, shred ginger, mince garlic and plate   3.    Prepare sauce: water, light soy sauce, salt, bay leaves   4.    Wash shrimp and remove vein   5.    Heat oil in pan, add shrimp, pan-fry until both sides turn beautiful red and shrimp oil comes out, then remove shrimp (lightly press shrimp with spatula to extract more red oil)   6.    Add green onion and ginger to shrimp oil pan to fragrance   7.    Add pan-fried shrimp and pour in sauce   8.    Reduce sauce over high heat   9.    Plate and serve","categories":["cookbooks"]},{"title":"localStorage","url":"/en/2020/12/10/local-storage.html","content":"setStorage(key, data, hours)   Set localStorage```javascript/**   @method setStorage   @param {string} key   @param {any} data   @param {number} hours   @return {boolean}   /function setStorage(key, data, hours) { let expires;    if (!key || !data) {   console.error(&#39;[localStorage Error]: Key and Data is a must parameter&#39;);   return false; }    expires = hours ? new Date().getTime() + 1000 * 60 * 60 * hours : new Date(0).getTime(); localStorage.setItem(key, JSON.stringify({ data, expires }));    return true;}   getStorage(key)   Get localStorage```javascript/**   @method getStorage   @param {string} key   @return {boolean|null}   /function getStorage(key) { let data, nowTime = new Date().getTime();    if (!key) console.error(&#39;[localStorage Error]: Key is a must parameter&#39;);    try {   data = JSON.parse(localStorage.getItem(key)); } catch (error) {   return localStorage.getItem(key); }    if (!data) return null;    if (!Boolean(data.expires) || data.expires &gt;= nowTime) {   return data.data; } else {   localStorage.removeItem(key);   return null; }}   clearStorage(key)   Clear localStorage```javascript/**   @method clearStorage   @param {string} key   /function clearStorage(key) { if (key) {   localStorage.removeItem(key); } else {   localStorage.clear(); }}```","categories":["javascript"]},{"title":"Cookies","url":"/en/2020/12/10/cookies.html","content":"setCookie(params)   Set Cookie```javascript/**   @method setCookie   @param {object} options   @param {string} options.key   @param {string} options.value   @param {number} [options.hours]   @param {string} [options.path]   - path: &#39;/&#39;   @param {string} [options.domain] - domain: document.domain   /function setCookie(options) { let time = new Date(), expires = &#39;&#39;, path = &#39;&#39;, domain = &#39;&#39;;    if (!options.key || !options.value) {   console.error(&#39;[Cookie Error]: key, value must be set.&#39;);   return; }    if (options.hours) {   try {   Number(options.hours);      } catch (e) {   console.error(&apos;[Cookie Error]: expires must is number.&apos;);      }      time.toGMTString(time.setTime(time.getTime() + 1000 * 60 * 60 * options.hours));   expires = &#39;expires=&#39; + time + &#39;;&#39;; }    if (options.path) path = &#39;path=&#39; + options.path + &#39;;&#39;;    if (options.domain) domain = &#39;domain=&#39; + options.domain;    document.cookie = options.key + &#39;=&#39; + options.value + &#39;;&#39; + expires + path + domain;}   getCookie(key)   Get Cookie```javascript/**   @method getCookie   @param {string} key    @return {undefined|string|null}   /function getCookie(key) { if (!key) {   console.error(&#39;[Cookie Error]: key is &#39; + (typeof key) + &#39;.&#39;);   return; } const regexp = new RegExp(&#39;(^|; )&#39; + key + &#39;=.*?(;|$)&#39;); const result = document.cookie.match(regexp); const value = result ? result[0].replace(/[; ]/g, &#39;&#39;).split(&#39;=&#39;)[1] : null; return value;}   deleteCookie(param)   ```javascript/**   @method deleteCookie   @param {string|object} param   @param {string} param.key   @param {string} [param.path]   @param {string} [param.domain]   @return {undefined|string|null}   /function deleteCookie(param) { const options = typeof param === &#39;object&#39; ? param : {}; const key = typeof param === &#39;string&#39; ? param : options.key;    if (!key) {   console.error(&#39;[Cookie Error]: key is &#39; + (typeof key) + &#39;.&#39;);   return; } if (options.path) path = &#39;path=&#39; + options.path + &#39;;&#39;; if (options.domain) domain = &#39;domain=&#39; + options.domain + &#39;;&#39;;    const regexp = new RegExp(&#39;(^|; )&#39; + key + &#39;=.*?(;|$)&#39;); const result = document.cookie.match(regexp); const item = result ? result[0].replace(/[; ]/g, &#39;&#39;) : &#39;&#39;; const time = new Date(); time.toGMTString(time.setTime(0)); document.cookie = item + &#39;;expires=&#39; + time + &#39;;&#39; + options.path + options.domain;}   clearCookie(params)   Clear Cookie```javascript/**   @method clearCookie   @param {object} [options]   @param {string} [options.path]   @param {string} [options.domain]   /function clearCookie(options) { let arr = document.cookie.split(&#39;;&#39;), path = &#39;&#39;, domain = &#39;&#39;;    if (!options) options = {}; if (options.path) path = &#39;path=&#39; + options.path + &#39;;&#39;; if (options.domain) domain = &#39;domain=&#39; + options.domain + &#39;;&#39;;    for (let i = 0; i &lt; arr.length; i++) {   let key = arr[i].substring(0, arr[i].indexOf(&#39;=&#39;));   document.cookie = key + &#39;=0;expires=Thu, 01 Jan 1970 00:00:00 GMT;&#39; + path + domain; }}```","categories":["javascript"]},{"title":"JavaScript Utility Functions","url":"/en/2020/12/10/javascript-utility-functions.html","content":"Method Collection:   Method Name   Description   typeOf   Validate data type.   deepCopy   Deep copy.   uuid   Generate UUID.   download   Download.   getUrlArg   Get URL parameter by name.   getUrlQuery   Convert URL parameters to object format.   setUrlQuery   Convert object format to URL parameters.   getDeepValueOfObject   Get deep value of object.   toThousands   Convert to thousands separator format.   typeOf(anything)   Validate data type.   All return values are strings   enum TypeValue {  Boolean = 'boolean',  Number = 'number',  String = 'string',  Function = 'function',  Array = 'array',  Date = 'date',  RegExp = 'regexp',  Undefined = 'undefined',  Null = 'null',  Object = 'object'}const TypeMap: Record&lt;string, TypeValue&gt; = {  '[object Boolean]': TypeValue.Boolean,   '[object Number]': TypeValue.Number,  '[object String]': TypeValue.String,  '[object Function]': TypeValue.Function,  '[object Array]': TypeValue.Array,  '[object Date]': TypeValue.Date,  '[object RegExp]': TypeValue.RegExp,  '[object Undefined]': TypeValue.Undefined,  '[object Null]': TypeValue.Null,  '[object Object]': TypeValue.Object};/** * Validate data type. * @method typeOf * @param {any} obj * @return {string} */export function typeOf(obj: unknown): TypeValue {  const toString = Object.prototype.toString;  return TypeMap[toString.call(obj)];}console.log(typeOf('abc')); // stringconsole.log(typeOf(['a', 'b', 'c'])); // arrayconsole.log(typeOf({ a: 1, b: 2, c: 3 })); // object   deepCopy(data)   Deep copy.   This method needs to be used together with the    typeOf()    method   /** * Data deep copy. * @method deepCopy * @param {array|object} data * @return {array|object} */export function deepCopy&lt;T&gt;(data: T): T {  const type: TypeValue = typeOf(data);  switch (type) {    case TypeValue.Array: {      const array: unknown[] = [];      for (let index = 0; index &lt; (data as unknown[]).length; index++) {        array.push(deepCopy(data[index]));      }      return array as T;    }    case TypeValue.Object: {      const object: Record&lt;string, unknown&gt; = {};      for (const key in data) {        if (Object.prototype.hasOwnProperty.call(data, key)) {          object[key] = deepCopy(data[key]);        }      }      return object as T;    }    default:      return data;  }}const obj1 = { a: 1, b: 2, c: 3 };const obj2 = deepCopy(obj1);console.log(obj1 === obj2); // false   formatDate(date, format)   Date formatting.   /** * Time and date formatting. * @method formatDate * @param {string|date} time * @return {string} */export function formatDate(time: string | Date, format = 'yyyy-MM-dd hh:mm:ss'): string {  const date: Date = time ? new Date(time) : new Date();  const dateValues: Record&lt;string, number&gt; = {    'M+': date.getMonth() + 1, // Month    'd+': date.getDate(), // Day    'h+': date.getHours(), // Hour    'm+': date.getMinutes(), // Minute    's+': date.getSeconds(), // Second    'q+': Math.floor((date.getMonth() + 3) / 3), // Quarter    'S': date.getMilliseconds() // Millisecond  };  if (/(y{4})/.test(format)) {    format = format.replace(RegExp.$1, (date.getFullYear() + '').substr(4 - RegExp.$1.length));  }  for (const key in dateValues) {    if (new RegExp('(' + key + ')').test(format)) {      const value = dateValues[key].toString();      format = format.replace(RegExp.$1, (RegExp.$1.length === 1) ? value : ('00' + value).substr(value.length));    }  }  return format;}console.log(formatDate('2024-05-01')); // '2024-05-01 00:00:00'console.log(formatDate('2024-05-01', 'yyyy-MM-dd')); // '2024-05-01'   uuid()   Generate UUID.   /** * @method uuid * @return {string} */function uuid() {  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {    const r = Math.random() * 16 | 0;    const v = c === 'x' ? r : (r &amp; 0x3 | 0x8);    return v.toString(16);  });}console.log(uuid()); // xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx   download(url, name)   Download.   /** * @method download * @param {string} url * @param {string} name */function download(url, name) {  const aDom = document.createElement('a');  aDom.download = name;  aDom.href = url;  document.body.appendChild(aDom);  aDom.click();  aDom.remove();}console.log(download('word.docx', 'https://www.test.com/word.docx')); // word.docx   getUrlArg(name)   Get URL parameter by name.   /** * @method getUrlArg * @param {string} name * @return {string} */function getUrlArg(name) {  const search = window.location.search;  const regexp = new RegExp(`(^|&amp;)${name}=([^&amp;]*)(&amp;|$)`);  const arg = search.substr(1).match(regexp);  return arg ? arg[2] : '';}","categories":["javascript"]},{"title":"Sauteed Cucumber with Sausage","url":"/en/2020/12/05/sauteed-cucumber-sausage.html","content":"Ingredients   Ingredient   Quantity   Cucumber   1 piece   Sausage   2 pieces   Oil   To taste   Garlic   To taste   Salt   To taste   Light Soy Sauce   To taste   Cooking Steps   Image   Step   1.    Prepare ingredients   2.    Slice cucumber   3.    Slice sausage   4.    Add oil over medium heat   5.    Add garlic to fragrance   6.    Add sausage and stir-fry   7.    Add cucumber and stir-fry   8.    Add salt and light soy sauce   9.    Finish cooking   10.    Plate and serve","categories":["cookbooks"]},{"title":"Stir-fried Meat with Celery","url":"/en/2020/11/30/celery-fried-meat.html","content":"Ingredients   Ingredient   Quantity   Celery   200g   Chicken Breast   Half piece   Oil   To taste   Garlic   To taste   White Pepper   To taste   Starch   To taste   Salt   To taste   Light Soy Sauce   To taste   Cooking Steps   Image   Step   1.    Prepare ingredients   2.    Prepare seasonings: slice garlic   3.    Cut celery into sections and blanch   4.    Slice meat, squeeze out water, add light soy sauce, white pepper, starch   5.    Mix until sticky   6.    Add oil over medium heat, add seasonings to fragrance   7.    Add meat slices and stir-fry   8.    Add celery sections, then add a little water and stir-fry over high heat   9.    Add salt and a little dark soy sauce, stir-fry   10.    Finish cooking   11.    Plate and serve","categories":["cookbooks"]},{"title":"Scrambled Eggs with Celery and Sausage","url":"/en/2020/11/29/scrambled-eggs-with-celery-sausage.html","content":"Ingredients   Ingredient   Quantity   Celery   150g   Sausage   2 pieces   Eggs   2 pieces   Oil   Small amt   Garlic   To taste   Salt   To taste   Light soy sauce   To taste   Cooking Steps   Image   Step   1.    Prepare ingredients   2.    Beat eggs   3.    Cut celery into small pieces   4.    Slice sausage   5.    Add oil over medium heat   6.    Add sausage and stir-fry   7.    Add celery and stir-fry   8.    Add beaten eggs   9.    Stir-fry until eggs are set   10.    Add salt and finish cooking   11.    Plate and serve","categories":["cookbooks"]},{"title":"Hand-torn Chicken","url":"/en/2020/11/27/hand-tore-the-chicken.html","content":"Ingredients   Ingredient   Quantity   Boneless Chicken Thighs   2 pieces   Ginger   To taste   Cooking Wine   To taste   Green Onion   To taste   Garlic   To taste   Chili Powder   To taste   Salt   To taste   Light Soy Sauce   To taste   Sesame Oil   To taste   Sichuan Pepper Oil   To taste   Cooking Steps   Image   Step   1.    Prepare ingredients   2.    Boil chicken seasoning: green onion sections, ginger slices, salt, and cooking wine   3.    Put chicken thighs and boiling seasoning in pot, add water and cook for about 20 minutes   4.    Meanwhile, prepare marinade: green onion sections, minced garlic, chili powder, salt, light soy sauce, Sichuan pepper oil, sesame oil   5.    Tear cooked chicken thighs into shreds   6.    Pour marinade over and mix well   7.    Plate and serve","categories":["cookbooks"]},{"title":"Spicy Chicken Mid Wings","url":"/en/2020/10/31/spicy-chicken-medium-wing.html","content":"Ingredients   Ingredient   Quantity   Chicken mid wings   4 pieces   Oil   Small amt   Green onion   To taste   Ginger   To taste   Garlic   To taste   Star anise   2 pieces   Dried chili   To taste   Sichuan peppercorn   To taste   Salt   To taste   Light soy sauce   To taste   Dark soy sauce   To taste   Sesame oil   To taste   Chicken wings must be blanched to remove blood foam, otherwise the dish will taste gamey.   Cooking Steps   Image   Step   1.    Prepare ingredients   2.    Slice green onion, mince garlic, slice ginger, and gather with dried chili, Sichuan peppercorn, star anise   3.    Thaw and clean chicken mid wings, cut slits (or poke with a toothpick for flavor)   4.    Heat oil in pan, fry chicken wings until golden on the surface   5.    Add green onion, garlic, chili rings, Sichuan peppercorn, star anise and stir-fry until fragrant   6.    Add half a bowl of water, light soy sauce, dark soy sauce, salt   7.    When the sauce is almost reduced, add sesame oil and finish   8.    Plate and serve","categories":["cookbooks"]},{"title":"Stir-fried Meat with Green Vegetables","url":"/en/2020/10/31/green-vegetables-meat.html","content":"Ingredients   Ingredient   Quantity   Green Vegetables   250g   Chicken Breast   Half piece   Oil   Large amount   Garlic   To taste   Chili Rings   To taste   Sichuan Peppercorn   To taste   Salt   To taste   Light Soy Sauce   To taste   Dark Soy Sauce   To taste   Key to prevent green vegetables from releasing water: use more oil, add salt at the very end after cooking.   Cooking Steps   Image   Step   1.    Prepare ingredients   2.    Prepare seasonings: slice garlic, Sichuan peppercorn, chili rings   3.    Wash green vegetables and blanch   4.    Slice meat, squeeze out water, add starch, light soy sauce, a little dark soy sauce   5.    Mix until sticky   6.    Add oil over medium heat, add garlic, chili rings, Sichuan peppercorn to fragrance   7.    Add meat slices and stir-fry until meat is cooked   8.    Add green vegetables and stir-fry over high heat   9.    Finally add salt and stir-fry briefly to season   10.    Remove from heat   11.    Plate and serve","categories":["cookbooks"]},{"title":"Potato Cubes Stewed with Meat","url":"/en/2020/10/21/potato-cubes-stew-with-meat.html","content":"Ingredients   Ingredient   Quantity   Potato   400g   Chicken Breast   Half piece   Oil   To taste   Green Onion   To taste   Ginger   To taste   Garlic   To taste   Chili Rings   To taste   Sichuan Peppercorn   To taste   Bay Leaf   1 piece   Salt   To taste   Dark Soy Sauce   Small amt   Light Soy Sauce   To taste   Cooking Steps   Image   Step   1.    Prepare ingredients   2.    Prepare seasonings: green onion, minced garlic, chili rings, Sichuan peppercorn   3.    Cut potato into cubes, soak in water to prevent browning   4.    Slice meat, squeeze out water   5.    Add oil and seasonings, stir-fry until fragrant   6.    Add meat and stir-fry over medium heat until cooked   7.    Add potato cubes, stir-fry evenly   8.    Add light soy sauce, dark soy sauce, salt, stir-fry over high heat   9.    Add bay leaf, water to cover ingredients, reduce sauce over high heat   10.    Remove from heat   11.    Plate and serve","categories":["cookbooks"]},{"title":"Potato with Meat Shreds","url":"/en/2020/10/21/potato-with-meat-shreds.html","content":"Ingredients   Ingredient   Quantity   Potatoes   2 pieces   Pork   100g   Oil   To taste   Garlic   To taste   Chili   To taste   Salt   To taste   Light Soy Sauce   To taste   Cooking Steps   Image   Step   1.    Prepare ingredients   2.    Shred potatoes   3.    Shred meat   4.    Add oil over high heat   5.    Add garlic and chili to fragrance   6.    Add meat shreds and stir-fry   7.    Add potato shreds and stir-fry   8.    Add salt and seasonings   9.    Finish cooking   10.    Plate and serve","categories":["cookbooks"]},{"title":"Automatically Deploy Frontend to GitHub Pages","url":"/en/2019/12/05/deploy-github-page.html","content":"Deploying your own project to GitHub Pages is quite troublesome - you need to build first and then push the files to the master/docs or gh-pages branch. Now GitHub has a plugin that can help you complete these steps:   GitHub repository:    gh-pages   Installation:   $ npm install gh-pages --save-dev   Note: This module requires git version &gt;= 1.9   Configuration:   Add the following code to the script field in package.json   \"scripts\": {  \"deploy\": \"npm run build &amp; gh-pages -d dist\",}   Next, run    npm run deploy    which will first execute the build command, then start pushing the newly built files to the gh-pages branch of the project. Then in the GitHub project&#39;s Settings &gt; GitHub Pages, select gh-pages branch in Source. Wait a few minutes and open the URL to check:   https://${username}.github.io/${project}   Command Line Parameter Description   Parameter   Description   -d   Directory of files to push, here it&#39;s the dist folder in the project root directory.   -m   Push message, if the message is too long with spaces, you need to add double quotes in json    -m \\&quot;Update GitHub Page\\&quot;   -b   Branch to push to, default is gh-pages   For more parameters, please enter the following command in the terminal   $ gh-pages --help","categories":["guides"]},{"title":"Installing MySQL","url":"/en/2019/11/13/mysql-install.html","content":"Installing MySQL on Windows   Installing MySQL on Windows is relatively simple. The latest version can be downloaded from    MySQL Downloads    (for more detailed installation:    Installing MySQL on Windows   ).   Click the Download button to go to the download page, then click &quot;No thanks, just start my download&quot; in the image below to download immediately:   After downloading, extract the file to look like this (I placed the installation files in D:\\mysql):   Next, we need to configure MySQL&#39;s configuration file   Open the extracted folder D:\\mysql, create a my.ini configuration file in this folder, and edit my.ini with the following basic information:   [client]# Set MySQL client default character setdefault-character-set=utf8[mysqld]# Set port 3306port = 3306# Set MySQL installation directorybasedir=C:\\\\web\\\\mysql-8.0.11# Set the data storage directory for MySQL database, MySQL 8+ doesn&apos;t need the following configuration, the system generates it automatically, otherwise it might cause errors# datadir=C:\\\\web\\\\sqldata# Allow maximum connectionsmax_connections=20# Server character set defaults to 8-bit encoded latin1 character setcharacter-set-server=utf8# Default storage engine to use when creating new tablesdefault-storage-engine=INNODB   Next, let&#39;s start the MySQL database:   Open cmd command line tool as administrator, switch directory:   $ cd C:\\web\\mysql-8.0.11\\bin   Initialize the database:   $ mysqld --initialize --console   Note: This might cause an error:   mysqld : The term &quot;mysqld&quot; is not recognized as a cmdlet, function, script file, or operable program name. Please check the spelling of the name, and if a path is included, verify that the path is correct and try again.   There are two solutions: 1. Add ./ before the command like:    $ ./mysqld --initialize --console   2.    Configure MySQL environment variables   After execution, it will output the initial default password for the root user, such as:   ...2019-11-13T09:36:49.186128Z 5 [Note] [MY-010454] [Server] A temporary password is generated for root@localhost: &lt;!wbLjV?/3uq   &lt;!wbLjV?/3uq is the initial password, which will be needed for subsequent logins. You can also change the password after logging in.Enter the following installation command:   $ mysqld install   Start by entering the following command:   $ net start mysql   Logging into MySQL   When the MySQL service is running, we can log into the MySQL database using MySQL&#39;s built-in client tool. First, open the command prompt and enter the following format:   $ mysql -h hostname -u username -p   Parameter description:   -h : Specifies the MySQL hostname to log into. This parameter can be omitted when logging into the local machine (localhost or 127.0.0.1);   -u : The username to log in with;   -p : Tells the server that a password will be used to log in. If the username and password to log in are empty, this option can be ignored.   If we want to log into the local MySQL database, just enter the following command:   $ mysql -u root -p   Press Enter to confirm. If the installation is correct and MySQL is running, you&#39;ll get the following response:   $ Enter password:   If a password exists, enter the password to log in; if not, just press Enter to log in. After successful login, you&#39;ll see the &quot;Welcome to the MySQL monitor...&quot; prompt.Then the command prompt will wait for command input with mysq&gt; and a blinking cursor. Enter exit or quit to log out.   Configure MySQL Environment Variables   During the installation above, we saw that MySQL&#39;s default installation path is: D:\\mysql. Right-click on My Computer → Properties → Advanced System Settings → Environment Variables → New MYSQL_HOME, enter the installation directory:   Find path and edit: enter %MYSQL_HOME%\\bin   Open cmd and enter    mysql    to test   Connecting to MySQL in Navicat for MySQL   Download Navicat for MySQL   . After installation, run Navicat.   Client uses Navicat for MySQL. MySQL 8.0 is installed locally. But when connecting, it prompts:   Solution:   This line of code has two meanings: First, modify root&#39;s password to &#39;root&#39;, abandoning the old password. Second, use mysql_native_password to encode the new password.   $ ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'root';   For detailed error information, see    Navicat for MySQL connection error: 1251...","categories":["database"]},{"title":"Waves and Sky, A Veteran Sailor's Personal Experience","url":"/en/2019/10/31/wave-and-sky.html","content":"","categories":["reprints"]},{"title":"JPEG Image Display Optimization","url":"/en/2019/10/31/gradual-jpeg.html","content":"1. JPEG Introduction   JPEG stands for Joint Photographic Experts Group, and it&#39;s the first international image compression standard. The JPEG image compression algorithm can provide good compression performance while maintaining relatively good reconstruction quality, and is widely used in image and video processing fields.   2. Storage Methods   The JPEG file format has two storage methods. They are Baseline JPEG and Progressive JPEG.Both formats have the same size and image data, and their file extensions are also the same. The only difference is the way they are displayed.   2.1 Baseline JPEG   This type of JPEG file storage method scans from top to bottom, storing each row sequentially in the JPEG file. When opening this file to display its content, the data will be displayed from top to bottom, row by row, in the order it was stored, until all data has been read, completing the display of the entire image. If the file is large or the network download speed is slow, you will see the effect of the image being loaded row by row. This format of JPEG has no advantages, so Progressive JPEG is generally recommended.   2.2 Progressive JPEG   Unlike Baseline&#39;s single scan, Progressive JPEG files contain multiple scans, which are stored sequentially in the JPEG file. During the file opening process, the blurred outline of the entire image will be displayed first, and as the number of scans increases, the image becomes clearer and clearer. The main advantage of this format is that in slow network conditions, you can see the outline of the image and know roughly what the image being loaded is. You&#39;ll notice this technique when opening larger images on some websites.   3. How to Create   Use Photoshop   File &gt; Save As &gt; Click save first, then the JPEG options will pop up   If you want to create progressive JPEG, select &quot;Progressive&quot;   4. Application   When should you use basic JPEG and progressive JPEG?   When your JPEG image is below 10K, it&#39;s best to save as basic JPEG (estimated 75% chance it will be smaller)For files over 10K, progressive JPEG will provide better compression for you (in 94% of cases)Under Chrome + Firefox + IE9 browsers, progressive images load faster, and much faster. As for other browsers, the loading is consistent with basic images, at least not dragging behind.   Progressive images also have disadvantages - they consume CPU and memory.","categories":["guides"]},{"title":"Hens and Frontend Engineers","url":"/en/2019/10/25/hen-and-front-end-engineer.html","content":"","categories":["reprints"]},{"title":"RegExp","url":"/en/2019/10/22/regexp.html","content":"JavaScript RegExp Object   Syntax   var regexp = new RegExp(pattern, modifiers);    // Create via RegExp constructorvar regexp = /[pattern]/[modifiers];            // Create via literal   pattern describes the expression pattern   modifiers are used to specify global matching, case-sensitive matching, and multiline matching   Note: When using the constructor to create a regular expression object, you need to follow the regular character escaping rules (add backslash \\ in front). For example, the following are equivalent:   var regexp = new RegExp('\\\\w+');var regexp = /\\w+/;   Modifiers   Modifiers are used to specify global matching, case-sensitive matching, and multiline matching:   Modifier   Description   i   Perform case-insensitive matching.   g   Perform global matching (find all matches rather than stopping after the first match).   m   Perform multiline matching.   s   Allow . to match newline characters.   u   Use unicode code patterns for matching.   y   Perform &quot;sticky&quot; search, matching from the current position of the target string.   Quantifiers   Quantifiers define the exact or approximate number of repeated character matches:   Quantifier   Description   n+   Match any string containing at least one n.   n*   Match any string containing zero or more n.   n?   Match any string containing zero or one n.   n{X}   Match strings containing a sequence of X n&#39;s.   n{X,}   Match strings containing at least X n&#39;s in sequence.   n{X,Y}   Match strings containing at least X n&#39;s in sequence.   ^n   Match any string that starts with n.   n$   Match any string that ends with n.   ?=n   Match any string that is immediately followed by the specified string n.   ?!n   Match any string that is not immediately followed by the specified string n.   Metacharacters   Metacharacters are characters with special meanings:   Metacharacter   Description   .   (Decimal point) By default matches any single character except    newline   .   \\w   Match word characters (digits, letters, underscore).   \\W   Match non-word characters.   \\d   Match digits.   \\D   Match non-digit characters.   \\s   Match whitespace characters.   \\S   Match non-whitespace characters.   \\b   Match word boundaries.   \\B   Match non-word boundaries.   \\0   Match NULL character.   \\n   Match newline character.   \\f   Match form feed character.   \\r   Match carriage return character.   \\t   Match tab character.   \\v   Match vertical tab character.   \\xxx   Match character specified by octal number xxx.   \\xdd   Match character specified by hexadecimal number dd.   \\uxxxx   Match Unicode character specified by hexadecimal number xxxx.   Square Brackets   Square brackets are used to find characters within a certain range:   Expression   Description   [^]   Match any character. (Can match    newline   )   [abc]   Match any character between the square brackets.   [^abc]   Match any character not between the square brackets.   [0-9]   Match any digit from 0 to 9.   [a-z]   Match any character from lowercase a to lowercase z.   [A-Z]   Match any character from uppercase A to uppercase Z.   [A-z]   Match any character from uppercase A to lowercase z.   (red|blue|green)   Match any specified option.   RegExp Object Methods   Expression   Description   compile   Compile regular expression.   exec   Retrieve specified value in string. Returns found value and determines its position.   test   Retrieve specified value in string. Returns true or false.   String Object Methods Supporting Regular Expressions   Expression   Description   search   Retrieve value matching regular expression.   match   Find one or more regular expression matches.   replace   Replace substring matching regular expression.   split   Split string into string array.   Using Regular Expressions in Multiline Text   var string = 'Please yes\\nmake my day!';string.match(/yes.*day/); // nullstring.match(/yes[^]*day/); // 'yes\\nmake my day'   Lookahead and Negative Lookahead Assertions   Lookahead assertion means that x only matches if it&#39;s followed by y, must be written as /x(?=y)/. For example, to only match numbers before percent sign, write /\\d+(?=%)/.   var string = '100% of US presidents have been male';/\\d+(?=%)/.exec(string); // ['100']/have(?=%)/.exec(string); // null   Negative lookahead assertion means that x only matches if it&#39;s not followed by y, must be written as /x(?!y)/. For example, to only match numbers not before percent sign, write /\\d+(?!%)/.   var string = 'that's all 44 of them';/\\d+(?!%)/.exec(string); // ['44']/\\d+(?!.*of)/.exec(string); // null/\\d+(?!.*all)/.exec(string); // ['44']/\\d+(?!.*of|.*all)/.exec(string); // null   Lookbehind and Negative Lookbehind Assertions   ES2018 introduced lookbehind assertions, V8 engine version 4.9 (Chrome 62) already supports it.Lookbehind assertion means that x only matches if it&#39;s preceded by y, must be written as /(?&lt;=y)x/. For example, to only match numbers after dollar sign, write /(?&lt;=$)\\d+/.   var string = 'Benjamin Franklin is on the $100 bill';/(?&lt;=\\$)\\d+/.exec(string);  // [\"100\"]   Negative lookbehind assertion means that x only matches if it&#39;s not preceded by y, must be written as /(?&lt;!y)x/. For example, to only match numbers not after dollar sign, write /(?&lt;!$)\\d+/.   var string = 'it's is worth about €90';/(?&lt;!\\$)\\d+/.exec(string);  // [\"90\"]   Greedy and Non-greedy Modes   Greedy mode: Regular expressions generally tend toward maximum length matching, always trying to match as many characters as possible.   var html = '&lt;html&gt;&lt;head&gt;&lt;title&gt;&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;';var regexp = /(&lt;.*&gt;)/;html.match(regexp); // ['&lt;html&gt;&lt;head&gt;&lt;title&gt;&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;']   Non-greedy mode: Non-greedy matching means matching just enough to get the result, always trying to match as few characters as possible.   var html = '&lt;html&gt;&lt;head&gt;&lt;title&gt;&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;';var regexp = /(&lt;.*?&gt;)/;html.match(regexp); // ['&lt;html&gt;']   Simple description of lazy matching for 6 repetition types:   {n,m}?: Try to match n times, but may repeat up to m times to satisfy constraints.   {n}?: Try to match n times.   {n,}?: Try to match n times, but may match any number of times to satisfy constraints.   ??: Try to match, but may match at most 1 time to satisfy constraints, equivalent to {0,1}?.   +?: Try to match 1 time, but may match any number of times to satisfy constraints, equivalent to {1,}?.   *?: Try not to match, but may match any number of times to satisfy constraints, equivalent to {0,}?.   Capturing and Non-capturing Groups   Capturing (): Capturing groups temporarily store the content matched by each capturing group somewhere for later use. In JavaScript, the content matched by capturing groups is saved in the format $1, $2, $3, etc. Therefore, capturing groups have performance overhead.   var string = 'sjds24324abcabc1234';var regexp = /(abc){2}/;string.match(regexp); // ['abcabc', 'abc']   Non-capturing (?:): Non-capturing groups only return a result without individual group matches (without substrings). So it improves matching speed.   var string = 'sjds24324abcabc1234';var regexp = /(?:abc){2}/;string.match(regexp); // ['abcabc']   Named Group Captures   Named group captures use the symbol ?&lt;name&gt; to access matched regular expression results by name. If a named group doesn&#39;t match, the corresponding groups object property will be undefined.   var date = '2023-01-01';var regexp = /(?&lt;year&gt;\\d{4})-(?&lt;month&gt;\\d{2})-(?&lt;day&gt;\\d{2})/u;regexp.exec('2023-01-01'); // { year: '2023', month: '01', day: '01' }","categories":["javascript"]},{"title":"VSCode Configuration","url":"/en/2019/09/21/vscode-configuration.html","content":"Code Formatting Shortcuts:            ```    Shift + Alt + F    ```              ```    Shift (⇧) + Option (⌥) + F    ```              ```    Ctrl + Shift + I    ```     Shortcut Configuration:   Redo (Reverse Undo):            ```    Ctrl + Shift + Z   ->   Ctrl + Y    ```              ```    Command (⌘) + Shift (⇧) + Z   ->   Command (⌘) + Y    ```     Copy Line Down (Quick copy one line):            ```    Shift + Alt + ↓   ->   Ctrl + D    ```              ```    Shift (⇧) + Option (⌥) + ↓   ->   Command (⌘) + D    ```     Transform to Uppercase:            ```    Null   ->   Ctrl + Shift + U    ```              ```    Null   ->   Command (⌘) + Shift (⇧) + U    ```     Transform to Lowercase:            ```    Null   ->   Ctrl + Shift + L    ```              ```    Null   ->   Command (⌘) + Shift (⇧) + L    ```     Extensions   GitLens   : Shows who wrote each line of code   vscode-fileheader   : Displays file author modification information   ESLint   : Uses the project&#39;s eslint configuration file to check project code   Prettier - Code formatter   : Prettier code formatting   Tailwind CSS IntelliSense   : Tailwind CSS syntax hint plugin   {  \"recommendations\": [    \"eamodio.gitlens\",    \"dbaeumer.vscode-eslint\",    \"esbenp.prettier-vscode\",    \"bradlc.vscode-tailwindcss\"  ]}   VSCode Editor Settings:   {  \"editor.detectIndentation\": true,  \"editor.tabSize\": 2,  \"files.eol\": \"\\n\",  \"files.autoSave\": \"off\",}   Indentation    Indentation   detectIndentation    - Controls whether to automatically detect &quot;editor.tabSize&quot; and &quot;editor.insertSpaces&quot; based on file content when opening files.   tabSize    - Number of spaces a tab is equal to. When &quot;editor.detectIndentation&quot; is on, this setting will be overridden based on file content.   insertSpaces    - Insert spaces when pressing &quot;Tab&quot;. When &quot;editor.detectIndentation&quot; is on, this setting will be overridden based on file content.   {  \"editor.detectIndentation\": true,  \"editor.tabSize\": 2,  \"editor.insertSpaces\": true}   Line Endings   Default line ending character.   Value   Description   \\n   LF (Linux)   \\r\\n   CRLF (Windows)   auto   Uses operating system specific end of line character.   {  \"files.eol\": \"\\n\",  // Configure settings to be overridden for the shellscript language.  \"[shellscript]\": {    \"files.eol\": \"\\n\"  }}   Auto Save    Auto Save   Value   Description   off   To disable auto save.   afterDelay   To save files after a configured delay (default 1000 ms).   onFocusChange   To save files when focus moves out of the editor of the dirty file.   onWindowChange   To save files when the focus moves out of the VS Code window.   {  \"files.autoSave\": \"off\",  \"files.autoSaveDelay\": 1000}   Auto Formatting    Formatting   formatOnSave    - Format code files when saving   formatOnType    - Format the line of code after typing   formatOnPaste    - Format pasted content   {  \"editor.formatOnSave\": true,  \"editor.formatOnType\": false,  \"editor.formatOnPaste\": false}   Default Formatter    Default formatter   dbaeumer.vscode-eslint    - ESLint Plugin.   esbenp.prettier-vscode    - Prettier - Code formatter.   {  // Will format code according to eslint configuration  \"editor.defaultFormatter\": \"dbaeumer.vscode-eslint\"}   Word Wrap   Whether to wrap lines when code length exceeds editor visible width   {  \"editor.wordWrap\": \"on\"}   Expand Abbreviations    Emmet   Use shortcut syntax to expand tags, e.g., ul&gt;li*3&gt;span.hello   {  \"emmet.triggerExpansionOnTab\": true}   Sticky Scroll    Sticky Scroll   https://code.visualstudio.com/updates/v1_85#_sticky-scroll-in-trees   {  \"workbench.tree.enableStickyScroll\": false,  \"editor.stickyScroll.enabled\": false}   Others   dragAndDrop    - Control whether the editor allows drag-and-drop to move the selected content.   ignoreRecommendations    - Set to true to disable extension recommendation push,    see details here   proxy    - Set proxy for editor   {  \"editor.dragAndDrop\": false,  \"extensions.ignoreRecommendations\": true,  \"http.proxy\": \"http://127.0.0.1:1000\"}","categories":["notes"]},{"title":"WebStorm Configuration","url":"/en/2019/09/20/webstorm-configuration.html","content":"Setting Chinese Font   Uncheck &quot;Show only monospaced fonts&quot;   Font: Consolas   Size: 14   Line spacing: 1.2   Fallback font: Microsoft YaHei   Code Formatting Shortcut:   Ctrl + Alt + L   Keyboard Shortcuts:   Add Or Remove Caret (Multi-cursor):   Alt + Button1 Click   Redo (Reverse Undo):   Ctrl + Shift + Z   Expand Live Template / Emmet Abbreviation:   Tab   Fix ESLint Problems:   Alt + Shift + L   Configure Spaces Between Braces and Brackets:   Settings &gt; Editor &gt; Code Style &gt; JavaScript &gt; Space, find &quot;Within&quot; and check the following items:   Object literal braces   ES6 import/export braces   Array brackets   Interpolation expressions   Configure ESLint   Settings &gt; Plugins, install ESLint plugin   Settings &gt; ESLint Settings, configure   Search for ESLint in Settings, or find Settings &gt; Languages &amp; Frameworks &gt; JavaScript &gt; Code Quality Tools &gt; ESLint   Disable WebStorm Auto-Save   Step 1:   Settings &gt; Appearance &amp; Behavior &gt; System Settings&gt; Synchronization   &gt; Synchronize files on frame or editor tab activation           // Save when activating current window   &gt; Save files on frame deactivation                              // Save when switching to other windows   &gt; Save files automatically if application is idle for 15 sec.  // Set a time for auto-save   &gt; Use &quot;safe write&quot; (save changes to a temporary file first)    // Safe write, this option continuously saves source files, so just close the last one   Step 2:   Settings &gt; Editor &gt; General &gt; Editor Tabs&gt; Appearance   &gt; Mark modified(*)   // Modified files will show * (in the bottom right corner of file icon)","categories":["notes"]}]