[{"title":"Batch Rename Files with Digital Serial Numbers","url":"/en/2025/10/25/batch-rename-files-with-digital-serial-numbers.html","content":"Introduction   Batch rename files by adding digital serial numbers. For example, with the following file structure:   image_folder|- 0asu78rec5k1.jpg|- 7ajzsdb1b32a.jpg|- ib1bls015hsh.jpg...   After executing the script, the file structure will look like:   image_folder|- image_01.jpg|- image_02.jpg|- image_03.jpg...   Note: This script sorts files only in alphabetical order and doesn&#39;t consider file creation time or other factors. If you want to sort by creation time, first batch rename the files in your current order, then run this script.   How to Use              ```bash    ./rename.sh ./image_folder -p \"image_\" -s 1 -z true    ```              ```cmd    .\\rename.cmd -d \".\\image_folder\" -p \"image_\" -s 1 -z true    ```     Parameter   Description   Default Value   -d   Target directory   Current directory   -p   Prefix for new filenames   Empty string   -s   Starting number for sequence   1   -z   Whether to pad numbers less than 10 with zero   true   -h   Show this help message   None   Source Code            ```bash rename.sh    #!/bin/bash# Batch rename all files in the specified folder, supporting custom prefix and starting number# Default parameter settingsTARGET_DIR=&quot;.&quot;prefix=&quot;&quot;start_number=1pad_zero=true# Show usage informationshow_usage() {  echo &quot;Usage: $0 [-d directory_path] [-p file_prefix] [-s starting_number] [-z zero_padding(true/false)]&quot;  echo &quot;&quot;  echo &quot;Options:&quot;  echo &quot;  -d directory_path    Specify the directory to process (default: current directory)&quot;  echo &quot;  -p file_prefix       Prefix for new filenames (default: empty)&quot;  echo &quot;  -s starting_number   Starting number for sequence (default: 1)&quot;  echo &quot;  -z true/false        Whether to pad numbers less than 10 with zero (default: true)&quot;  echo &quot;  -h                   Show this help message&quot;  echo &quot;&quot;  echo &quot;Examples:&quot;  echo &quot;  $0 -d /path/to/dir -p img_ -s 1 -z true&quot;  echo &quot;  $0 -d /path/to/dir -p photo_ -s 10 -z false&quot;}# Parse command line argumentswhile getopts &quot;d:p:s:z:h&quot; opt; do  case $opt in    d) TARGET_DIR=&quot;$OPTARG&quot; ;;    p) prefix=&quot;$OPTARG&quot; ;;    s) start_number=&quot;$OPTARG&quot; ;;    z)      if [ &quot;$OPTARG&quot; = &quot;false&quot; ]; then        pad_zero=false      else        pad_zero=true      fi      ;;    h) show_usage; exit 0 ;;    *) show_usage; exit 1 ;;  esacdone# Check if directory existsif [ ! -d &quot;$TARGET_DIR&quot; ]; then  echo &quot;Error: Directory &#39;$TARGET_DIR&#39; does not exist&quot;  exit 1fi# Enter target directorycd &quot;$TARGET_DIR&quot; || exit 1echo &quot;Starting to rename files in &#39;$TARGET_DIR&#39;...&quot;echo &quot;Prefix: &#39;$prefix&#39;&quot;echo &quot;Starting number: $start_number&quot;echo &quot;Zero padding: $pad_zero&quot;echo &quot;&quot;# Get all files sorted alphabetically, excluding directories and current scriptfiles=()script_name=&quot;$(basename &quot;$0&quot;)&quot;while IFS= read -r file; do  # Ensure it&#39;s a file (not directory) and exclude the current script  if [ -f &quot;$file&quot; ] &amp;&amp; [ &quot;$file&quot; != &quot;$script_name&quot; ]; then    files+=(&quot;$file&quot;)  fidone &lt; &lt;(ls -1 | grep -v &quot;^$script_name$&quot;)# Check if there are files to renameif [ ${#files[@]} -eq 0 ]; then  echo &quot;Error: No files to rename in directory &#39;$TARGET_DIR&#39;&quot;  exit 1fi# File sequence starts from specified valuecount=$start_number# Iterate and rename filesfor file in &quot;${files[@]}&quot;; do  # Get file extension  extension=&quot;${file##*.}&quot;    # Set format string based on zero padding option  if [ &quot;$pad_zero&quot; = true ]; then    format=&quot;%02d&quot;  else    format=&quot;%d&quot;  fi    # Format the number  new_name=&quot;${prefix}$(printf &quot;$format&quot; &quot;$count&quot;)&quot;    # If file has extension, preserve it  if [ &quot;$file&quot; != &quot;$extension&quot; ]; then      new_name=&quot;${new_name}.${extension}&quot;  fi    # Check if new filename already exists  if [ -e &quot;$new_name&quot; ] &amp;&amp; [ &quot;$file&quot; != &quot;$new_name&quot; ]; then    echo &quot;Warning: File &#39;$new_name&#39; already exists, skipping renaming of &#39;$file&#39;&quot;    continue  fi    # Perform the rename  mv &quot;$file&quot; &quot;$new_name&quot;  echo &quot;Renamed: &#39;$file&#39; -&gt; &#39;$new_name&#39;&quot;    count=$((count + 1))doneecho &quot;&quot;echo &quot;Rename completed, processed ${#files[@]} files&quot;```              ```cmd rename.cmd    @echo off    chcp 65001 >nul    setlocal enabledelayedexpansionrem Batch rename file script - supports command line parametersrem Default parameter settingsset &quot;TARGET_DIR=.&quot;set &quot;prefix=pic_&quot;set &quot;start_num=1&quot;set &quot;zero_pad=true&quot;rem Check if there are command line arguments:has_argsif &quot;%~1&quot;==&quot;&quot; (  echo &quot;%~1&quot;  call :show_usage  exit 0)if &quot;%~1&quot;==&quot;-h&quot; (  call :show_usage  exit 0)rem Parse command line arguments:parse_argsif &quot;%~1&quot;==&quot;-d&quot; (  if not &quot;%~2&quot;==&quot;&quot; (    set &quot;TARGET_DIR=%~2&quot;    shift /1    shift /1    goto parse_args  ))if &quot;%~1&quot;==&quot;-p&quot; (  if not &quot;%~2&quot;==&quot;&quot; (    set &quot;prefix=%~2&quot;    shift /1    shift /1    goto parse_args  ))if &quot;%~1&quot;==&quot;-s&quot; (  if not &quot;%~2&quot;==&quot;&quot; (    set &quot;start_num=%~2&quot;    shift /1    shift /1    goto parse_args  ))if &quot;%~1&quot;==&quot;-z&quot; (  if not &quot;%~2&quot;==&quot;&quot; (    set &quot;zero_pad=%~2&quot;    shift /1    shift /1    goto parse_args  )):args_donerem Check if directory existsif not exist &quot;%TARGET_DIR%&quot; (  echo Error: Directory &quot;%TARGET_DIR%&quot; does not exist  exit 1)rem Enter target directorypushd &quot;%TARGET_DIR%&quot; || (  echo Error: Cannot enter directory &quot;%TARGET_DIR%&quot;  exit 1)echo Starting to rename files in &quot;%TARGET_DIR&quot;...rem Use temporary file to store filename listset &quot;TEMP_FILE=%TEMP%\\rename_files_list.txt&quot;rem Get all files (excluding directories and current script), sorted alphabeticallydir /b /a-d | findstr /v /i &quot;%~nx0&quot; &gt; &quot;%TEMP_FILE%&quot;rem Check if there are files to renameif not exist &quot;%TEMP_FILE%&quot; (  echo Error: Cannot create temporary file  goto cleanup)for %%I in (&quot;%TEMP_FILE%&quot;) do (  if %%~zI equ 0 (    echo Error: No files to rename in directory &quot;%TARGET_DIR%&quot;    goto cleanup  ))rem Use starting number as counterset &quot;count=%start_num%&quot;rem Iterate and rename filesfor /f &quot;usebackq delims=&quot; %%F in (&quot;%TEMP_FILE%&quot;) do (  rem Get file extension  set &quot;file=%%F&quot;  set &quot;extension=&quot;  for %%E in (&quot;%%F&quot;) do set &quot;extension=%%~xE&quot;    rem Format number (based on zero padding option)  if &quot;!zero_pad!&quot;==&quot;true&quot; (    rem Only pad numbers less than 10 with zero    if !count! lss 10 (      set &quot;formatted_count=0!count!&quot;    ) else (      set &quot;formatted_count=!count!&quot;    )  ) else (    set &quot;formatted_count=!count!&quot;  )    rem Build new filename  set &quot;new_name=!prefix!!formatted_count!&quot;    rem If file has extension, preserve it  if not &quot;!extension!&quot;==&quot;&quot; (    set &quot;new_name=!new_name!!extension!&quot;  )    rem Check if new filename already exists  if exist &quot;!new_name!&quot; if not &quot;!new_name!&quot;==&quot;!file!&quot; (    echo Warning: File &quot;!new_name!&quot; already exists, skipping renaming of &quot;!file!&quot;    set /a &quot;count+=1&quot;    goto next_file  )    rem Execute rename  ren &quot;!file!&quot; &quot;!new_name!&quot;  echo Renamed: &quot;!file!&quot; -^&gt; &quot;!new_name!&quot;    :next_file  rem Increment counter  set /a &quot;count+=1&quot;):cleanuprem Clean up temporary fileif exist &quot;%TEMP_FILE%&quot; del &quot;%TEMP_FILE%&quot; 2&gt;nulrem Return to original directorypopdecho Rename completedexit 0rem Show help information function:show_usageecho Usage: %~nx0 [options]echo Options:echo   -d directory_path    Specify directory to process (default: current directory)echo   -p prefix            Specify file prefix (default: pic_)echo   -s starting_number   Specify starting number (default: 1)echo   -z [true/false]      Whether to pad zero (default: true)echo   -h                   Show this help messageexit 0```","categories":["scripts"]},{"title":"The Little Thing Is 3 Years Old","url":"/en/2025/10/13/little-thing-turned-3.html","content":"","categories":["my-cat"]},{"title":"ESLint Automatic Formatting Configuration","url":"/en/2025/09/05/eslint-automatic-formatting-configuration.html","categories":["guides"]},{"title":"Shrimp Omelet","url":"/en/2025/04/04/shrimp-omelet.html","content":"Ingredients   Ingredient   Quantity   Shrimp   100g   Eggs   4 pieces   Green onion   To taste   Salt   To taste   Oil   To taste   Cooking Steps   Image   Step   1.    Prepare ingredients   2.    Add chopped green onion to eggs, marinate shrimp with water and a pinch of salt   3.    Beat eggs and add shrimp (add the salted water too)   4.    Add oil, pour in eggs, fry until set, then flip   5.    Remove from pan   6.    Plate and serve","categories":["cookbooks"]},{"title":"Stir-fried Meat with Lettuce","url":"/en/2025/04/04/stir-fried-meat-with-lettuce.html","content":"Ingredients   Ingredient   Quantity   Lettuce   2 pieces   Pork   400g   Garlic Sprout Leaves   2 pieces   Green Onion   To taste   Garlic   To taste   Dried Chili   To taste   Sichuan Peppercorn   To taste   Star Anise   To taste   Salt   To taste   Light Soy Sauce   To taste   Dark Soy Sauce   To taste   Oyster Sauce   To taste   Cooking Steps   Image   Step   1.    Prepare ingredients   2.    Prepare seasonings: green onion, garlic, chili, Sichuan peppercorn, star anise   3.    Cut lettuce in half, then slice   4.    Slice garlic sprout leaves   5.    Slice pork   6.    Add oil and stir-fry pork, seasonings, dark soy sauce   7.    Set aside cooked meat   8.    Add oil and stir-fry lettuce, then add meat and stir-fry   9.    Add oyster sauce, light soy sauce, salt and stir-fry   10.    Add garlic sprout leaves and stir-fry   11.    Remove from heat   12.    Plate and serve","categories":["cookbooks"]},{"title":"Stir-fried Romaine Lettuce","url":"/en/2025/04/04/stir-fried-romaine.html","content":"Ingredients   Ingredient   Quantity   Romaine Lettuce   500g   Green Bell Pepper   2 pieces   Oil   To taste   Garlic   To taste   Salt   To taste   Light Soy Sauce   To taste   Oyster Sauce   To taste   Cooking Steps   Image   Step   1.    Prepare ingredients   2.    Cut green bell pepper into sections and mince garlic, put together   3.    Add oil and stir-fry green bell pepper and garlic   4.    Add romaine lettuce and stir-fry, then add oyster sauce, light soy sauce, salt and stir-fry again   5.    Remove from heat   6.    Plate and serve","categories":["cookbooks"]},{"title":"Stir-fried Beef with Celery and Garlic Sprouts","url":"/en/2025/04/04/stir-fried-beef-with-celery.html","content":"Ingredients   Ingredient   Quantity   Celery   250g   Garlic Sprouts   4 pieces   Braised Beef   400g   Oil   To taste   Green Onion   To taste   Garlic   To taste   Chili   To taste   Sichuan Peppercorn   To taste   Salt   To taste   Light Soy Sauce   To taste   Dark Soy Sauce   To taste   Cooking Steps   Image   Step   1.    Prepare ingredients   2.    Prepare seasonings: chili, Sichuan peppercorn, green onion, garlic   3.    Cut green bell pepper into sections   4.    Cut garlic sprout leaves into sections   5.    Cut garlic sprout roots in half lengthwise, then into sections   6.    Cut celery into sections   7.    Slice beef   8.    Put garlic sprout roots and celery together, set aside   9.    Put garlic sprout leaves and beef together, set aside   10.    Add oil and stir-fry garlic sprout roots and celery   11.    Add seasonings and stir-fry   12.    Add garlic sprout leaves and beef, stir-fry until thoroughly cooked   13.    Add light soy sauce, dark soy sauce, salt and stir-fry   14.    Remove from heat   15.    Plate and serve","categories":["cookbooks"]},{"title":"Stir-fried Meat with Mushrooms and Garlic Sprouts","url":"/en/2025/03/17/stir-fried-meat-with-mushrooms-and-garlic-sprouts.html","content":"Ingredients   Ingredient   Quantity   Mushrooms   500g   Garlic Sprouts   4 pieces   Pork   500g   Oil   To taste   Green Onion   To taste   Garlic   To taste   Chili   To taste   Sichuan Peppercorn   To taste   Salt   To taste   Light Soy Sauce   To taste   Dark Soy Sauce   To taste   Cooking Steps   Image   Step   1.    Prepare ingredients   2.    Prepare seasonings: Sichuan peppercorn, chili, green onion, garlic   3.    Slice mushrooms   4.    Cut garlic sprouts into sections   5.    Cut pork into strips   6.    Blanch mushrooms and set aside   7.    Add oil and stir-fry pork until fragrant, add dark soy sauce for color   8.    Push meat to one side, add seasonings and stir-fry until fragrant   9.    Add mushrooms and stir-fry   10.    Add garlic sprouts, salt, light soy sauce and stir-fry evenly   11.    Remove from heat   12.    Plate and serve","categories":["cookbooks"]},{"title":"NPM Error Resolution","url":"/en/2024/11/01/npm-error-resolve.html","content":"postinstall error:   Environment   Version   windows   10   node   20.14.0   pnpm   9.4.0   When executing    pnpm install    or    npm install    for the first time, PNPM reports an error: npm postinstall failed command not found node ./scripts/postinstall.js   Solution 1:   Run commands:   rimraf .\\node_modules\\   npm cache clean --force   pnpm store prune   Solution 2:   Find the package.json file of the plugin that&#39;s causing the error   Record the scripts.postinstall command in package.json somewhere, and modify the command to    pnpm --version   Then execute    pnpm install    once. After completion, you&#39;ll find that the postinstall of the error plugin executed successfully   Go into the package.json file level of each error plugin one by one   Execute the original postinstall command of each plugin one by one   pnpm dev    starts successfully...   node-pre-gyp error:   Plugin   Version   linux   13.6.0   node   18.20.4   npm   10.7.0   When executing    npm install    for the first time, sometimes npm error node-pre-gyp appears.   Cause:   https://github.com/mozilla/pdf.js#user-content-getting-the-code   On MacOS M1/M2 you may see some node-gyp-related errors when running npm install. This is because one of our dependencies, &quot;canvas&quot;, does not provide pre-built binaries for this platform and instead npm will try to build it from source. Please make sure to first install the necessary native dependencies using brew:    https://github.com/Automattic/node-canvas#compiling   .   Solution:   Refer to the solution provided by    https://github.com/Automattic/node-canvas#compiling    to add image plugin support to the environment.   Remove all plugins related to canvas (project name: node-canvas) from the project.","categories":["notes"]},{"title":"Git Configuration","url":"/en/2024/01/25/git-configuration.html","content":"Git Configuration Commands   # Get global + local Git configurationgit config --list# Get global Git configurationgit config --global --list   Git Configuration   git config --global core.ignorecase false# true: Git ignores case differences in filenames (e.g., README.md and readme.md are considered the same file on case-insensitive file systems).# false: Git treats file names as case-sensitive.git config --global core.autocrlf false# true：auto convert CRLF to LF or convert to CRLF when git checkout.# false：no convert.git config --global core.safecrlf true# warn(default): Warning when submitting a file that contains mixed newlines.# true: Refuse to submit files containing mixed newlines (Fatal:xxx is displayed).# false: Allows you to submit files that contain mixed newlines.   Git Proxy   # Check Git proxy settingsgit config --global --get http.proxygit config --global --get https.proxy# Set Git proxygit config --global http.proxy http://127.0.0.1:7890git config --global https.proxy http://127.0.0.1:7890# Remove Git proxygit config --global --unset http.proxygit config --global --unset https.proxy   .gitattributes    File Configuration   # Set the default behavior, in case people don&#39;t have core.autocrlf set.* text=auto# Explicitly declare text files you want to always be normalized and converted# to native line endings on checkout.*.c text*.h text# Declare files that will always have CRLF line endings on checkout.*.sln text eol=crlf# Denote all files that are truly binary and should not be modified.*.png binary*.jpg binary   Gvim   Open _vimrc file, add flowing code:   # Setting show ^M and $ symbol:set encoding=utf-8:scriptencoding utf-8:set binary:set list:set listchars=tab:&gt;-,eol:$,space:·","categories":["notes"]},{"title":"Common System Commands","url":"/en/2023/11/23/common-system-commands.html","content":"Deleting Files and Directories            ```bash    # Force recursive deletion of node_modules directory    rm -rf ./node_modules# Delete a filerm filename.txt# Recursively delete directory. -r recursively deletes directories and their contentsrm -r folder_name# Force delete file. -f forces deletion without confirmationrm -f filename.txt# Safe deletion (interactive confirmation). -i prompts for confirmation before deleting each filerm -i filename.txtrm -ri folder_name```              ```powershell    # Force recursive deletion of node_modules directory    rm -r -Force .\\node_modules# Delete a fileRemove-Item filename.txt# Aliasesrm or rd# Delete a folderrm -r folder_name# Force recursive deletion of files and directories. -Recurse or -r for recursive deletion, -Force for forced deletion without confirmationrm -Recurse -Force -Path folder_name# Safe deletion (with confirmation). -Confirm prompts for confirmation before deleting filesrm important_file.txt -Confirm# Delete all files with .txt extension that do not contain &quot;important&quot; in their name from the current folder.rm * -Include *.txt -Exclude *important*```              ```cmd    REM Force recursive deletion of node_modules directory    rd /s /q .\\node_modulesREM Delete a filedel filename.txtREM Delete a directoryrd folder_nameREM Recursively delete folder. /s recursively deletes directory and its contentsrd /s .\\folder_nameREM Recursively delete directory tree without confirmation. /q quiet moderd /s /q .\\folder_name```     Viewing Files and Folders            ```bash    # Basic command    ls# View detailed list. Parameter combination (-l list view, -a show hidden files)ls -la# View detailed list with human-readable file sizes (works with -l)ls -lh# Sort by time. -t sorts by time, -r reverses order (newest last)ls -ltr# Sort by file size. -S sorts by file size, -r reverses order (largest last)ls -lSr# Recursively display all subdirectoriesls -R```              ```powershell    # Basic command    Get-ChildItem# Aliasesls or dir# Format outputls | Format-Table Name, Length, LastWriteTime# Show hidden filesls -Force# Recursively display all subdirectories -Recurse or -rls -r# Filter by extensionls *.txt or ls -Filter *.txt```              ```cmd    REM Basic command    dirREM Display all files, including hidden and system files.dir /aREM Sort by time. /o sorts by time, d by date/time, /r reverses order (newest last)dir /od /rREM Sort by size. /o sorts by size, s by file size, /r reverses order (largest last)dir /os /rREM Recursively display all subdirectories, including hidden directories.dir /s```     Viewing Local IP Addresses            ```bash    # Display detailed information for all interfaces    ip addr show# Show only IPv4 addresseshostname -I```              ```powershell    # This command lists all IPv4 addresses, excluding the local loopback address (127.0.0.1), along with the corresponding network connection names.    Get-NetIPAddress | Where-Object {$_.AddressFamily -eq 'IPv4' -and $_.IPAddress -ne '127.0.0.1'} | Format-Table InterfaceAlias, IPAddress    # CMD compatible, quick viewipconfig```              ```cmd    REM Classic command, shows basic information    ipconfigREM Display all detailed informationipconfig /allREM Show only IPv4 addressesipconfig | findstr /i &quot;IPv4&quot;```     Finding Port Occupancy and Killing Processes            ```bash    # Find processes using port 8080    lsof -i :8080    # End processkill -9 &lt;process_id&gt;# fuser command to end processes. -k ends processes, -i asks for user confirmation before terminating processes, -u displays process owner.fuser -ki -u 8080/tcp```              ```powershell    # Find processes using port 8080    Get-Process -Id (Get-NetTCPConnection -LocalPort 8080).OwningProcess# End processStop-Process -Id (Get-NetTCPConnection -LocalPort 8080).OwningProcess```              ```cmd    REM Find processes using port 8080    netstat -ano | findstr 8080REM End processtaskkill /F /PID &lt;process_id&gt;```","categories":["notes"]},{"title":"The Future of Operations is Platform Engineering","url":"/en/2023/07/19/platform-engineering.html","content":"","categories":["reprints"]},{"title":"Software Eats Software, Will Programming Jobs Increase?","url":"/en/2023/07/07/will-programmers-increase.html","content":"","categories":["reprints"]},{"title":"Big Plate Chicken","url":"/en/2022/08/16/big-plate-chicken.html","content":"Ingredients   Ingredient   Quantity   Chicken   One whole   Potatoes   Two pieces   Green Bell Peppers   Two pieces   Oil   To taste   White Sugar   To taste   Green Onion   To taste   Ginger   To taste   Garlic   To taste   Chili   To taste   Sichuan Peppercorn   To taste   Star Anise   To taste   Bay Leaves   To taste   Cinnamon   To taste   Salt   To taste   Light Soy Sauce   To taste   Dark Soy Sauce   To taste   Chili Oil   To taste   Cooking Wine   To taste   Cooking Steps   Image   Step   1.    Prepare ingredients   2.    Prepare seasonings: garlic, ginger, garlic, chili, Sichuan peppercorn, star anise, bay leaves, cinnamon   3.    Blanch chicken pieces, add ginger slices and cooking wine   4.    Cut potatoes into rolling chunks   5.    Remove chicken pieces after skimming off foam   6.    Add oil over high heat, add white sugar or rock sugar and caramelize   7.    Add chicken pieces and stir-fry until fragrant   8.    Add seasonings and stir-fry   9.    Add salt, light soy sauce, dark soy sauce, chili oil, cooking wine and stir-fry evenly   10.    Add potatoes and stir-fry, then add water to cover potatoes and cover with lid   11.    Add green bell peppers halfway through cooking, reduce sauce over high heat   12.    Plate and serve","categories":["cookbooks"]},{"title":"Language Tags","url":"/en/2022/04/10/language-tags.html","content":"Language Tag   ISO 639-1   Language   Region   Description   ar-SA   ar   Arabic   Saudi Arabia   Arabic (Saudi Arabia)   bn-BD   bn   Bangla   Bangladesh   Bangla (Bangladesh)   bn-IN   bn   Bangla   India   Bangla (India)   cs-CZ   cs   Czech   Czech Republic   Czech (Czech Republic)   da-DK   da   Danish   Denmark   Danish (Denmark)   de-AT   de   German   Austria   Austrian German   de-CH   de   German   Switzerland   &quot;Swiss&quot; German   de-DE   de   German   Germany   Standard German (as spoken in Germany)   el-GR   el   Greek   Greece   Modern Greek   en-AU   en   English   Australia   Australian English   en-CA   en   English   Canada   Canadian English   en-GB   en   English   United Kingdom   British English   en-IE   en   English   Ireland   Irish English   en-IN   en   English   India   Indian English   en-NZ   en   English   New Zealand   New Zealand English   en-US   en   English   United States   US English   en-ZA   en   English   South Africa   English (South Africa)   es-AR   es   Spanish   Argentina   Argentine Spanish   es-CL   es   Spanish   Chile   Chilean Spanish   es-CO   es   Spanish   Columbia   Colombian Spanish   es-ES   es   Spanish   Spain   Castilian Spanish (as spoken in Central-Northern Spain)   es-MX   es   Spanish   Mexico   Mexican Spanish   es-US   es   Spanish   United States   American Spanish   fi-FI   fi   Finnish   Finland   Finnish (Finland)   fr-BE   fr   French   Belgium   Belgian French   fr-CA   fr   French   Canada   Canadian French   fr-CH   fr   French   Switzerland   &quot;Swiss&quot; French   fr-FR   fr   French   France   Standard French (especially in France)   he-IL   he   Hebrew   Israel   Hebrew (Israel)   hi-IN   hi   Hindi   India   Hindi (India)   hu-HU   hu   Hungarian   Hungary   Hungarian (Hungary)   id-ID   id   Indonesian   Indonesia   Indonesian (Indonesia)   it-CH   it   Italian   Switzerland   &quot;Swiss&quot; Italian   it-IT   it   Italian   Italy   Standard Italian (as spoken in Italy)   ja-JP   ja   Japanese   Japan   Japanese (Japan)   ko-KR   ko   Korean   Republic of Korea   Korean (Republic of Korea)   nl-BE   nl   Dutch   Belgium   Belgian Dutch   nl-NL   nl   Dutch   The Netherlands   Standard Dutch (as spoken in The Netherlands)   no-NO   no   Norwegian   Norway   Norwegian (Norway)   pl-PL   pl   Polish   Poland   Polish (Poland)   pt-BR   pt   Portuguese   Brazil   Brazilian Portuguese   pt-PT   pt   Portuguese   Portugal   European Portuguese (as written and spoken in Portugal)   ro-RO   ro   Romanian   Romania   Romanian (Romania)   ru-RU   ru   Russian   Russian Federation   Russian (Russian Federation)   sk-SK   sk   Slovak   Slovakia   Slovak (Slovakia)   sv-SE   sv   Swedish   Sweden   Swedish (Sweden)   ta-IN   ta   Tamil   India   Indian Tamil   ta-LK   ta   Tamil   Sri Lanka   Sri Lankan Tamil   th-TH   th   Thai   Thailand   Thai (Thailand)   tr-TR   tr   Turkish   Turkey   Turkish (Turkey)   zh-CN   zh   Chinese   China   Mainland China, simplified characters   zh-HK   zh   Chinese   Hong Kong   Hong Kong, traditional characters   zh-TW   zh   Chinese   Taiwan   Taiwan, traditional characters","categories":["notes"]},{"title":"NPM Update Package Command","url":"/en/2021/10/22/npm-check-update.html","content":"First, check which packages have updates   $ npm outdated   To view the latest version information of a specific package   $ npm view xxx versions  or$ npm info xxx   Install a package with a specific version using npm   $ npm i xxx@1.11.1 --save-dev   Update a package to a specific version using npm   $ npm update xxx --save-dev   Install the latest version of a package   $ npm i xxx@latest --save-dev   View the list of installed packages using npm   $ npm list   View version information of a specific installed package using npm   $ npm list xxx   Use npm-check to view package updates   $ npm install -g npm-check  # First install npm-check globally$ npm-check -u              # Check for updates in the current project$ npm-check -u -g           # Check for updates in globally installed packages   This will list all updates. Use arrow keys to navigate, spacebar to select or deselect, and press Enter when done.","categories":["notes"]},{"title":"Stewed Lamb Chop with Mushrooms","url":"/en/2021/10/19/stewed-lamb-chop-with-mushroom.html","content":"Ingredients   Ingredient   Quantity   Lamb Chops   6 pieces   Mushrooms   300g   Oil   Large amount   Salt   To taste   Chili   To taste   Sichuan Peppercorn   To taste   Star Anise   To taste   Cumin   To taste   Lamb chops must be blanched to remove blood foam, otherwise the smell will be strong.   Cooking Steps   Image   Step   1.    Prepare ingredients   2.    Seasoning plate: chili, Sichuan peppercorn, star anise, cumin   3.    Soak lamb chops in water to release blood   4.    Blanch in warm water and remove   5.    Add to seasonings and stir-fry lamb chops over medium heat   6.    Add water, mushrooms, and salt   7.    Stew over medium heat for 30 minutes   8.    Plate and serve","categories":["cookbooks"]},{"title":"Stir-fried Meat with Green Bell Pepper","url":"/en/2021/09/05/green-pepper-parch-meat.html","content":"Ingredients   Ingredient   Quantity   Green Bell Pepper   300g   Pork   120g   Oil   To taste   Garlic   To taste   Salt   To taste   Light Soy Sauce   To taste   Dark Soy Sauce   Small amount   Cooking Wine   To taste   Key to tender meat and delicious green bell pepper: no high heat, use medium heat throughout.   Cooking Steps   Image   Step   1.    Prepare ingredients   2.    Prepare seasonings: garlic, chili   3.    Cut green bell pepper into strips   4.    Cut meat into strips, squeeze out water, add starch, light soy sauce, cooking wine   5.    Mix until sticky and marinate   6.    Add oil over medium heat, add seasonings to fragrance   7.    Add meat strips and cook through   8.    Add green bell pepper and stir-fry evenly   9.    Add salt and dark soy sauce, stir-fry   10.    Finish cooking   11.    Plate and serve","categories":["cookbooks"]},{"title":"Scrambled Eggs with Tomato and Sausage","url":"/en/2021/06/14/scrambled-egg-with-tomato-sausage.html","content":"Ingredients   Ingredient   Quantity   Tomato   250g   Eggs   2 pieces   Sausage   60g   Oil   To taste   Dried chili   To taste   Salt   To taste   Rock sugar   To taste   Cooking Steps   Image   Step   1.    Prepare ingredients   2.    Cut off tomato base for easier peeling after boiling   3.    Boil until tomato skin cracks   4.    Peel tomato   5.    Cut tomato into small pieces   6.    Beat eggs, add chopped green onion   7.    Slice sausage and chili, set aside   8.    Heat oil, pour in egg mixture   9.    Add sausage and chili, stir-fry evenly   10.    Add tomato pieces, stir-fry evenly, add salt (crush tomato pieces with spatula)   11.    Remove from heat   12.    Plate and serve   食材用料   食材   数量   番茄   250克   鸡蛋   两个   香肠   60克   油   适量   干辣椒   适量   盐   适量   冰糖   适量   做法步骤   图片   步骤   1.    准备食材   2.    番茄底部切掉，为了煮开的时候更好裂皮   3.    开水煮到番茄表面裂皮   4.    番茄剥皮   5.    番茄切成小块   6.    打入鸡蛋、葱花搅拌   7.    香肠切片和辣椒装在一起   8.    热锅热油，油冒烟放入鸡蛋液   9.    放入香肠辣椒翻炒均匀   10.    放入番茄块翻炒均匀，放入盐（番茄块用锅铲摁烂）   11.    收锅   12.    装盘","categories":["cookbooks"]},{"title":"JavaScript Comment Standards","url":"/en/2021/04/28/javascript-document-convertions.html","content":"Type Syntax   Type Name   Syntax Example   Description   Symbol name   {string}, {myNamespace.MyClass}   Specifies the name of a symbol.   Multiple types   {number|boolean}   This means the value may be one of several types, with the complete list of types separated by &quot;   Arrays   {string[]}, {MyClass[]}   The expression    string[]    represents an array of strings,    the expression    {MyClass[]}    identifies an array with MyClass instances   Objects   {a: number, b: string, c}     // or     {object} myObj     {number} myObj.a     {string} myObj.b     {any} myObj.c   Object &quot;MyObj&quot; has properties &#39;a&#39; (a number) &#39;b&#39; (a string) and &#39;c&#39; (any type),    For objects with a set of known properties,    you can use Closure Compiler syntax to document annotated types.    You can also describe each property separately,    which allows you to provide more detailed information about each property.   Nullable type   {?number}   Indicates the type is the specified type, or null.   Non-nullable type   {!number}   Indicates the type is the specified type, but will never be null.   Variable number of that type   @param {...number} num   Indicates that the function accepts a variable number of parameters, and specifies a type of parameter.   Optional parameter   @param {number} [foo=1]   Indicates the parameter is optional, you can also specify the default value of the parameter.   Callbacks   @callback myCallback     @param {number} x - ...   Use the @callback tag to specify a callback.    Same as the @typedef tag,    the difference is that the callback type is always &quot;function&quot;.   Type definitions   @typedef {object} PropertiesHash     @property {string} id     @property {string} name     @property {number} age   You can use the @typedef tag to document complex types.   Common Comment Keywords   Comment Name   Alias   Description   @param   @argument, @arg   Documents parameters passed to a function.   @return   @returns   Documents the return value of a function.   @method   @function, @func   Describes a function or method.   @typedef   Documents a custom type.   @property   @prop   Documents a property of an object.   @callback   Describes a callback function.   @author   Specifies the author of the project.   @copyright   Describes copyright information for a file.   @description   Describes an identifier.   @param   Documents parameters passed to a function.   Aliases: @arg, @argument   /** * @param {string} somebody - Somebody&#39;s name. */function sayHello(somebody) {  alert(&#39;Hello &#39; + somebody);}   If the parameter is an object with specific properties:   /** * Assign the project to an employee. * @param {object} employee            - The employee who is responsible for the project. * @param {string} employee.name       - The name of the employee. * @param {string} employee.department - The employee&#39;s department. */Project.prototype.assign = function(employee) { ... };   If the parameter&#39;s property values are in an array:   /** * Assign the project to a list of employees. * @param {object[]} employees            - The employees who are responsible for the project. * @param {string} employees[].name       - The name of an employee. * @param {string} employees[].department - The employee&#39;s department. */Project.prototype.assign = function(employees) { ... };   An optional parameter with default value:   /** * @param {string} [somebody=John Doe] - Somebody&#39;s name. */function sayHello(somebody) {  if (!somebody) {    somebody = &#39;John Doe&#39;;  }  alert(&#39;Hello &#39; + somebody);}   Allowing one type or another:   /** * @param {string|string[]} [somebody=John Doe] - Somebody&#39;s name, or an array of names. */function sayHello(somebody) {  if (!somebody) {    somebody = &#39;John Doe&#39;;  } else if (Array.isArray(somebody)) {    somebody = somebody.join(&#39;, &#39;);  }  alert(&#39;Hello &#39; + somebody);}   Parameter accepts a callback function:   /** * @param {requestCallback} cb *//** * @callback requestCallback * @param {number} responseCode * @param {string} responseMessage */function doSomethingAsynchronously(cb) { ... }   @return   Documents the return value of a function.   Alias: @returns   /** * Returns the sum of a and b * @param {number} a * @param {number} b * @param {boolean} retArr If set to true, the function will return an array * @return {number|array} Sum of a and b or an array that contains a, b and the sum of a and b. */function sum(a, b, retArr) {  if (retArr) {    return [a, b, a + b];  }  return a + b;}   @method   Describes a function or method.   Aliases: @function, @func   /** * Returns the sum of a and b * @method sum * @param {number} a * @param {number} b * @return {number} Sum of a and b or an array that contains a, b and the sum of a and b. */function sum(a, b) {  return a + b;}   @typedef   Documents a custom type.   /** * The complete Triforce, or one or more components of the Triforce. * @typedef {Object} WishGranter~Triforce * @property {boolean} hasCourage - Indicates whether the Courage component is present. * @property {boolean} hasPower   - Indicates whether the Power component is present. * @property {boolean} hasWisdom  - Indicates whether the Wisdom component is present. */ /** * A class for granting wishes, powered by the Triforce. * @class * @param {...WishGranter~Triforce} triforce - One to three {@link WishGranter~Triforce} objects * containing all three components of the Triforce. */function WishGranter() {}   @property   Documents a property of an object.   /** * @namespace * @property {object}  defaults               - The default values for parties. * @property {number}  defaults.players       - The default number of players. * @property {string}  defaults.level         - The default level for the party. * @property {object}  defaults.treasure      - The default treasure. * @property {number}  defaults.treasure.gold - How much gold the party starts with. */var config = {  defaults: {    players: 1,    level: &#39;beginner&#39;,    treasure: {      gold: 0    }  }};   @callback   Describes a callback function.   /** * @class */function Requester() {}/** * Send a request. * @param {Requester~requestCallback} cb - The callback that handles the response. */Requester.prototype.send = function(cb) {  // code};/** * This callback is displayed as part of the Requester class. * @callback Requester~requestCallback * @param {number} responseCode * @param {string} responseMessage */   @author   Specifies the author of the project.   /** * @author Zane Liu &lt;liuzane@example.com&gt; */function MyClass() {}   @copyright   Describes some copyright information.   /** * @file This is my cool script. * @copyright Zane Liu 2021 */   @description   Describes an identifier.   /** * @param {number} a * @param {number} b * @returns {number} * @description Add two numbers. */function add(a, b) {  return a + b;}","categories":["notes"]},{"title":"Spicy Fried Shrimp","url":"/en/2020/12/27/fried-shrimp-with-chilli.html","content":"Ingredients   Ingredient   Quantity   Shrimp   10 pieces   Oil   To taste   Green Onion   To taste   Garlic   To taste   Ginger   To taste   Chili   To taste   Bay Leaves   To taste   Salt   To taste   Water   Half bowl   Light Soy Sauce   To taste   Cooking Steps   Image   Step   1.    Prepare ingredients   2.    Cut green onion into sections, shred ginger, mince garlic and plate   3.    Prepare sauce: water, light soy sauce, salt, bay leaves   4.    Wash shrimp and remove vein   5.    Heat oil in pan, add shrimp, pan-fry until both sides turn beautiful red and shrimp oil comes out, then remove shrimp (lightly press shrimp with spatula to extract more red oil)   6.    Add green onion and ginger to shrimp oil pan to fragrance   7.    Add pan-fried shrimp and pour in sauce   8.    Reduce sauce over high heat   9.    Plate and serve","categories":["cookbooks"]},{"title":"localStorage","url":"/en/2020/12/10/local-storage.html","content":"setStorage(key, data, hours)   Set localStorage   /*** @method setStorage* @param {string} key* @param {any} data* @param {number} hours* @return {boolean}*/function setStorage(key, data, hours) {  let expires;  if (!key || !data) {    console.error(&#39;[localStorage Error]: Key and Data is a must parameter&#39;);    return false;  }  expires = hours ? new Date().getTime() + 1000 * 60 * 60 * hours : new Date(0).getTime();  localStorage.setItem(key, JSON.stringify({ data, expires }));  return true;}   getStorage(key)   Get localStorage   /*** @method getStorage* @param {string} key* @return {boolean|null}*/function getStorage(key) {  let data, nowTime = new Date().getTime();  if (!key) console.error(&#39;[localStorage Error]: Key is a must parameter&#39;);  try {    data = JSON.parse(localStorage.getItem(key));  } catch (error) {    return localStorage.getItem(key);  }  if (!data) return null;  if (!Boolean(data.expires) || data.expires &gt;= nowTime) {    return data.data;  } else {    localStorage.removeItem(key);    return null;  }}   clearStorage(key)   Clear localStorage   /*** @method clearStorage* @param {string} key*/function clearStorage(key) {  if (key) {    localStorage.removeItem(key);  } else {    localStorage.clear();  }}","categories":["notes"]},{"title":"Cookies","url":"/en/2020/12/10/cookies.html","content":"setCookie(params)   Set Cookie   /*** @method setCookie* @param {object} options* @param {string} options.key* @param {string} options.value* @param {number} [options.hours]* @param {string} [options.path]   - path: &#39;/&#39;* @param {string} [options.domain] - domain: document.domain*/function setCookie(options) {  let time = new Date(), expires = &#39;&#39;, path = &#39;&#39;, domain = &#39;&#39;;  if (!options.key || !options.value) {    console.error(&#39;[Cookie Error]: key, value must be set.&#39;);    return;  }  if (options.hours) {    try {      Number(options.hours);    } catch (e) {      console.error(&#39;[Cookie Error]: expires must is number.&#39;);    }    time.toGMTString(time.setTime(time.getTime() + 1000 * 60 * 60 * options.hours));    expires = &#39;expires=&#39; + time + &#39;;&#39;;  }  if (options.path) path = &#39;path=&#39; + options.path + &#39;;&#39;;  if (options.domain) domain = &#39;domain=&#39; + options.domain;  document.cookie = options.key + &#39;=&#39; + options.value + &#39;;&#39; + expires + path + domain;}   getCookie(key)   Get Cookie   /*** @method getCookie* @param {string} key * @return {undefined|string|null}*/function getCookie(key) {  if (!key) {    console.error(&#39;[Cookie Error]: key is &#39; + (typeof key) + &#39;.&#39;);    return;  }  const regexp = new RegExp(&#39;(^|; )&#39; + key + &#39;=.*?(;|$)&#39;);  const result = document.cookie.match(regexp);  const value = result ? result[0].replace(/[; ]/g, &#39;&#39;).split(&#39;=&#39;)[1] : null;  return value;}   deleteCookie(param)   /*** @method deleteCookie* @param {string|object} param* @param {string} param.key* @param {string} [param.path]* @param {string} [param.domain]* @return {undefined|string|null}*/function deleteCookie(param) {  const options = typeof param === &#39;object&#39; ? param : {};  const key = typeof param === &#39;string&#39; ? param : options.key;  if (!key) {    console.error(&#39;[Cookie Error]: key is &#39; + (typeof key) + &#39;.&#39;);    return;  }  if (options.path) path = &#39;path=&#39; + options.path + &#39;;&#39;;  if (options.domain) domain = &#39;domain=&#39; + options.domain + &#39;;&#39;;  const regexp = new RegExp(&#39;(^|; )&#39; + key + &#39;=.*?(;|$)&#39;);  const result = document.cookie.match(regexp);  const item = result ? result[0].replace(/[; ]/g, &#39;&#39;) : &#39;&#39;;  const time = new Date();  time.toGMTString(time.setTime(0));  document.cookie = item + &#39;;expires=&#39; + time + &#39;;&#39; + options.path + options.domain;}   clearCookie(params)   Clear Cookie   /*** @method clearCookie* @param {object} [options]* @param {string} [options.path]* @param {string} [options.domain]*/function clearCookie(options) {  let arr = document.cookie.split(&#39;;&#39;), path = &#39;&#39;, domain = &#39;&#39;;  if (!options) options = {};  if (options.path) path = &#39;path=&#39; + options.path + &#39;;&#39;;  if (options.domain) domain = &#39;domain=&#39; + options.domain + &#39;;&#39;;  for (let i = 0; i &lt; arr.length; i++) {    let key = arr[i].substring(0, arr[i].indexOf(&#39;=&#39;));    document.cookie = key + &#39;=0;expires=Thu, 01 Jan 1970 00:00:00 GMT;&#39; + path + domain;  }}","categories":["notes"]},{"title":"JavaScript Utility Functions","url":"/en/2020/12/10/javascript-utility-functions.html","content":"Method Collection:   Method Name   Description   typeOf   Validate data type.   deepCopy   Deep copy.   uuid   Generate UUID.   download   Download.   getUrlArg   Get URL parameter by name.   getUrlQuery   Convert URL parameters to object format.   setUrlQuery   Convert object format to URL parameters.   getDeepValueOfObject   Get deep value of object.   toThousands   Convert to thousands separator format.   typeOf(anything)   Validate data type.   All return values are strings   enum TypeValue {  Boolean = &#39;boolean&#39;,  Number = &#39;number&#39;,  String = &#39;string&#39;,  Function = &#39;function&#39;,  Array = &#39;array&#39;,  Date = &#39;date&#39;,  RegExp = &#39;regexp&#39;,  Undefined = &#39;undefined&#39;,  Null = &#39;null&#39;,  Object = &#39;object&#39;}const TypeMap: Record&lt;string, TypeValue&gt; = {  &#39;[object Boolean]&#39;: TypeValue.Boolean,   &#39;[object Number]&#39;: TypeValue.Number,  &#39;[object String]&#39;: TypeValue.String,  &#39;[object Function]&#39;: TypeValue.Function,  &#39;[object Array]&#39;: TypeValue.Array,  &#39;[object Date]&#39;: TypeValue.Date,  &#39;[object RegExp]&#39;: TypeValue.RegExp,  &#39;[object Undefined]&#39;: TypeValue.Undefined,  &#39;[object Null]&#39;: TypeValue.Null,  &#39;[object Object]&#39;: TypeValue.Object};/** * Validate data type. * @method typeOf * @param {any} obj * @return {string} */export function typeOf(obj: unknown): TypeValue {  const toString = Object.prototype.toString;  return TypeMap[toString.call(obj)];}console.log(typeOf(&#39;abc&#39;)); // stringconsole.log(typeOf([&#39;a&#39;, &#39;b&#39;, &#39;c&#39;])); // arrayconsole.log(typeOf({ a: 1, b: 2, c: 3 })); // object   deepCopy(data)   Deep copy.   This method needs to be used together with the    typeOf()    method   /** * Data deep copy. * @method deepCopy * @param {array|object} data * @return {array|object} */export function deepCopy&lt;T&gt;(data: T): T {  const type: TypeValue = typeOf(data);  switch (type) {    case TypeValue.Array: {      const array: unknown[] = [];      for (let index = 0; index &lt; (data as unknown[]).length; index++) {        array.push(deepCopy(data[index]));      }      return array as T;    }    case TypeValue.Object: {      const object: Record&lt;string, unknown&gt; = {};      for (const key in data) {        if (Object.prototype.hasOwnProperty.call(data, key)) {          object[key] = deepCopy(data[key]);        }      }      return object as T;    }    default:      return data;  }}const obj1 = { a: 1, b: 2, c: 3 };const obj2 = deepCopy(obj1);console.log(obj1 === obj2); // false   formatDate(date, format)   Date formatting.   /** * Time and date formatting. * @method formatDate * @param {string|date} time * @return {string} */export function formatDate(time: string | Date, format = &#39;yyyy-MM-dd hh:mm:ss&#39;): string {  const date: Date = time ? new Date(time) : new Date();  const dateValues: Record&lt;string, number&gt; = {    &#39;M+&#39;: date.getMonth() + 1, // Month    &#39;d+&#39;: date.getDate(), // Day    &#39;h+&#39;: date.getHours(), // Hour    &#39;m+&#39;: date.getMinutes(), // Minute    &#39;s+&#39;: date.getSeconds(), // Second    &#39;q+&#39;: Math.floor((date.getMonth() + 3) / 3), // Quarter    &#39;S&#39;: date.getMilliseconds() // Millisecond  };  if (/(y{4})/.test(format)) {    format = format.replace(RegExp.$1, (date.getFullYear() + &#39;&#39;).substr(4 - RegExp.$1.length));  }  for (const key in dateValues) {    if (new RegExp(&#39;(&#39; + key + &#39;)&#39;).test(format)) {      const value = dateValues[key].toString();      format = format.replace(RegExp.$1, (RegExp.$1.length === 1) ? value : (&#39;00&#39; + value).substr(value.length));    }  }  return format;}console.log(formatDate(&#39;2024-05-01&#39;)); // &#39;2024-05-01 00:00:00&#39;console.log(formatDate(&#39;2024-05-01&#39;, &#39;yyyy-MM-dd&#39;)); // &#39;2024-05-01&#39;   uuid()   Generate UUID.   /** * @method uuid * @return {string} */function uuid() {  return &#39;xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx&#39;.replace(/[xy]/g, function (c) {    const r = Math.random() * 16 | 0;    const v = c === &#39;x&#39; ? r : (r &amp; 0x3 | 0x8);    return v.toString(16);  });}console.log(uuid()); // xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx   download(url, name)   Download.   /** * @method download * @param {string} url * @param {string} name */function download(url, name) {  const aDom = document.createElement(&#39;a&#39;);  aDom.download = name;  aDom.href = url;  document.body.appendChild(aDom);  aDom.click();  aDom.remove();}console.log(download(&#39;word.docx&#39;, &#39;https://www.test.com/word.docx&#39;)); // word.docx   getUrlArg(name)   Get URL parameter by name.   /** * @method getUrlArg * @param {string} name * @return {string} */function getUrlArg(name) {  const search = window.location.search;  const regexp = new RegExp(`(^|&amp;)${name}=([^&amp;]*)(&amp;|$)`);  const arg = search.substr(1).match(regexp);  return arg ? arg[2] : &#39;&#39;;}","categories":["notes"]},{"title":"Sauteed Cucumber with Sausage","url":"/en/2020/12/05/sauteed-cucumber-sausage.html","content":"Ingredients   Ingredient   Quantity   Cucumber   1 piece   Sausage   2 pieces   Oil   To taste   Garlic   To taste   Salt   To taste   Light Soy Sauce   To taste   Cooking Steps   Image   Step   1.    Prepare ingredients   2.    Slice cucumber   3.    Slice sausage   4.    Add oil over medium heat   5.    Add garlic to fragrance   6.    Add sausage and stir-fry   7.    Add cucumber and stir-fry   8.    Add salt and light soy sauce   9.    Finish cooking   10.    Plate and serve","categories":["cookbooks"]},{"title":"Stir-fried Meat with Celery","url":"/en/2020/11/30/celery-fried-meat.html","content":"Ingredients   Ingredient   Quantity   Celery   200g   Chicken Breast   Half piece   Oil   To taste   Garlic   To taste   White Pepper   To taste   Starch   To taste   Salt   To taste   Light Soy Sauce   To taste   Cooking Steps   Image   Step   1.    Prepare ingredients   2.    Prepare seasonings: slice garlic   3.    Cut celery into sections and blanch   4.    Slice meat, squeeze out water, add light soy sauce, white pepper, starch   5.    Mix until sticky   6.    Add oil over medium heat, add seasonings to fragrance   7.    Add meat slices and stir-fry   8.    Add celery sections, then add a little water and stir-fry over high heat   9.    Add salt and a little dark soy sauce, stir-fry   10.    Finish cooking   11.    Plate and serve","categories":["cookbooks"]},{"title":"Scrambled Eggs with Celery and Sausage","url":"/en/2020/11/29/scrambled-eggs-with-celery-sausage.html","content":"Ingredients   Ingredient   Quantity   Celery   150g   Sausage   2 pieces   Eggs   2 pieces   Oil   Small amt   Garlic   To taste   Salt   To taste   Light soy sauce   To taste   Cooking Steps   Image   Step   1.    Prepare ingredients   2.    Beat eggs   3.    Cut celery into small pieces   4.    Slice sausage   5.    Add oil over medium heat   6.    Add sausage and stir-fry   7.    Add celery and stir-fry   8.    Add beaten eggs   9.    Stir-fry until eggs are set   10.    Add salt and finish cooking   11.    Plate and serve","categories":["cookbooks"]},{"title":"Hand-torn Chicken","url":"/en/2020/11/27/hand-tore-the-chicken.html","content":"Ingredients   Ingredient   Quantity   Boneless Chicken Thighs   2 pieces   Ginger   To taste   Cooking Wine   To taste   Green Onion   To taste   Garlic   To taste   Chili Powder   To taste   Salt   To taste   Light Soy Sauce   To taste   Sesame Oil   To taste   Sichuan Pepper Oil   To taste   Cooking Steps   Image   Step   1.    Prepare ingredients   2.    Boil chicken seasoning: green onion sections, ginger slices, salt, and cooking wine   3.    Put chicken thighs and boiling seasoning in pot, add water and cook for about 20 minutes   4.    Meanwhile, prepare marinade: green onion sections, minced garlic, chili powder, salt, light soy sauce, Sichuan pepper oil, sesame oil   5.    Tear cooked chicken thighs into shreds   6.    Pour marinade over and mix well   7.    Plate and serve","categories":["cookbooks"]},{"title":"Spicy Chicken Mid Wings","url":"/en/2020/10/31/spicy-chicken-medium-wing.html","content":"Ingredients   Ingredient   Quantity   Chicken mid wings   4 pieces   Oil   Small amt   Green onion   To taste   Ginger   To taste   Garlic   To taste   Star anise   2 pieces   Dried chili   To taste   Sichuan peppercorn   To taste   Salt   To taste   Light soy sauce   To taste   Dark soy sauce   To taste   Sesame oil   To taste   Chicken wings must be blanched to remove blood foam, otherwise the dish will taste gamey.   Cooking Steps   Image   Step   1.    Prepare ingredients   2.    Slice green onion, mince garlic, slice ginger, and gather with dried chili, Sichuan peppercorn, star anise   3.    Thaw and clean chicken mid wings, cut slits (or poke with a toothpick for flavor)   4.    Heat oil in pan, fry chicken wings until golden on the surface   5.    Add green onion, garlic, chili rings, Sichuan peppercorn, star anise and stir-fry until fragrant   6.    Add half a bowl of water, light soy sauce, dark soy sauce, salt   7.    When the sauce is almost reduced, add sesame oil and finish   8.    Plate and serve","categories":["cookbooks"]},{"title":"Stir-fried Meat with Green Vegetables","url":"/en/2020/10/31/green-vegetables-meat.html","content":"Ingredients   Ingredient   Quantity   Green Vegetables   250g   Chicken Breast   Half piece   Oil   Large amount   Garlic   To taste   Chili Rings   To taste   Sichuan Peppercorn   To taste   Salt   To taste   Light Soy Sauce   To taste   Dark Soy Sauce   To taste   Key to prevent green vegetables from releasing water: use more oil, add salt at the very end after cooking.   Cooking Steps   Image   Step   1.    Prepare ingredients   2.    Prepare seasonings: slice garlic, Sichuan peppercorn, chili rings   3.    Wash green vegetables and blanch   4.    Slice meat, squeeze out water, add starch, light soy sauce, a little dark soy sauce   5.    Mix until sticky   6.    Add oil over medium heat, add garlic, chili rings, Sichuan peppercorn to fragrance   7.    Add meat slices and stir-fry until meat is cooked   8.    Add green vegetables and stir-fry over high heat   9.    Finally add salt and stir-fry briefly to season   10.    Remove from heat   11.    Plate and serve","categories":["cookbooks"]},{"title":"Potato Cubes Stewed with Meat","url":"/en/2020/10/21/potato-cubes-stew-with-meat.html","content":"Ingredients   Ingredient   Quantity   Potato   400g   Chicken Breast   Half piece   Oil   To taste   Green Onion   To taste   Ginger   To taste   Garlic   To taste   Chili Rings   To taste   Sichuan Peppercorn   To taste   Bay Leaf   1 piece   Salt   To taste   Dark Soy Sauce   Small amt   Light Soy Sauce   To taste   Cooking Steps   Image   Step   1.    Prepare ingredients   2.    Prepare seasonings: green onion, minced garlic, chili rings, Sichuan peppercorn   3.    Cut potato into cubes, soak in water to prevent browning   4.    Slice meat, squeeze out water   5.    Add oil and seasonings, stir-fry until fragrant   6.    Add meat and stir-fry over medium heat until cooked   7.    Add potato cubes, stir-fry evenly   8.    Add light soy sauce, dark soy sauce, salt, stir-fry over high heat   9.    Add bay leaf, water to cover ingredients, reduce sauce over high heat   10.    Remove from heat   11.    Plate and serve","categories":["cookbooks"]},{"title":"Potato with Meat Shreds","url":"/en/2020/10/21/potato-with-meat-shreds.html","content":"Ingredients   Ingredient   Quantity   Potatoes   2 pieces   Pork   100g   Oil   To taste   Garlic   To taste   Chili   To taste   Salt   To taste   Light Soy Sauce   To taste   Cooking Steps   Image   Step   1.    Prepare ingredients   2.    Shred potatoes   3.    Shred meat   4.    Add oil over high heat   5.    Add garlic and chili to fragrance   6.    Add meat shreds and stir-fry   7.    Add potato shreds and stir-fry   8.    Add salt and seasonings   9.    Finish cooking   10.    Plate and serve","categories":["cookbooks"]},{"title":"Automatically Deploy Frontend to GitHub Pages","url":"/en/2019/12/05/deploy-github-page.html","content":"Deploying your own project to GitHub Pages is quite troublesome - you need to build first and then push the files to the master/docs or gh-pages branch. Now GitHub has a plugin that can help you complete these steps:   GitHub repository:    gh-pages   Installation:   $ npm install gh-pages --save-dev   Note: This module requires git version &gt;= 1.9   Configuration:   Add the following code to the script field in package.json   &quot;scripts&quot;: {  &quot;deploy&quot;: &quot;npm run build &amp; gh-pages -d dist&quot;,}   Next, run    npm run deploy    which will first execute the build command, then start pushing the newly built files to the gh-pages branch of the project. Then in the GitHub project&#39;s Settings &gt; GitHub Pages, select gh-pages branch in Source. Wait a few minutes and open the URL to check:   https://${username}.github.io/${project}   Command Line Parameter Description   Parameter   Description   -d   Directory of files to push, here it&#39;s the dist folder in the project root directory.   -m   Push message, if the message is too long with spaces, you need to add double quotes in json    -m \\&quot;Update GitHub Page\\&quot;   -b   Branch to push to, default is gh-pages   For more parameters, please enter the following command in the terminal   $ gh-pages --help","categories":["guides"]},{"title":"Waves and Sky, A Veteran Sailor's Personal Experience","url":"/en/2019/10/31/wave-and-sky.html","content":"","categories":["reprints"]},{"title":"JPEG Image Display Optimization","url":"/en/2019/10/31/gradual-jpeg.html","content":"1. JPEG Introduction   JPEG stands for Joint Photographic Experts Group, and it&#39;s the first international image compression standard. The JPEG image compression algorithm can provide good compression performance while maintaining relatively good reconstruction quality, and is widely used in image and video processing fields.   2. Storage Methods   The JPEG file format has two storage methods. They are Baseline JPEG and Progressive JPEG.Both formats have the same size and image data, and their file extensions are also the same. The only difference is the way they are displayed.   2.1 Baseline JPEG   This type of JPEG file storage method scans from top to bottom, storing each row sequentially in the JPEG file. When opening this file to display its content, the data will be displayed from top to bottom, row by row, in the order it was stored, until all data has been read, completing the display of the entire image. If the file is large or the network download speed is slow, you will see the effect of the image being loaded row by row. This format of JPEG has no advantages, so Progressive JPEG is generally recommended.   2.2 Progressive JPEG   Unlike Baseline&#39;s single scan, Progressive JPEG files contain multiple scans, which are stored sequentially in the JPEG file. During the file opening process, the blurred outline of the entire image will be displayed first, and as the number of scans increases, the image becomes clearer and clearer. The main advantage of this format is that in slow network conditions, you can see the outline of the image and know roughly what the image being loaded is. You&#39;ll notice this technique when opening larger images on some websites.   3. How to Create   Use Photoshop   File &gt; Save As &gt; Click save first, then the JPEG options will pop up   If you want to create progressive JPEG, select &quot;Progressive&quot;   4. Application   When should you use basic JPEG and progressive JPEG?   When your JPEG image is below 10K, it&#39;s best to save as basic JPEG (estimated 75% chance it will be smaller)For files over 10K, progressive JPEG will provide better compression for you (in 94% of cases)Under Chrome + Firefox + IE9 browsers, progressive images load faster, and much faster. As for other browsers, the loading is consistent with basic images, at least not dragging behind.   Progressive images also have disadvantages - they consume CPU and memory.","categories":["guides"]},{"title":"Hens and Frontend Engineers","url":"/en/2019/10/25/hen-and-front-end-engineer.html","content":"","categories":["reprints"]},{"title":"RegExp","url":"/en/2019/10/22/regexp.html","content":"JavaScript RegExp Object   Syntax   var regexp = new RegExp(pattern, modifiers);    // Create via RegExp constructorvar regexp = /[pattern]/[modifiers];            // Create via literal   pattern describes the expression pattern   modifiers are used to specify global matching, case-sensitive matching, and multiline matching   Note: When using the constructor to create a regular expression object, you need to follow the regular character escaping rules (add backslash \\ in front). For example, the following are equivalent:   var regexp = new RegExp(&#39;\\\\w+&#39;);var regexp = /\\w+/;   Modifiers   Modifiers are used to specify global matching, case-sensitive matching, and multiline matching:   Modifier   Description   i   Perform case-insensitive matching.   g   Perform global matching (find all matches rather than stopping after the first match).   m   Perform multiline matching.   s   Allow . to match newline characters.   u   Use unicode code patterns for matching.   y   Perform &quot;sticky&quot; search, matching from the current position of the target string.   Quantifiers   Quantifiers define the exact or approximate number of repeated character matches:   Quantifier   Description   n+   Match any string containing at least one n.   n*   Match any string containing zero or more n.   n?   Match any string containing zero or one n.   n{X}   Match strings containing a sequence of X n&#39;s.   n{X,}   Match strings containing at least X n&#39;s in sequence.   n{X,Y}   Match strings containing at least X n&#39;s in sequence.   ^n   Match any string that starts with n.   n$   Match any string that ends with n.   ?=n   Match any string that is immediately followed by the specified string n.   ?!n   Match any string that is not immediately followed by the specified string n.   Metacharacters   Metacharacters are characters with special meanings:   Metacharacter   Description   .   (Decimal point) By default matches any single character except    newline   .   \\w   Match word characters (digits, letters, underscore).   \\W   Match non-word characters.   \\d   Match digits.   \\D   Match non-digit characters.   \\s   Match whitespace characters.   \\S   Match non-whitespace characters.   \\b   Match word boundaries.   \\B   Match non-word boundaries.   \\0   Match NULL character.   \\n   Match newline character.   \\f   Match form feed character.   \\r   Match carriage return character.   \\t   Match tab character.   \\v   Match vertical tab character.   \\xxx   Match character specified by octal number xxx.   \\xdd   Match character specified by hexadecimal number dd.   \\uxxxx   Match Unicode character specified by hexadecimal number xxxx.   Square Brackets   Square brackets are used to find characters within a certain range:   Expression   Description   [^]   Match any character. (Can match    newline   )   [abc]   Match any character between the square brackets.   [^abc]   Match any character not between the square brackets.   [0-9]   Match any digit from 0 to 9.   [a-z]   Match any character from lowercase a to lowercase z.   [A-Z]   Match any character from uppercase A to uppercase Z.   [A-z]   Match any character from uppercase A to lowercase z.   (red|blue|green)   Match any specified option.   RegExp Object Methods   Expression   Description   compile   Compile regular expression.   exec   Retrieve specified value in string. Returns found value and determines its position.   test   Retrieve specified value in string. Returns true or false.   String Object Methods Supporting Regular Expressions   Expression   Description   search   Retrieve value matching regular expression.   match   Find one or more regular expression matches.   replace   Replace substring matching regular expression.   split   Split string into string array.   Using Regular Expressions in Multiline Text   var string = &#39;Please yes\\nmake my day!&#39;;string.match(/yes.*day/); // nullstring.match(/yes[^]*day/); // &#39;yes\\nmake my day&#39;   Lookahead and Negative Lookahead Assertions   Lookahead assertion means that x only matches if it&#39;s followed by y, must be written as /x(?=y)/. For example, to only match numbers before percent sign, write /\\d+(?=%)/.   var string = &#39;100% of US presidents have been male&#39;;/\\d+(?=%)/.exec(string); // [&#39;100&#39;]/have(?=%)/.exec(string); // null   Negative lookahead assertion means that x only matches if it&#39;s not followed by y, must be written as /x(?!y)/. For example, to only match numbers not before percent sign, write /\\d+(?!%)/.   var string = &#39;that&#39;s all 44 of them&#39;;/\\d+(?!%)/.exec(string); // [&#39;44&#39;]/\\d+(?!.*of)/.exec(string); // null/\\d+(?!.*all)/.exec(string); // [&#39;44&#39;]/\\d+(?!.*of|.*all)/.exec(string); // null   Lookbehind and Negative Lookbehind Assertions   ES2018 introduced lookbehind assertions, V8 engine version 4.9 (Chrome 62) already supports it.Lookbehind assertion means that x only matches if it&#39;s preceded by y, must be written as /(?&lt;=y)x/. For example, to only match numbers after dollar sign, write /(?&lt;=$)\\d+/.   var string = &#39;Benjamin Franklin is on the $100 bill&#39;;/(?&lt;=\\$)\\d+/.exec(string);  // [&quot;100&quot;]   Negative lookbehind assertion means that x only matches if it&#39;s not preceded by y, must be written as /(?&lt;!y)x/. For example, to only match numbers not after dollar sign, write /(?&lt;!$)\\d+/.   var string = &#39;it&#39;s is worth about €90&#39;;/(?&lt;!\\$)\\d+/.exec(string);  // [&quot;90&quot;]   Greedy and Non-greedy Modes   Greedy mode: Regular expressions generally tend toward maximum length matching, always trying to match as many characters as possible.   var html = &#39;&lt;html&gt;&lt;head&gt;&lt;title&gt;&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;&#39;;var regexp = /(&lt;.*&gt;)/;html.match(regexp); // [&#39;&lt;html&gt;&lt;head&gt;&lt;title&gt;&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;&#39;]   Non-greedy mode: Non-greedy matching means matching just enough to get the result, always trying to match as few characters as possible.   var html = &#39;&lt;html&gt;&lt;head&gt;&lt;title&gt;&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;&#39;;var regexp = /(&lt;.*?&gt;)/;html.match(regexp); // [&#39;&lt;html&gt;&#39;]   Simple description of lazy matching for 6 repetition types:   {n,m}?: Try to match n times, but may repeat up to m times to satisfy constraints.   {n}?: Try to match n times.   {n,}?: Try to match n times, but may match any number of times to satisfy constraints.   ??: Try to match, but may match at most 1 time to satisfy constraints, equivalent to {0,1}?.   +?: Try to match 1 time, but may match any number of times to satisfy constraints, equivalent to {1,}?.   *?: Try not to match, but may match any number of times to satisfy constraints, equivalent to {0,}?.   Capturing and Non-capturing Groups   Capturing (): Capturing groups temporarily store the content matched by each capturing group somewhere for later use. In JavaScript, the content matched by capturing groups is saved in the format $1, $2, $3, etc. Therefore, capturing groups have performance overhead.   var string = &#39;sjds24324abcabc1234&#39;;var regexp = /(abc){2}/;string.match(regexp); // [&#39;abcabc&#39;, &#39;abc&#39;]   Non-capturing (?:): Non-capturing groups only return a result without individual group matches (without substrings). So it improves matching speed.   var string = &#39;sjds24324abcabc1234&#39;;var regexp = /(?:abc){2}/;string.match(regexp); // [&#39;abcabc&#39;]   Named Group Captures   Named group captures use the symbol ?&lt;name&gt; to access matched regular expression results by name. If a named group doesn&#39;t match, the corresponding groups object property will be undefined.   var date = &#39;2023-01-01&#39;;var regexp = /(?&lt;year&gt;\\d{4})-(?&lt;month&gt;\\d{2})-(?&lt;day&gt;\\d{2})/u;regexp.exec(&#39;2023-01-01&#39;); // { year: &#39;2023&#39;, month: &#39;01&#39;, day: &#39;01&#39; }","categories":["notes"]},{"title":"VSCode Configuration","url":"/en/2019/09/21/vscode-configuration.html","content":"Code Formatting Shortcuts:            ```    Shift + Alt + F    ```              ```    Shift (⇧) + Option (⌥) + F    ```              ```    Ctrl + Shift + I    ```     Shortcut Configuration:   Redo (Reverse Undo):            ```    Ctrl + Shift + Z   ->   Ctrl + Y    ```              ```    Command (⌘) + Shift (⇧) + Z   ->   Command (⌘) + Y    ```     Copy Line Down (Quick copy one line):            ```    Shift + Alt + ↓   ->   Ctrl + D    ```              ```    Shift (⇧) + Option (⌥) + ↓   ->   Command (⌘) + D    ```     Transform to Uppercase:            ```    Null   ->   Ctrl + Shift + U    ```              ```    Null   ->   Command (⌘) + Shift (⇧) + U    ```     Transform to Lowercase:            ```    Null   ->   Ctrl + Shift + L    ```              ```    Null   ->   Command (⌘) + Shift (⇧) + L    ```     Extensions   GitLens   : Shows who wrote each line of code   vscode-fileheader   : Displays file author modification information   ESLint   : Uses the project&#39;s eslint configuration file to check project code   Prettier - Code formatter   : Prettier code formatting   Tailwind CSS IntelliSense   : Tailwind CSS syntax hint plugin   {  &quot;recommendations&quot;: [    &quot;eamodio.gitlens&quot;,    &quot;dbaeumer.vscode-eslint&quot;,    &quot;esbenp.prettier-vscode&quot;,    &quot;bradlc.vscode-tailwindcss&quot;  ]}   VSCode Editor Settings:   {  &quot;editor.detectIndentation&quot;: true,  &quot;editor.tabSize&quot;: 2,  &quot;files.eol&quot;: &quot;\\n&quot;,  &quot;files.autoSave&quot;: &quot;off&quot;,}   Indentation    Indentation   detectIndentation    - Controls whether to automatically detect &quot;editor.tabSize&quot; and &quot;editor.insertSpaces&quot; based on file content when opening files.   tabSize    - Number of spaces a tab is equal to. When &quot;editor.detectIndentation&quot; is on, this setting will be overridden based on file content.   insertSpaces    - Insert spaces when pressing &quot;Tab&quot;. When &quot;editor.detectIndentation&quot; is on, this setting will be overridden based on file content.   {  &quot;editor.detectIndentation&quot;: true,  &quot;editor.tabSize&quot;: 2,  &quot;editor.insertSpaces&quot;: true}   Line Endings   Default line ending character.   Value   Description   \\n   LF (Linux)   \\r\\n   CRLF (Windows)   auto   Uses operating system specific end of line character.   {  &quot;files.eol&quot;: &quot;\\n&quot;,  // Configure settings to be overridden for the shellscript language.  &quot;[shellscript]&quot;: {    &quot;files.eol&quot;: &quot;\\n&quot;  }}   Auto Save    Auto Save   Value   Description   off   To disable auto save.   afterDelay   To save files after a configured delay (default 1000 ms).   onFocusChange   To save files when focus moves out of the editor of the dirty file.   onWindowChange   To save files when the focus moves out of the VS Code window.   {  &quot;files.autoSave&quot;: &quot;off&quot;,  &quot;files.autoSaveDelay&quot;: 1000}   Auto Formatting    Formatting   formatOnSave    - Format code files when saving   formatOnType    - Format the line of code after typing   formatOnPaste    - Format pasted content   {  &quot;editor.formatOnSave&quot;: true,  &quot;editor.formatOnType&quot;: false,  &quot;editor.formatOnPaste&quot;: false}   Default Formatter    Default formatter   dbaeumer.vscode-eslint    - ESLint Plugin.   esbenp.prettier-vscode    - Prettier - Code formatter.   {  // Will format code according to eslint configuration  &quot;editor.defaultFormatter&quot;: &quot;dbaeumer.vscode-eslint&quot;}   Word Wrap   Whether to wrap lines when code length exceeds editor visible width   {  &quot;editor.wordWrap&quot;: &quot;on&quot;}   Expand Abbreviations    Emmet   Use shortcut syntax to expand tags, e.g., ul&gt;li*3&gt;span.hello   {  &quot;emmet.triggerExpansionOnTab&quot;: true}   Sticky Scroll    Sticky Scroll   https://code.visualstudio.com/updates/v1_85#_sticky-scroll-in-trees   {  &quot;workbench.tree.enableStickyScroll&quot;: false,  &quot;editor.stickyScroll.enabled&quot;: false}   Others   dragAndDrop    - Control whether the editor allows drag-and-drop to move the selected content.   ignoreRecommendations    - Set to true to disable extension recommendation push,    see details here   proxy    - Set proxy for editor   {  &quot;editor.dragAndDrop&quot;: false,  &quot;extensions.ignoreRecommendations&quot;: true,  &quot;http.proxy&quot;: &quot;http://127.0.0.1:1000&quot;}","categories":["notes"]},{"title":"WebStorm Configuration","url":"/en/2019/09/20/webstorm-configuration.html","content":"Setting Chinese Font   Uncheck &quot;Show only monospaced fonts&quot;   Font: Consolas   Size: 14   Line spacing: 1.2   Fallback font: Microsoft YaHei   Code Formatting Shortcut:   Ctrl + Alt + L   Keyboard Shortcuts:   Add Or Remove Caret (Multi-cursor):   Alt + Button1 Click   Redo (Reverse Undo):   Ctrl + Shift + Z   Expand Live Template / Emmet Abbreviation:   Tab   Fix ESLint Problems:   Alt + Shift + L   Configure Spaces Between Braces and Brackets:   Settings &gt; Editor &gt; Code Style &gt; JavaScript &gt; Space, find &quot;Within&quot; and check the following items:   Object literal braces   ES6 import/export braces   Array brackets   Interpolation expressions   Configure ESLint   Settings &gt; Plugins, install ESLint plugin   Settings &gt; ESLint Settings, configure   Search for ESLint in Settings, or find Settings &gt; Languages &amp; Frameworks &gt; JavaScript &gt; Code Quality Tools &gt; ESLint   Disable WebStorm Auto-Save   Step 1:   Settings &gt; Appearance &amp; Behavior &gt; System Settings&gt; Synchronization   &gt; Synchronize files on frame or editor tab activation           // Save when activating current window   &gt; Save files on frame deactivation                              // Save when switching to other windows   &gt; Save files automatically if application is idle for 15 sec.  // Set a time for auto-save   &gt; Use &quot;safe write&quot; (save changes to a temporary file first)    // Safe write, this option continuously saves source files, so just close the last one   Step 2:   Settings &gt; Editor &gt; General &gt; Editor Tabs&gt; Appearance   &gt; Mark modified(*)   // Modified files will show * (in the bottom right corner of file icon)","categories":["notes"]}]