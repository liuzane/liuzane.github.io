[{"title":"エビ入り卵炒め","url":"/ja/2025/04/04/shrimp-omelet.html","content":"材料   材料   量   むきエビ   100グラム   卵   4個   ネギ   適量   塩   適量   油   適量   作り方の手順   画像   手順   1.    材料を準備する   2.    卵にネギのみじん切りを加え、エビは水と塩で下味をつける   3.    卵を溶き、エビ（塩水ごと）を加える   4.    フライパンに油を熱し、卵を入れて固まったら炒める   5.    仕上げる   6.    盛り付ける","categories":["cookbooks"]},{"title":"チシャと豚肉の炒め物","url":"/ja/2025/04/04/stir-fried-meat-with-lettuce.html","content":"材料   材料   量   チシャ   2本   豚肉   400グラム   ニンニクの芽の葉   2本   ネギ   適量   ニンニク   適量   乾燥唐辛子   適量   花椒   適量   八角   適量   塩   適量   醤油   適量   濃口醤油   適量   オイスターソース   適量   作り方の手順   画像   手順   1.    材料を準備する   2.    調味料を準備：ネギ、ニンニク、唐辛子、花椒、八角   3.    チシャを縦半分に切り、さらにスライスする   4.    ニンニクの芽の葉をスライスする   5.    豚肉をスライスする   6.    油を入れて豚肉、調味料、濃口醤油を炒める   7.    炒めた豚肉を取り出しておく   8.    油を入れてチシャを炒め、豚肉を加えて炒める   9.    オイスターソース、醤油、塩を加えて炒める   10.    ニンニクの芽の葉を加えて炒める   11.    仕上げる   12.    盛り付ける","categories":["cookbooks"]},{"title":"ロメインレタス炒め","url":"/ja/2025/04/04/stir-fried-romaine.html","content":"材料   材料   量   ロメインレタス   500グラム   ピーマン   2個   油   適量   ニンニク   適量   塩   適量   醤油   適量   オイスターソース   適量   作り方の手順   画像   手順   1.    材料を準備する   2.    ピーマンをカットし、ニンニクをみじん切りにして一緒に用意する   3.    油を入れてピーマンとニンニクを炒める   4.    ロメインレタスを加えて炒め、オイスターソース、醤油、塩を加えてさらに炒める   5.    仕上げる   6.    盛り付ける","categories":["cookbooks"]},{"title":"セロリとニンニクの芽と牛肉の炒め物","url":"/ja/2025/04/04/stir-fried-beef-with-celery.html","content":"材料   材料   量   セロリ   250グラム   ニンニクの芽   4本   煮込み牛肉   400グラム   油   適量   ネギ   適量   ニンニク   適量   唐辛子   適量   花椒   適量   塩   適量   醤油   適量   濃口醤油   適量   作り方の手順   画像   手順   1.    材料を準備する   2.    調味料を準備：唐辛子、花椒、ネギ、ニンニク   3.    ピーマンをカットする   4.    ニンニクの芽の葉をカットする   5.    ニンニクの芽の根元を縦半分に切り、さらにカットする   6.    セロリをカットする   7.    牛肉をスライスする   8.    ニンニクの芽の根元とセロリを一緒に用意する   9.    ニンニクの芽の葉と牛肉を一緒に用意する   10.    油を入れてニンニクの芽の根元とセロリを炒める   11.    調味料を加えて炒める   12.    ニンニクの芽の葉と牛肉を加えて火が通るまで炒める   13.    醤油、濃口醤油、塩を加えて炒める   14.    仕上げる   15.    盛り付ける","categories":["cookbooks"]},{"title":"シイタケとニンニクの芽と豚肉の炒め物","url":"/ja/2025/03/17/stir-fried-meat-with-mushrooms-and-garlic-sprouts.html","content":"材料   材料   量   シイタケ   500グラム   ニンニクの芽   4本   豚肉   500グラム   油   適量   ネギ   適量   ニンニク   適量   唐辛子   適量   花椒   適量   塩   適量   醤油   適量   濃口醤油   適量   作り方の手順   画像   手順   1.    材料を準備する   2.    調味料を準備：花椒、唐辛子、ネギ、ニンニク   3.    シイタケをスライスする   4.    ニンニクの芽をカットする   5.    豚肉を細切りにする   6.    シイタケを下茹でしておく   7.    油を入れて豚肉を炒め、濃口醤油で色付けする   8.    肉を端に寄せ、調味料を加えて香りを出す   9.    シイタケを加えて炒める   10.    ニンニクの芽、塩、醤油を加えて均一に炒める   11.    仕上げる   12.    盛り付ける","categories":["cookbooks"]},{"title":"NPM Error Resolve","url":"/ja/2024/11/01/npm-error-resolve.html","content":"postinstall エラー   環境   バージョン   windows   10   node   20.14.0   pnpm   9.4.0   初めて    pnpm install    または    npm install    を実行すると、PNPMが次のエラーを報告します：npm postinstall failed command not found node ./scripts/postinstall.js   解決策1：   コマンドを実行します   rimraf .\\node_modules\\   npm cache clean --force   pnpm store prune   解決策2：   エラーが発生したプラグインの package.json ファイルを見つけます   package.json の scripts.postinstall のコマンドをどこかにメモし、コマンドを    pnpm --version    に変更します   その後、一度    pnpm install    を実行すると、エラーのあったプラグインの postinstall が正常に実行されます   エラーが発生したプラグインの package.json ファイルのディレクトリにそれぞれ移動します   それぞれのプラグインで元の postinstall コマンドを実行します   pnpm dev    で正常に起動できます。。。   node-pre-gyp エラー   プラグイン   バージョン   linux   13.6.0   node   18.20.4   npm   10.7.0   初めて    npm install    を実行すると、npm error node-pre-gyp が発生することがあります。   原因   https://github.com/mozilla/pdf.js#user-content-getting-the-code   On MacOS M1/M2 you may see some node-gyp-related errors when running npm install. This is because one of our dependencies, &quot;canvas&quot;, does not provide pre-built binaries for this platform and instead npm will try to build it from source. Please make sure to first install the necessary native dependencies using brew:    https://github.com/Automattic/node-canvas#compiling   .   解決策：   https://github.com/Automattic/node-canvas#compiling    の解決方法を参考にし、環境に画像プラグインのサポートを追加します。   プロジェクト内の canvas（パッケージ名: node-canvas）関連のすべてのプラグインを削除します。","categories":["javascript"]},{"title":"Windows PowerShell Assist","url":"/ja/2024/05/16/windows-powershell-assist.html","content":"カラー文字列の出力   function Write-Color([String[]]$Text, [ConsoleColor[]]$Color) {  for ($i = 0; $i -lt $Text.Length; $i++) {    Write-Host $Text[$i] -Foreground $Color[$i] -NoNewLine  }  Write-Host}# 使用例$scriptLocationPath = (Get-Location).PathWrite-Color -Text \"Title: \", \"Write Color\" -Color Blue, GreenWrite-Color -Text \"Script Path: \", $scriptLocationPath -Color Blue, Green","categories":["scripts"]},{"title":"Windowsで新しいPowerShellウィンドウを作成する","url":"/ja/2024/05/16/windows-crate-new-powershell-window.html","content":"ダブルクリックでCMD/BATスクリプトを実行し、新しいPowerShellウィンドウを作成する   :: start.batstart Powershell -executionpolicy RemoteSigned -noexit -file \".\\powershell-window.ps1\" \"Argument 1\" \"Argument 2\"# powershell-window.ps1$param1 = $args[0]$param2 = $args[1]$host.ui.RawUI.WindowTitle = \"Hello PowerShell\"Write-Output \"I'm $param1\"Write-Output \"I'm $param2\"// いくつかのコマンドを実行可能ipconfignode -vnpm run dev   ダブルクリックでCMD/BATスクリプトを実行し、新しいCMDウィンドウを作成する   :: start.batstart \"Title\" /d C:\\xxx\\xxx cmd /k \"echo npm run dev &amp;&amp; npm run dev\"","categories":["scripts"]},{"title":"Git 設定","url":"/ja/2024/01/25/git-configuration.html","content":"Git 設定   # ファイル名の大文字・小文字の区別を設定git config --global core.ignorecase false# true: Gitはファイル名の大文字・小文字の違いを無視します（例：大文字・小文字を区別しないシステムではREADME.mdとreadme.mdは同じファイルと見なされます）# false: Gitはファイル名の大文字・小文字を区別します# 改行コードの自動変換を設定git config --global core.autocrlf false# true: CRLFをLFに自動変換、またはチェックアウト時にCRLFに変換# false: 改行コードの変換を行わない# 混在する改行コードのチェックを設定git config --global core.safecrlf true# warn（デフォルト）: 混在する改行コードを含むファイルをコミットする際に警告を表示# true: 混在する改行コードを含むファイルのコミットを拒否（Fatalエラーが表示されます）# false: 混在する改行コードを含むファイルのコミットを許可   .gitattributes    ファイル設定   # デフォルトの動作を設定（core.autocrlfが未設定の場合に適用）* text=auto# 標準化し、チェックアウト時にローカルの改行コードに変換するテキストファイルを指定*.c text*.h text# チェックアウト時に常にCRLF改行コードを使用するファイルを指定*.sln text eol=crlf# 本当のバイナリファイル（変更すべきでないもの）を指定*.png binary   Gvim 設定   _vimrcファイルを開き、以下の設定を追加してください：   # ^Mと$記号を表示する設定:set encoding=utf-8:scriptencoding utf-8:set binary:set list:set listchars=tab:&gt;-,eol:$,space:·","categories":["notes"]},{"title":"Windows CMDよく使うコマンド大全","url":"/ja/2023/11/23/windows-cmd-commands.html","content":"CMDコマンドを実行する方法は2つあります：   コマンドプロンプトウィンドウでコマンドを実行する：スタートボタンを右クリックしてメニューを開き、「ファイル名を指定して実行」（ショートカット：Win + R）をクリックし、入力ボックスに「cmd」と入力してOKをクリックします。   拡張子が .cmd または .bat のスクリプトファイルを作成してCMDコマンドを実行します。   .cmdスクリプトファイルを作成してCMDコマンドを実行する   ここでは、「Hello World」というタイトルのコマンドプロンプトウィンドウを作成し、その中で「Hello World!」を出力したり、ファイルを作成したりする操作を行います。   rem start.cmdrem \"rem\"と\"::\"はバッチファイル内のコメントですstart \"Hello World\" cmd /k .\\input.batrem input.cmdrem chcpはページのエンコーディングを変更します。UTF-8のコードは65001で、コマンドラインの中国語文字化け問題を解決しますchcp 65001@echo Hello World!@echo offset /p text=入力してください：（PS: setで変数を設定し、/pパラメータでコマンドをブロックし、入力が完了してから他のコマンドを実行します。）echo 入力した内容は%text%ですset /p isSave=ファイルとして保存しますか？(y/n)if \"%isSave%\" == \"y\" (  if exist 入力した内容.txt (    @echo 入力した内容.txt ファイルは既に存在します  )  @echo %text%&gt;&gt;入力した内容.txt  @echo ファイルが保存されました.) else (  echo ファイルを保存しません.)pause   付録：   Windowsコマンド大全   1.    cdコマンド   ,    (chdirコマンド)   現在のディレクトリ名を表示または現在のディレクトリを変更します。ドライブ文字だけで使用した場合（例：cd C:）、cdは指定したドライブの現在のディレクトリ名を表示します。パラメータなしで使用した場合、cdは現在のドライブとディレクトリを表示します。   異なるドライブのパスに移動する場合は/dパラメータを追加する必要があります。そうしないと移動できません。   構文        cd [/d] [&lt;drive&gt;:][&lt;path&gt;]cd [..]   パラメータ   説明   /d   現在のドライブおよびそのドライブの現在のディレクトリを変更します。   &lt;drive&gt;:   表示または変更するドライブを指定します（現在のドライブと異なる場合）。   &lt;path&gt;   表示または変更するディレクトリのパスを指定します。   [..]   親フォルダに変更します。   /?   コマンドプロンプトでヘルプを表示します。   例        rem  CMD 実行パス: $ C:\\Users\\liuzane&gt;D:                  // Dドライブに移動F:                  // Fドライブに移動cd \\                // 現在のドライブのルートディレクトリに移動cd C:\\WINDOWS       // CドライブのWINDOWSフォルダに移動（同じドライブの場合/dは不要）cd /d e:\\software   // Eドライブのsoftwareフォルダに移動（ドライブをまたぐ場合/dが必要）cd..                // 1つ上のディレクトリに移動   2.    dirコマンド   ディレクトリ内のファイルとサブディレクトリの一覧を表示します。   構文        dir [&lt;drive&gt;:][&lt;path&gt;][&lt;filename&gt;] [...] [/p] [/q] [/w] [/d] [/a[[:]&lt;attributes&gt;]][/o[[:]&lt;sortorder&gt;]] [/t[[:]&lt;timefield&gt;]] [/s] [/b] [/l] [/n] [/x] [/c] [/4] [/r]   パラメータ   説明   [&lt;drive&gt;:][&lt;path&gt;]   一覧を表示するドライブとディレクトリを指定します。   [&lt;filename&gt;]   一覧を表示する特定のファイルまたはファイルグループを指定します。   /p   一度に1画面ずつ表示します。次の画面を見るには任意のキーを押します。   /q   ファイルの所有者情報を表示します。   /w   ワイド形式で一覧を表示し、1行に最大5つのファイル名またはディレクトリ名を表示します。   /d   /wと同じ形式で一覧を表示しますが、ファイルは列でソートされます。   /a[[:]&lt;attributes&gt;]   指定した属性を持つディレクトリとファイルのみを表示します。このパラメータを使用しない場合、隠しファイルとシステムファイル以外のすべてのファイル名が表示されます。属性を指定せずにこのパラメータを使用すると、すべてのファイル名（隠しファイルとシステムファイルを含む）が表示されます。属性値のリストは以下の通りです：   d - ディレクトリ   h - 隠しファイル   s - システムファイル   l - 再解析ポイント   r - 読み取り専用ファイル   a - アーカイブ可能なファイル   i - コンテンツインデックスされていないファイル   これらの値は任意の組み合わせで使用できますが、値の間にスペースを入れないでください。（オプションでコロン（:）区切りや、非表示を示すためにハイフン（-）を前に付けることができます。例：-s属性はシステムファイルを表示しません。）   /o[[:]&lt;sortorder&gt;]   sortorderに従って出力をソートします。以下の値の任意の組み合わせが可能です：   n - 名前順   e - 拡張子順   g - ディレクトリを先に表示   s - サイズ順（最小から）   d - 日付/時刻順（最も古いものから）   ハイフン（-）を前に付けるとソート順が逆になります   複数の値は指定した順に処理されます。値の間にスペースを入れず、コロン（:）はオプションです。   sortorderを指定しない場合、   dir /o   はディレクトリをアルファベット順で、続いてファイルもアルファベット順で表示します。   /t[[:]&lt;timefield&gt;]   表示またはソートに使用する時間フィールドを指定します。timefieldの値は以下の通りです：   c - 作成時間   a - 最終アクセス時間   w - 最終書き込み時間   /s   指定したディレクトリおよびすべてのサブディレクトリ内で指定したファイル名のすべての一致を一覧表示します。   /b   純粋なディレクトリとファイルの一覧を表示し、他の情報は含みません。   /b   パラメータは   /w   を上書きします。   /l   ソートされていないディレクトリ名とファイル名を小文字で表示します。   /n   画面の最右側にファイル名付きの長いリスト形式で表示します。   /x   8dot3ファイル名で生成された短い名前を表示します。内容は   /n   と同じですが、短い名前が長い名前の前に挿入されます。   /c   ファイルサイズを千位区切りで表示します。これはデフォルトの動作です。   /-c   で区切りを非表示にできます。   /4   年を4桁で表示します。   /r   年を4桁で表示します。   /?   コマンドプロンプトでヘルプを表示します。   注記        複数のfilenameパラメータを使用する場合は、各ファイル名をスペース、カンマ、またはセミコロンで区切ります。   ワイルドカード（*または?）を使用して、ファイル名の1つ以上の文字を表し、ファイルまたはサブディレクトリのサブセットを表示できます。   ワイルドカード*を使用して任意の文字列を置き換えることができます。例：   dir *.txt   は、現在のディレクトリ内で拡張子が.txtで始まるすべてのファイルを一覧表示します（例：.txt、.txt1、.txt_old）。   dir read *.txt   は、現在のディレクトリ内でreadで始まり、拡張子が.txtで始まるすべてのファイルを一覧表示します（例：.txt、.txt1、.txt_old）。   dir read *.*   は、現在のディレクトリ内でreadで始まるすべてのファイルを一覧表示します（拡張子は問わず）。アスタリスクワイルドカードは常に短いファイル名マッピングを使用するため、予期しない結果になる場合があります。例：次のディレクトリには2つのファイル（t.txt2とt97.txt）があります。   dir t97*   と入力するとt97.txtファイルが返されると思うかもしれませんが、実際には両方のファイルが返されます。これは、アスタリスクワイルドカードが短い名前T97B4~1.TXTを使用するため、t.txt2ファイルもt97.txtと一致すると見なされるからです。同様に、   del t97*   と入力すると両方のファイルが削除されます。   クエスチョンマーク（?）を使用して、名前内の単一文字を置き換えることができます。例：   dir read???.txt   と入力すると、現在のディレクトリ内で拡張子が.txtで、readで始まり、最大3文字が続くすべてのファイルが一覧表示されます。これにはRead.txt、Read1.txt、Read12.txt、Read123.txt、Readme1.txtが含まれますが、Readme12.txtは含まれません。   attributesで   /a   と複数の値を使用する場合、このコマンドは指定したすべての属性を持つファイルのみを表示します。例：   /a   をrと-h属性と一緒に使用する場合（   /a:r-h   または   /ar-h   ）、このコマンドは非表示の読み取り専用ファイルのみを表示します。   複数のsortorder値を指定すると、このコマンドはまず最初の条件でファイル名をソートし、次に2番目の条件でソートします。例：   /o   をsortorderのeと-sパラメータと一緒に使用する場合（   /o:e-s   または/oe-s）、このコマンドは拡張子でディレクトリとファイル名をソートし、最初に最大のファイルを表示し、最終結果を表示します。拡張子でアルファベット順にソートすると、拡張子のないファイル名が最初に表示され、次にディレクトリ名、最後に拡張子付きのファイル名が表示されます。   このコマンドの出力をファイルにリダイレクトする場合（   &gt;   記号を使用）、またはパイプ記号（   |   ）を使用して出力を別のコマンドに送信する場合は、   /a:-d   と   /b   を使用してファイル名のみを一覧表示する必要があります。filenameを   /b   と   /s   と一緒に使用して、このコマンドが現在のディレクトリおよびそのサブディレクトリ内でfilenameパラメータに一致するすべてのファイル名を検索するように指定できます。このコマンドは、見つかった各ファイル名のドライブ名、ディレクトリ名、ファイル名、ファイル拡張子のみを一覧表示します（1行に1つのパス）。パイプ記号を使用して出力を別のコマンドに送信する前に、Autoexec.ntファイルでTEMP環境変数を設定する必要があります。   例        dir                       // 現在のディレクトリ内のファイルを表示（Linuxのlsに似ている）dir /s/w/o/p/a:-d         // ファイル名と拡張子を表示（ディレクトリ名は省略）dir c:\\*.txt /w/o/s/p     // Cドライブのすべてのディレクトリ内で拡張子が.txtのすべてのファイル名を一覧表示dir &gt; \\records\\dir.doc    // dirコマンドの出力をファイルにリダイレクト                          // dir.docが存在しない場合、dirはこのファイルを作成します                          // recordsディレクトリが存在しない場合                          // 「File creation error」というメッセージが表示されます   3.    mdコマンド   ,    (mkdirコマンド)   ディレクトリまたはサブディレクトリを作成します。コマンド拡張（デフォルトで有効）を使用すると、1つのmdコマンドで指定したパス内に中間ディレクトリを作成できます。   構文        md [&lt;drive&gt;:]&lt;path&gt;   パラメータ   説明   &lt;drive&gt;:   新しいディレクトリを作成するドライブを指定します。   &lt;path&gt;   新しいディレクトリの名前と場所を指定します。単一パスの最大長はファイルシステムによって決まります。これは必須パラメータです。   /?   コマンドプロンプトでヘルプを表示します。   例        md Directory1                // 現在のディレクトリにDirectory1という名前のディレクトリを作成md \\Taxes\\Property\\Current   // コマンド拡張が有効な場合、ルートディレクトリにTaxes\\Property\\Currentディレクトリツリーを作成   4.    rdコマンド   ,    (mkdirコマンド)   ディレクトリを削除します。   構文        rd [&lt;drive&gt;:]&lt;path&gt; [/s [/q]]   パラメータ   説明   [&lt;drive&gt;:]&lt;path&gt;   削除するディレクトリの場所と名前を指定します。Pathは必須です。Pathの先頭にバックスラッシュ（\\）を含めると、そのPathはルートディレクトリから始まります（現在のディレクトリに関係なく）。   /s   ディレクトリツリー（指定したディレクトリとそのすべてのサブディレクトリ、すべてのファイルを含む）を削除します。   /q   サイレントモードを指定します。ディレクトリツリーを削除する際に確認を求めません。/sも指定した場合のみ有効です。   注意：サイレントモードで実行すると、確認なしでディレクトリツリー全体が削除されます。/qコマンドラインオプションを使用する前に、重要なファイルを移動またはバックアップしてください。   /?   コマンドプロンプトでヘルプを表示します。   例        rd /s test       // 現在のディレクトリからtestという名前のディレクトリ（およびそのすべてのサブディレクトリとファイル）を削除rd /s /q test    // 上記の例をサイレントモードで実行   5.    copyコマンド   1つ以上のファイルを1つの場所から別の場所にコピーします。   構文        copy [/d] [/v] [/n] [/y | /-y] [/z] [/a | /b] &lt;source&gt; [/a | /b] [+&lt;source&gt; [/a | /b] [+ ...]] [&lt;destination&gt; [/a | /b]]   パラメータ   説明   /d   暗号化されたファイルを復号化してターゲットに保存することを許可します。   /v   新しいファイルが正しく書き込まれたかどうかを確認します。   /n   ファイル名が8文字を超えるか、拡張子が3文字を超える場合に短いファイル名を使用します（使用可能な場合）。   /y   既存のターゲットファイルを上書きする前に確認を求めません。   /-y   既存のターゲットファイルを上書きする前に確認を求めます。   /z   ネットワークファイルを再起動モードでコピーします。   /a   ASCIIテキストファイルを示します。   /b   バイナリファイルを示します。   &lt;source&gt;   必須。 コピーする1つ以上のファイルまたはファイルグループの場所を指定します。 source はドライブ番号、セミコロン、ディレクトリ名、ファイル名、またはこれらの組み合わせにすることができます。   &lt;destination&gt;   必須。 1つ以上のファイルをコピーする場所を指定します。 destination はドライブ番号、セミコロン、ディレクトリ名、ファイル名、またはこれらの組み合わせにすることができます。   /?   コマンドプロンプトでヘルプを表示します。   注記   使用ファイル終了文字 (CTRL+Z) で終了するASCIIテキストファイルをコピーできます。   コマンドラインのファイルリストの前後に   /a   を付けると、そのオプションはリストされたすべてのファイルに適用されます。この場合、   /b   は   /b   の前のファイルに適用されます。   /a   の効果は、コマンドライン文字列内の位置によって異なります。- もし   /a   がsourceの後に続く場合、copyコマンドはファイルをASCIIファイルと見なして最初のファイル終了文字 (CTRL+Z) の前のデータをコピーします。- もし   /a   がdestinationの後に続く場合、copyコマンドはファイルの最後にファイル終了文字 (CTRL+Z) を追加します。   もし   /b   がコマンドインタプリタにファイルサイズで指定されたバイト数を読み取ることを指示します。   copy   がファイルを結合しない限り、   /b   は   copy   のデフォルト値です。   もしコマンドラインのファイルリストの前後に   /b   を付けると、そのオプションはリストされたすべてのファイルに適用されます。この場合、   /a   は   /a   の前のファイルに適用されます。   /b   の効果は、コマンドライン文字列内の位置によって異なります。- もし   /b   がsourceの後に続く場合、copyコマンドはファイル全体をコピーします。これには任意のファイル終了文字 (CTRL+Z) を含みます。- もし   /b   がdestinationの後に続く場合、copyコマンドはファイル終了文字 (CTRL+Z) を追加しません。   新しいファイルが作成されない場合は、エラーメッセージが表示されます。 これを防ぐために、   /v   を使用して重要なデータが正しく記録されていることを確認できますが、   copy   コマンドはほとんど記録エラーを発生させません。   /v   コマンドラインオプションは、磁盤上の各セクターを確認するために使用されるため、   copy   コマンドの速度を低下させます。   もしCOPYCMD環境変数に   /y   が設定されている場合、コマンドラインで   /-y   を使用してこの設定を置き換えることができます。デフォルトでは、   copy   コマンドが実行されていない限り、この設定を置き換えると警告が表示されます。   ファイルを追加するには、destinationを指定しますが、sourceを複数のファイル（通配符またはfile1+file2+file3形式を使用）に指定します。   もしコピー中に接続が切断された場合（たとえば、サーバーがオフラインになった場合）、   copy /z   を使用して再接続して復元できます。   /z   オプションは、各ファイルのコピー操作の完了パーセントを表示します。   もし1つ以上のsourceまたはdestinationを出現に置き換える場合、デバイス名に置き換えることができます。   もしdestinationがデバイス（たとえばCom1またはLpt1）の場合、   /b   オプションはデータをデバイスに二進モードでコピーします。二進モードでは、   copy /b   はすべての文字（CTRL+C、CTRL+S、CTRL+Z、ENTERなどの特殊文字を含む）をデータとしてデバイスにコピーします。ただし、   /b   を省略すると、ASCIIモードでデータがデバイスにコピーされます。ASCIIモードでは、特殊文字がファイルのコピー中に結合する可能性があります。   もしdestinationが指定されない場合、元のファイルと同じ名前、日付、時刻の新しいファイルが作成されます。新しいファイルは現在のドライブの現在のディレクトリに保存されます。もしsourceが現在のドライブと現在のディレクトリにあり、destinationを異なるドライブまたはディレクトリに指定しない場合、   copy   コマンドは停止して以下のエラーメッセージを表示します。   File cannot be copied onto itself0 File(s) copied   もしsourceに複数のファイルが指定された場合、   copy   コマンドはこれらのファイルを単一のファイルに結合します。   /b   オプションを使用しない限り、copyコマンドは結合ファイルをASCIIファイルと想定します。   長さが0バイトのファイルをコピーするか、現在のディレクトリのすべてのファイルとサブディレクトリをコピーするには、   xcopyコマンド   を使用します。   現在の時間と日付をファイルに割り当てるには、以下の構文を使用します。   copy /b &lt;source&gt; +,,    // ここで , はdestinationパラメータを意図的に省略していることを示します。   例        copy robin.typ c:\\birds                           // 現在のドライブとディレクトリからrobin.typという名前のファイルをCドライブ上のbirdsという既存のディレクトリにコピーcopy memo.doc letter.doc /a                       // 現在のドライブのmemo.docファイルをletter.docにコピーし、ファイル終了文字 (CTRL+Z) が複製されたファイルの末尾に配置されるようにします                                                  // もしbirdsディレクトリが存在しない場合、robin.typファイルがCドライブのルートディレクトリにbirdsという名前のファイルにコピーされます。copy mar89.rpt + apr89.rpt + may89.rpt Report     // Mar89.rpt、Apr89.rpt、May89.rptを現在のディレクトリに結合し、Reportという名前のファイルに入れます                                                  // 結合ファイルの場合、copyコマンドは現在の日付と時刻をターゲットファイルにマークします。                                                  // もしdestinationが省略された場合、リスト内の最初のファイルの名前を結合してファイルを保存します。copy report + mar89.rpt + apr89.rpt + may89.rpt   // Report内のすべてのファイルを結合し、Reportという名前のファイルが既に存在する場合copy *.txt Combined.doc                           // 現在のディレクトリ内で拡張子が.txtのすべてのファイルをCombined.docという単一のファイルに結合                                                  // 結合二進ファイルの場合、生成されたファイルは内部形式の問題のため使用できない場合があります。copy *.txt + *.ref *.doc                          // 各拡張子が.txtのファイルをそれぞれの.refファイルと結合して、拡張子が.docのファイルを作成します。                                                  // copyコマンドはfile1.txtをfile1.refと結合してfile1.docを作成し、                                                  // 次にfile2.txtをfile2.refと結合してfile2.docを作成し、続いて依此类推copy *.txt + *.ref Combined.doc                   // 拡張子が.txtのすべてのファイルを結合し、次に拡張子が.refのすべてのファイルをCombined.docというファイルに結合します   6.    moveコマンド   1つ以上のファイルを1つのディレクトリから別のディレクトリに移動します。   構文        move [{/y|-y}] [&lt;source&gt;] [&lt;target&gt;]   パラメータ   説明   /y   既存のターゲットファイルを上書きする前に確認を求めません。 COPYCMD環境変数にこのパラメータが設定されている場合は、-yパラメータを使用してこの設定を置き換えることができます。コマンドがバッチスクリプトから実行されていない場合、デフォルトでは上書きファイルの前に確認を求めます。   -y   既存のターゲットファイルを上書きする前に確認を求めます。   &lt;source&gt;   移動するファイルのパスと名前を指定します。 もしディレクトリを移動または名前を変更する場合、sourceは現在のディレクトリのパスと名前にする必要があります。   &lt;target&gt;   ファイルを移動するパスと名前を指定します。 もしディレクトリを移動または名前を変更する場合、targetはターゲットディレクトリのパスと名前にする必要があります。   /?   コマンドプロンプトでヘルプを表示します。   例        move \\data\\*.xls \\second_q\\reports\\    // 現在のディレクトリから拡張子が.xlsのすべてのファイルを\\Dataから\\second_Q\\reportsに移動   7.    delコマンド   ,    eraseコマンド   1つ以上のファイルを削除します。(これはファイルの専用削除で、ディレクトリを削除することはできません)   構文        del [/p] [/f] [/s] [/q] [/a[:]&lt;attributes&gt;] &lt;names&gt;   パラメータ   説明   &lt;names&gt;   削除する1つ以上のファイルまたはディレクトリのリストを指定します。 通配符を使用して複数のファイルを削除できます。 もしディレクトリを指定すると、そのディレクトリ内のすべてのファイルが削除されます。   /p   削除する前に指定されたファイルをユーザーに確認するようにします。   /f   読み取り専用ファイルを強制的に削除します。   /s   現在のディレクトリとそのすべてのサブディレクトリ内で指定されたファイルを削除します。 削除されるファイルの名前を表示します。   /q   サイレントモードを指定します。システムに確認を求めません。   /a[:]&lt;attributes&gt;   以下のファイル属性に基づいてファイルを削除します。   r 読み取り専用ファイル   h 隠しファイル   i コンテンツインデックスされていないファイル   s システムファイル   a アーカイブ可能なファイル   l 再解析ポイント   - 用いる前にこのプレフィックスを使用して「非」を示します   /?   コマンドプロンプトでヘルプを表示します。   注記   もし   del /p   コマンドを使用する場合、以下のメッセージが表示されます。   FileName, Delete (Y/N)?   削除を確認するにはYを押してください。削除をキャンセルして次のファイル名を表示するにはNを押してください。削除を停止するにはCtrl+Cを押してください。   もしコマンド拡張が無効になっている場合、   /s   パラメータは見つからないファイルの名前を表示しますが、削除されるファイルの名前を表示しません。   もし   &lt;names&gt;   パラメータに特定のディレクトリを指定する場合、そのディレクトリに含まれるすべてのファイルも削除されます。例えば、\\workディレクトリ内のすべてのファイルを削除するには、次のように入力します。   del \\work   通配符（   *   と   ?   ）を使用して一度に複数のファイルを削除することもできますが、意図せずファイルを削除するのを避けるために注意してください。例えば、以下のように入力すると   del *.*   delコマンドは以下のような表示をします。   Are you sure (Y/N)?   現在のディレクトリ内のすべてのファイルを削除するにはYを押してEnterを押してください。削除をキャンセルするにはNを押してEnterを押してください。delコマンドで通配符を使用する前に、dirコマンドで同じ通配符を使用して削除するすべてのファイルを一覧表示してください。   例        del c:\\test                // ドライブC上のtestという名前のファイルフォルダ内のすべてのファイルを削除del c:\\test\\*.*            // 上記と同じdel \"c:\\test folder\\\"      // 名前にスペースを含むすべてのファイルを削除するには、完全なパスを二重引用符で囲みますdel \"c:\\test folder\\*.*\"   // 上記と同じdel *.bat                  // 現在のディレクトリ内の拡張子が.batのすべてのファイルを削除del /a:r *.*               // 現在のディレクトリ内のすべての読み取り専用ファイルを削除   8.    clsコマンド   コマンドプロンプトウィンドウをクリアします。   cls    // Linuxのclearに似ている   9.    pingコマンド   インターネット制御メッセージプロトコル (ICMP) エコー要求メッセージを送信して、別のTCP/IPコンピュータのIPレベル接続を確認します。   構文        ping [/t] [/a] [/n &lt;count&gt;] [/l &lt;size&gt;] [/f] [/I &lt;TTL&gt;] [/v &lt;TOS&gt;] [/r &lt;count&gt;] [/s &lt;count&gt;] [{/j &lt;hostlist&gt; | /k &lt;hostlist&gt;}] [/w &lt;timeout&gt;] [/R] [/S &lt;Srcaddr&gt;] [/4] [/6] &lt;targetname&gt;   パラメータ   説明   /t   ターゲットに回顯要求メッセージを送信し続けるように指定します。Ctrl+Enterを押して統計情報を表示し、このコマンドを終了するにはCtrl+Cを押してください。   /a   ターゲットIPアドレスに逆名前解決を実行するように指定します。この操作が成功すると、pingは対応するホスト名を表示します。   /n &lt;count&gt;   送信する回顯要求メッセージの数を指定します。デフォルトは4です。   /l &lt;size&gt;   回顯要求メッセージの「データ」フィールドの長さ（バイト単位）を指定します。デフォルトは32です。最大サイズは65,500です。   /f   回顯要求メッセージを送信し、IPヘッダーの「フラグメントなし」フラグを1に設定します（IPv4のみ使用可能）。回顯要求メッセージはルートによって分割できません。このパラメータは、パス最大伝送単位 (PMTU) の問題をトラブルシューティングするために使用できます。   /I &lt;TTL&gt;   送信された回顯要求メッセージのIPヘッダーの生存時間 (TTL) フィールドの値を指定します。デフォルトはホストのデフォルトTTL値です。最大TTLは255です。   /v &lt;TOS&gt;   送信された回顯要求メッセージのIPヘッダーのサービスタイプ (TOS) フィールドの値を指定します（IPv4のみ使用可能）。デフォルトは0です。TOSは0から255の間の10進値を指定します。   /r &lt;count&gt;   回顯要求メッセージと応答回顯メッセージに使用されるIPヘッダーの「ルート記録」オプションを使用して、ルートを記録するように指定します（IPv4のみ使用可能）。パスの各ホップは「ルート記録」オプションのエントリを使用します。可能な場合は、カウントを指定してください。カウントは少なくとも1で、最大値は9です。   /s &lt;count&gt;   回顯要求メッセージと応答回顯メッセージの到着時間を記録するためにIPヘッダーの「インターネットタイムスタンプ」オプションを使用するように指定します。カウントは少なくとも1で、最大値は4です。ローカルリンクアドレスの場合はこのパラメータが必要です。   /j &lt;hostlist&gt;   回顯要求メッセージにIPヘッダーの「緩やかなソースルート」オプションを使用し、hostlistで指定された中間ターゲットのセットを使用するように指定します（IPv4のみ使用可能）。緩やかなソースルートを使用すると、連続する中間ターゲットは1つ以上のルーターによって分離できます。ホストリストのアドレスまたは名前の数は9を超えることはできません。ホストリストはスペースで区切られたIPアドレス（ドット付き10進形式）の一覧です。   /k &lt;hostlist&gt;   回顯要求メッセージにIPヘッダーの「厳密なソースルート」オプションを使用し、hostlistで指定された中間ターゲットのセットを使用するように指定します（IPv4のみ使用可能）。厳密なソースルートを使用すると、次の中間ターゲットは直接アクセスする必要があります（それはルーターインターフェイス上の隣接項目でなければなりません）。ホストリストのアドレスまたは名前の数は9を超えることはできません。ホストリストはスペースで区切られたIPアドレス（ドット付き10進形式）の一覧です。   /w &lt;timeout&gt;   回顯要求メッセージに対応する回顯応答メッセージを受信するための待機時間を指定します（ミリ秒単位）。タイムアウト値内に回顯応答メッセージが受信されない場合は、「要求タイムアウト」エラーメッセージが表示されます。デフォルトのタイムアウト値は4000（4秒）です。   /R   往復ルートをトレースするように指定します（IPv6のみ使用可能）。   /S &lt;Srcaddr&gt;   回顯要求メッセージに使用するソースアドレスを指定します。IPv6の場合にのみ使用します。   /4   このトレースでIPv4のみを使用するように指定します。   /6   このトレースでIPv6のみを使用するように指定します。   &lt;targetname&gt;   ターゲットのホスト名またはIPアドレスを指定します。   /?   コマンドプロンプトでヘルプを表示します。   例        ping /a 10.0.99.221              // ターゲット10.0.99.221にping操作を実行し、10.0.99.221をそのホスト名に解析ping /n 10 /l 1000 10.0.99.221   // 10個の回顯要求メッセージを使用してターゲット10.0.99.221にping操作を実行し、各メッセージの「データ」フィールドを1000バイトに設定ping /r 4 10.0.99.221            // ターゲット10.0.99.221にping操作を実行し、4個のホップのルートを記録   10.    netstatコマンド   アクティブなTCP接続数、コンピュータがリッスンしているポート、イーサネット統計情報、IPルートテーブル、IPv4統計情報、およびIPv6統計情報を表示します。   構文        netstat [-a] [-b] [-e] [-n] [-o] [-p &lt;Protocol&gt;] [-r] [-s] [&lt;interval&gt;]   パラメータ   説明   -a   アクティブなTCP接続数とコンピュータがリッスンしているTCPおよびUDPポートを表示します。   -b   各接続またはリッスンポートを作成するために関係する実行可能ファイルを表示します。 一部の場合、よく知られた実行可能ファイルは複数の独立したコンポーネントをホストし、この場合、作成される接続またはリッスンポートに関係するコンポーネントのシーケンスが表示されます。 この場合、実行可能ファイル名は下部の[]内に表示され、上部はそれを呼び出すコンポーネント、その後続き、TCP/IPに至るまで続きます。 注意：このオプションは、十分な権限がない場合に失敗する可能性があります。   -e   イーサネット統計情報を表示します。このパラメータは-sと一緒に使用できます。   -n   アクティブなTCP接続数を表示しますが、アドレスとポート番号は数字で表示され、名前を試みません。   -o   アクティブなTCP接続数と各接続のプロセスID (PID) を表示します。Windowsタスクマネージャーの「プロセス」タブでPIDに基づいてアプリケーションを見つけることができます。このパラメータは   -s   、   -n   、   -p   と一緒に使用できます。   -p &lt;Protocol&gt;   Protocolで指定されたプロトコルの接続を表示します。この場合、Protocolはtcp、udp、tcpv6、またはudpv6のいずれかにすることができます。 このパラメータが   -s   と一緒に使用されてプロトコルに基づいて統計情報を表示する場合、Protocolはtcp、udp、icmp、ip、tcpv6、udpv6、icmpv6、またはipv6のいずれかにすることができます。   -s   プロトコルに基づいて統計情報を表示します。デフォルトでは、TCP、UDP、ICMP、およびIPプロトコルの統計情報が表示されます。IPv6プロトコルがインストールされている場合、IPv6ベースのTCP、IPv6ベースのUDP、ICMPv6、およびIPv6プロトコルの統計情報も表示されます。   -p   パラメータを使用してグループプロトコルを指定できます。   -r   IPルートテーブルの内容を表示します。これはroute printコマンドと同等です。   &lt;interval&gt;   選択した情報を毎回interval秒ごとに再表示します。Ctrl+Cを押して再再生を停止します。このパラメータを省略すると、このコマンドは選択した情報を1回だけ表示します。   /?   コマンドプロンプトでヘルプを表示します。   例        netstat -ano                  // ネットワーク接続、状態、および対応するプロセスIDを表示netstat -aon|findstr \"8080\"   // 指定されたPIDに対応するネットワーク接続を表示netstat -e -s                 // イーサネット統計情報とすべてのプロトコルの統計情報を表示netstat -s -p tcp udp         // TCPおよびUDPプロトコルの統計情報のみを表示netstat -o 5                  // アクティブなTCP接続数とプロセスIDを5秒ごとに表示netstat -n -o                 // 数字形式でアクティブなTCP接続数とプロセスIDを表示   11.    tasklistコマンド   ローカルコンピュータまたはリモートコンピュータ上で現在実行中のプロセスのリストを表示します。   構文        tasklist [/s &lt;computer&gt; [/u [&lt;domain&gt;\\]&lt;username&gt; [/p &lt;password&gt;]]] [{/m &lt;module&gt; | /svc | /v}] [/fo {table | list | csv}] [/nh] [/fi &lt;filter&gt; [/fi &lt;filter&gt; [ ... ]]]   パラメータ   説明   /s &lt;computer&gt;   リモートコンピュータの名前またはIPアドレスを指定します（反斜線を使用しないでください）。デフォルトはローカルコンピュータです。   /u &lt;domain&gt;\\&lt;username&gt;   &lt;username&gt;   または   &lt;domain&gt;\\&lt;username&gt;   で指定されたユーザーのアカウント権限を使用してコマンドを実行します。   /s   も指定されている場合にのみ   /u   パラメータを指定できます。デフォルトは、コマンドを発行するコンピュータにログインしているユーザーの権限です。   /p &lt;password&gt;   /u   パラメータで指定されたユーザーアカウントのパスワードを指定します。   /m &lt;module&gt;   モジュール名と一致するDLLモジュールをロードするすべてのタスクを一覧表示します。モジュール名が指定されていない場合、このオプションは各タスクによってロードされるすべてのモジュールを表示します。   svc   各プロセスのすべてのサービス情報を表示し、切り捨てません。   /fo   パラメータがtableに設定されている場合にのみ有効です。   /v   詳細なタスク情報を出力に表示します。完全な詳細出力を取得するには、   /v   と   /svc   を使用します。   /fo {table | list | csv}   出力に使用する形式を指定します。有効な値はtable、list、またはcsvです。デフォルトの形式はtableです。   /nh   出力に列見出しを表示しません。   /fo   パラメータがtableまたはcsvに設定されている場合にのみ有効です。   /fi &lt;filter&gt;   クエリに含めるか、クエリから除外するプロセスタイプを指定します。複数のフィルターを使用するか、通配符（`）を使用してすべてのタスクまたはイメージ名を指定できます。この記事の「フィルター名、演算子、および値」セクションには有効なフィルターが一覧表示されます。   /?   コマンドプロンプトでヘルプを表示します。   tasklist                                // PIDプロセスリストを取得tasklist|findstr \"8080\"                 // 指定されたPIDのプロセスを表示tasklist /fi \"IMAGENAME eq nginx.exe\"   // nginx.exeというイメージ名を持つすべてのプロセスを検索   12.    taskkillコマンド   プロセスタスクとプロセスIDを終了します   構文        taskkill [/s &lt;computer&gt; [/u [&lt;domain&gt;\\]&lt;username&gt; [/p [&lt;password&gt;]]]] {[/fi &lt;filter&gt;] [...] [/pid &lt;processID&gt; | /im &lt;imagename&gt;]} [/f] [/t]   パラメータ   説明   /s &lt;computer&gt;   リモートコンピュータの名前またはIPアドレスを指定します（反斜線を使用しないでください）。デフォルトはローカルコンピュータです。   /s &lt;computer&gt;   &lt;username&gt;   または   &lt;domain&gt;\\&lt;username&gt;   で指定されたユーザーのアカウント権限を使用してコマンドを実行します。   /s   も指定されている場合にのみ   /u   パラメータを指定できます。デフォルトは、コマンドを発行するコンピュータにログインしているユーザーの権限です。   /p &lt;password&gt;   /u   パラメータで指定されたユーザーアカウントのパスワードを指定します。   /fi &lt;filter&gt;   グループタスクを選択するためにフィルターを適用します。複数のフィルターを使用するか、通配符（*）を使用してすべてのタスクまたはイメージ名を指定できます。この記事の「フィルター名、演算子、および値」セクションには有効なフィルターが一覧表示されます。   /pid &lt;processID&gt;   終了するプロセスのプロセスIDを指定します。   /im &lt;imagename&gt;   終了するプロセスのイメージ名を指定します。通配符（*）を使用してすべてのイメージ名を指定します。   /f   強制的にプロセスを終了するように指定します。リモートプロセスの場合はこのパラメータを無視します。すべてのリモートプロセスが強制的に終了されます。   /t   指定されたプロセスとその起動されたすべてのサブプロセスを終了します。   例        taskkill /PID 8080         // PIDが8080のプロセスを終了taskkill /T /F /PID 8080   // 強制的にPIDが8080のすべてのプロセスを終了し、サブプロセスを含む（/Fパラメータ）taskkill /IM nginx.exe     // nginx.exeというイメージ名を持つすべてのプロセスを終了   13.    tracertコマンド   tracertはWindowsルートトレースユーティリティと呼ばれ、コマンドプロンプト（cmd）でtracertコマンドを使用すると、IPデータパックがターゲットにアクセスする際に選択されるパスを確認するために使用できます。   構文        tracert [/d] [/h &lt;maximumhops&gt;] [/j &lt;hostlist&gt;] [/w &lt;timeout&gt;] [/R] [/S &lt;srcaddr&gt;] [/4][/6] &lt;targetname&gt;   パラメータ   説明   /d   中間ルーターのIPアドレスを解析する試みを停止します。これにより、結果を迅速に返すことができます。   /h &lt;maximumhops&gt;   ターゲットのパス中の最大ホップ数を指定します。デフォルトは30ホップです。   /j &lt;hostlist&gt;   回顯要求メッセージにIPヘッダーの「緩やかなソースルート」オプションを使用し、hostlistで指定された中間ターゲットのセットを使用するように指定します（IPv4のみ使用可能）。緩やかなソースルートを使用すると、連続する中間ターゲットは1つ以上のルーターによって分離できます。リストのアドレスまたは名前の数は9を超えることはできません。hostlistはスペースで区切られたIPアドレス（ドット付き10進形式）の一覧です。IPv4アドレスのみでこのパラメータを使用します。   /w &lt;timeout&gt;   回顯要求メッセージに対応する回顯応答メッセージを受信するための待機時間を指定します（ミリ秒単位）。タイムアウト値内に回顯応答メッセージが受信されない場合は、「要求タイムアウト」エラーメッセージが表示されます。デフォルトのタイムアウト値は4000（4秒）です。   /R   ローカルホストに回顯要求メッセージを送信し、ターゲットを中間ターゲットとして使用し、逆ルートをテストするように指定します。   /S &lt;srcaddr&gt;   回顯要求メッセージに使用するソースアドレスを指定します。IPv6のみでこのパラメータを使用します。   /4   このトレースでIPv4のみを使用するように指定します。   /6   このトレースでIPv6のみを使用するように指定します。   &lt;targetname&gt;   ターゲットのIPアドレスまたはホスト名を指定します。   /?   コマンドプロンプトでヘルプを表示します。   例        tracert www.microsoft.com        // www.microsoft.comというホストのパスをトレースtracert /d www.microsoft.com     // www.microsoft.comというホストのパスをトレースし、中間ルーターのIPアドレスを解析しないようにします   14.    startコマンド   指定されたプログラムまたはコマンドを実行するために新しいコマンドプロンプトウィンドウを開始します。   構文        start &lt;\"title\"&gt; [/d &lt;path&gt;] [/i] [{/min | /max}] [&lt;command&gt; [&lt;parameter&gt;... ] | &lt;program&gt; [&lt;parameter&gt;... ]]   パラメータ   説明   &quot;title&quot;   「コマンドプロンプト」ウィンドウのタイトルバーに表示するタイトルを指定します。   /d &lt;path&gt;   開始ディレクトリを指定します。   /i   Cmd.exeの起動環境を新しい「コマンドプロンプト」ウィンドウに渡します。   /i   が指定されていない場合は、現在の環境を使用します。   &lt;command&gt; [&lt;parameter&gt;... ]   起動するコマンドを指定し、   はコマンドパラメータです。   &lt;program&gt; [&lt;parameter&gt;... ]   起動するプログラムを指定し、   はプログラムパラメータです。   /?   コマンドプロンプトでヘルプを表示します。   例        // D:\\workspace\\projectにパスを設定し、Hello Worldを実行する新しいコマンドプロンプトウィンドウを開くstart \"Hello World\" /d D:\\workspace\\project cmd /k echo Hello World   15.    cmdコマンド   Cmd.exeの新しいインスタンスを開始します。 パラメータなしで使用すると、cmdは操作システムのバージョンと著作権情報を表示します。   構文        cmd [/c|/k] [/s] [/q] [/d] [/a|/u] [/t:{&lt;b&gt;&lt;f&gt; | &lt;f&gt;}] [/e:{on | off}] [/f:{on | off}] [/v:{on | off}] [&lt;string&gt;]   パラメータ   説明   /c   指定された   を実行し、コマンドプロセッサーを終了します。   /k   指定された   を実行し、コマンドプロセッサーを実行したままにします。   /s   /c   または   /k   と一緒に使用すると、特殊な非解析ルールをトリガーします。これらのルールは、   の周囲の最初と最後の引用符を削除しますが、コマンドの残りの部分を変更しません。   /q   表示を無効にします。   /d   自動実行コマンドの実行を無効にします。   /a   コマンド出力の形式をアメリカン国家標準協会 (ANSI) に設定します。   /u   コマンド出力の形式をUnicodeに設定します。   /t:{&lt;b&gt;&lt;f&gt; | &lt;f&gt;}   背景色 (b) と前景色 (f) を設定します。   /e:on   コマンド拡張を有効にします。   /e:off   コマンド拡張を無効にします。   /f:on   ファイル名とディレクトリ名の完了を有効にします。   /f:off   ファイル名とディレクトリ名の完了を無効にします。   /v:on   遅延環境変数拡張を有効にします。   /v:off   遅延環境変数拡張を無効にします。   &lt;string&gt;   実行するコマンドを指定します。   /?   コマンドプロンプトでヘルプを表示します。   下表は、   と   に使用できる値の有効な16進数を示しています。   値   色   0   黒   1   青   2   緑   3   Aqua   4   赤   5   紫   6   黄   7   白   8   灰色   9   淡い青   a   淡い緑   b   淡い青緑   c   淡い赤   d   淡い紫   e   淡い黄   F   明るい白   例        // もし出力を別のコマンドの入力にリダイレクトする場合は、パイプ（|）文字を使用します。 例：&lt;command1&gt; | &lt;command2&gt;// もし&lt;string&gt;に複数のコマンドを使用する場合は、コマンド区切り文字&amp;&amp;を使用してそれらを分離します。 例：&lt;command1&gt;&amp;&amp;&lt;command2&gt;&amp;&amp;&lt;command3&gt;// もし提供されたディレクトリパス、ファイル、または情報にスペースが含まれている場合、それを二重引用符（\"）で囲み、例：\"Computer Name\"。 例：mkdir Test&amp;&amp;mkdir \"Test 2\"&amp;&amp;move \"Test 2\" Test   16.    echoと@echoコマンド   メッセージを表示するか、コマンド表示機能をオンまたはオフにします。 パラメータなしで使用すると、echoは現在の表示設定を表示します。echoと@echoコマンドの違い：@を付けると表示されません   構文        echo [&lt;message&gt;]echo [on | off]   パラメータ   説明   [on | off]   コマンド表示機能をオンまたはオフにします。デフォルトではコマンド表示機能がオンになっています。   &lt;message&gt;   画面に表示するテキストを指定します。   /?   コマンドプロンプトでヘルプを表示します。   例        echo Hello World// 以下のように表示されます// $ D:\\workspace\\scripts&gt;echo Hello World// $ Hello World@echo Hello World// 以下のように表示されます// $ Hello World@echo off  // バッチファイル内のすべてのコマンド（echo offコマンドを含む）を表示しない@echo on   // バッチファイル内のコマンドを表示する   注記   当   echo   が無効になっている場合、   echo &lt;message&gt;   コマンドは   echo   が無効になっている場合にのみ使用します。 もし   echo   が無効になっている場合、   echo &lt;message&gt;   コマンドは   echo   が無効になっている場合にのみ使用します。   無効になっている場合、コマンドプロンプトは「コマンドプロンプト」ウィンドウに表示されません。 コマンドプロンプトを表示するには、   echo on   と入力してください。   バッチファイルで使用する場合、   echo on   と   echo off   はコマンドプロンプトの設定に影響を与えません。   もし   echo   がバッチファイルで空の変数を使用する場合、「表示が無効になっています」と表示されます。 このメッセージを表示しないようにするには、変数と   echo   の間にコロン（:）を配置します。 例   echo:%var%   。   もしバッチファイルで特定のコマンドを表示しないようにする場合は、そのコマンドの前に（@）記号を付けます。 もしバッチファイル内のすべてのコマンドを表示しないようにする場合は、ファイルの先頭に   echo off   コマンドを含めます。   もしバッチスクリプトで感嘆符（!）を表示する場合は、単語またはフレーズの後にキャレットを付け、その後に感嘆符を付け、それを二重引用符で囲みます（Hello World^!）。 または、二重キャレット（^^）を使用して二重引用符を使用せずに（Hello World^^!）を実現できます。   もし   echo   を使用する場合に縦棒（|）、アンド（&amp;）、またはリダイレクト文字（   &lt;   または   &gt;   ）を表示する場合は、その文字の前にキャレット（^）を付けます。 例   ^|   、   ^&amp;   、   ^&gt;   、または   ^&lt;   。 キャレットを表示するには、連続してキャレットを入力します（^^）。   17.    setコマンド   cmd.exe環境変数を表示、設定、または削除します。 パラメータなしで使用すると、setは現在の環境変数設定を表示します。   構文        set [&lt;variable&gt;=[&lt;string&gt;]]set [/p] &lt;variable&gt;=[&lt;promptString&gt;]set /a &lt;variable&gt;=&lt;expression&gt;   パラメータ   説明   &lt;variable&gt;   設定または変更する環境変数を指定します。   &lt;string&gt;   指定された環境変数に関連付ける文字列を指定します。   /p   &lt;variable&gt;   の値をユーザーからの1行入力に設定します。   &lt;promptstring&gt;   ユーザーに入力を促すメッセージを指定します。このパラメータは   /p   パラメータと一緒に使用する必要があります。   /a   &lt;string&gt;   を計算された数値式に設定します。   &lt;expression&gt;   数値式を指定します。   /?   コマンドプロンプトでヘルプを表示します。   例        set /p text=入力してください：        // 入力してくださいはplaceholderで、入力文字後に変数textが入力内容になる.echo %text%set /p isSave=ファイルとして保存しますか？(y/n)echo %isSave%   18.    ifコマンド   バッチプログラムで条件処理を実行します。   構文        if [not] ERRORLEVEL &lt;number&gt; &lt;command&gt; [else &lt;expression&gt;]if [not] &lt;string1&gt;==&lt;string2&gt; &lt;command&gt; [else &lt;expression&gt;]if [not] exist &lt;filename&gt; &lt;command&gt; [else &lt;expression&gt;]   もしコマンド拡張が有効になっている場合は、以下の構文を使用します。   if [/i] &lt;string1&gt; &lt;compareop&gt; &lt;string2&gt; &lt;command&gt; [else &lt;expression&gt;]if cmdextversion &lt;number&gt; &lt;command&gt; [else &lt;expression&gt;]if defined &lt;variable&gt; &lt;command&gt; [else &lt;expression&gt;]   パラメータ   説明   not   条件がfalseの場合にコマンドを実行するように指定します。   errorlevel &lt;number&gt;   コマンドが実行された直前のプログラムがnumber以上の終了コードを返した場合にtrue条件を指定します。   &lt;command&gt;   上記の条件が満たされた場合に実行するコマンドを指定します。   &lt;string1&gt;==&lt;string2&gt;   条件がstring1とstring2が同じ場合にtrue条件を指定します。これらの値は文字列またはバッチ変数（例：%1）にすることができ、引用符を使用する必要はありません。   exist &lt;filename&gt;   指定されたファイル名が存在する場合にtrue条件を指定します。   &lt;compareop&gt;   3文字比較演算子を指定します。以下のいずれかを含めることができます。   EQU - 等しい   NEQ - 等しくない   LSS - より小さい   LEQ - 以下   GTR - より大きい   GEQ - 以上   /i   文字列比較を無視するように強制します。 これらの比較は一般的であり、string1とstring2が数字のみで構成されている場合、数字に変換されて数値比較が実行されます。   cmdextversion &lt;number&gt;   コマンド拡張機能に関連付けられた内部バージョン番号が指定された数値以上の場合にtrue条件を指定します。最初のバージョンは1です。 大量の機能強化を追加すると、1ずつ増加します。 コマンド拡張を無効にすると、cmdextversion条件は決してtrueになりません。   defined &lt;variable&gt;   変数が定義されている場合にtrue条件を指定します。   &lt;expression&gt;   コマンド行コマンドと、else句に渡すその他のパラメータを指定します。   /?   コマンドプロンプトでヘルプを表示します。   例        if not exist product.dat echo 無法找到 product.dat 文件if exist product.dat (  del product.dat) ELSE (  echo 無法找到 product.dat 文件)   注記   もしif句で指定された条件がtrueの場合、その条件の後にコマンドが実行されます。条件がfalseの場合、if句のコマンドは無視され、そのコマンドはelse句で指定されたコマンドを実行します。   プログラムが停止すると、終了コードを返します。 終了コードを条件に使用するには、errorlevelパラメータを使用します。   %errorlevel%：拡張されたERRORLEVEL環境変数の現在の値の文字列表現。 この変数は、既存のERRORLEVEL環境変数が存在する場合にERRORLEVEL値を取得します。   %cmdcmdline%：Cmd.exeが実行される前にCmd.exeに渡された元のコマンドラインを拡張します。 これは、既存のCMDCMDLINE環境変数が存在する場合にCMDCMDLINE値を取得します。   %cmdextversion%：cmdextversionの現在の値の文字列表現を拡張します。 これは、既存のCMDEXTVERSION環境変数が存在する場合にCMDEXTVERSION値を取得します。   必ずifの後に実行されるコマンドと同じ行にelse句を使用します。   19. 補助記号 &#39;|&#39;   &quot;|&quot;cmdコマンドで|は前の出力を後の入力にする   netstat -ano|find \"192.168.1.10\"  // 特定のIPのネットワーク接続とプロセスIDを検索   20 リダイレクト出力記号&gt; &gt;&gt;   コマンドウィンドウからの出力をファイルに保存するには、コマンドウィンドウからの出力をファイルにリダイレクトします。   echo hello &gt;c:\\1.txt   // 1.txtのファイル内容を先に空にしてからhelloを書き込む   cmd &gt;&gt;はファイルの末尾に出力を追加します   echo hello &gt;&gt;c:\\1.txt  // 1.txtファイルの末尾にhelloを追加   21. リダイレクト入力記号&lt; &lt;&lt;   cmd &lt; file     // cmdコマンドをfileから読み込むcmd &lt;&lt; text    // コマンドラインから入力を読み込み、textと同じ行が終了するまで続けます。// 二重引用符で入力を囲む場合を除き、このモードは入力内容にシェル変数置換を行います。// もし&lt;&lt;-を使用する場合、次の入力行の先頭のタブを無視します。終了行はtextと同じ内容で、タブの後にtextと同じ内容を付けることができます。cmd &lt;&lt;&lt; word   // word（ファイルではなく）と後の改行をcmdに入力します。cmd &lt;&gt; file    // 読み書きモードでファイルfileをリダイレクトし、ファイルfileを破壊しません。アプリケーションがこの機能を利用する場合にのみ意味があります。cmd &gt;| file    // 機能は&gt;と同じですが、noclobber時にもfileファイルを上書きします。注意は|ではなく、一部の本では!を使用しますが、現在はcshでのみ使用されます。","categories":["scripts"]},{"title":"運用の未来はプラットフォームエンジニアリング","url":"/ja/2023/07/19/platform-engineering.html","content":"","categories":["reprints"]},{"title":"ソフトウェアがソフトウェアを食べる、プログラミングの仕事は増えるのか？","url":"/ja/2023/07/07/will-programmers-increase.html","content":"","categories":["reprints"]},{"title":"ビッグプレートチキン","url":"/ja/2022/08/16/big-plate-chicken.html","content":"材料   材料   分量   鶏肉   1羽   ジャガイモ   2個   ピーマン   2個   油   適量   砂糖   適量   長ネギ   適量   生姜   適量   ニンニク   適量   唐辛子   適量   花椒   適量   八角   適量   月桂葉   適量   桂皮   適量   塩   適量   醤油   適量   濃口醤油   適量   ラー油   適量   料理酒   適量   作り方   画像   手順   1.    材料を準備する   2.    調味料を準備：ニンニク、生姜、長ネギ、唐辛子、花椒、八角、月桂葉、桂皮   3.    鶏肉を湯通しし、生姜と料理酒を加える   4.    ジャガイモを乱切りにする   5.    鶏肉のアクを取り除き、引き上げる   6.    油を強火で熱し、砂糖または氷砂糖を溶かす   7.    鶏肉を加えて炒め、香りを立てる   8.    調味料を加えて炒める   9.    塩、醤油、濃口醤油、ラー油、料理酒を加えて均一に炒める   10.    ジャガイモを加えて炒め、ジャガイモが浸るくらいの水を加えて蓋をする   11.    途中でピーマンを加え、強火で汁をとばす   12.    盛り付ける","categories":["cookbooks"]},{"title":"Language Tags","url":"/ja/2022/04/10/language-tags.html","content":"Language Tag   ISO 639-1   言語   地域   説明   ar-SA   ar   Arabic   Saudi Arabia   サウジアラビアのアラビア語   bn-BD   bn   Bangla   Bangladesh   バングラデシュのベンガル語   bn-IN   bn   Bangla   India   インドのベンガル語   cs-CZ   cs   Czech   Czech Republic   チェコ共和国のチェコ語   da-DK   da   Danish   Denmark   デンマークのデンマーク語   de-AT   de   German   Austria   オーストリアのドイツ語   de-CH   de   German   Switzerland   スイスのドイツ語   de-DE   de   German   Germany   ドイツの標準ドイツ語   el-GR   el   Greek   Greece   ギリシャの現代ギリシャ語   en-AU   en   English   Australia   オーストラリア英語   en-CA   en   English   Canada   カナダ英語   en-GB   en   English   United Kingdom   イギリス英語   en-IE   en   English   Ireland   アイルランド英語   en-IN   en   English   India   インド英語   en-NZ   en   English   New Zealand   ニュージーランド英語   en-US   en   English   United States   アメリカ英語   en-ZA   en   English   South Africa   南アフリカ英語   es-AR   es   Spanish   Argentina   アルゼンチンのスペイン語   es-CL   es   Spanish   Chile   チリのスペイン語   es-CO   es   Spanish   Columbia   コロンビアのスペイン語   es-ES   es   Spanish   Spain   スペイン（中北部）のカスティーリャ語   es-MX   es   Spanish   Mexico   メキシコのスペイン語   es-US   es   Spanish   United States   アメリカのスペイン語   fi-FI   fi   Finnish   Finland   フィンランドのフィンランド語   fr-BE   fr   French   Belgium   ベルギーのフランス語   fr-CA   fr   French   Canada   カナダのフランス語   fr-CH   fr   French   Switzerland   スイスのフランス語   fr-FR   fr   French   France   フランスの標準フランス語   he-IL   he   Hebrew   Israel   イスラエルのヘブライ語   hi-IN   hi   Hindi   India   インドのヒンディー語   hu-HU   hu   Hungarian   Hungary   ハンガリーのハンガリー語   id-ID   id   Indonesian   Indonesia   インドネシアのインドネシア語   it-CH   it   Italian   Switzerland   スイスのイタリア語   it-IT   it   Italian   Italy   イタリアの標準イタリア語   ja-JP   ja   Japanese   Japan   日本語（日本）   ko-KR   ko   Korean   Republic of Korea   韓国の韓国語   nl-BE   nl   Dutch   Belgium   ベルギーのオランダ語   nl-NL   nl   Dutch   The Netherlands   オランダの標準オランダ語   no-NO   no   Norwegian   Norway   ノルウェーのノルウェー語   pl-PL   pl   Polish   Poland   ポーランドのポーランド語   pt-BR   pt   Portuguese   Brazil   ブラジルのポルトガル語   pt-PT   pt   Portuguese   Portugal   ポルトガルのヨーロッパポルトガル語   ro-RO   ro   Romanian   Romania   ルーマニアのルーマニア語   ru-RU   ru   Russian   Russian Federation   ロシアのロシア語   sk-SK   sk   Slovak   Slovakia   スロバキアのスロバキア語   sv-SE   sv   Swedish   Sweden   スウェーデンのスウェーデン語   ta-IN   ta   Tamil   India   インドのタミル語   ta-LK   ta   Tamil   Sri Lanka   スリランカのタミル語   th-TH   th   Thai   Thailand   タイのタイ語   tr-TR   tr   Turkish   Turkey   トルコのトルコ語   zh-CN   zh   Chinese   China   中国本土、簡体字   zh-HK   zh   Chinese   Hong Kong   香港、繁体字   zh-TW   zh   Chinese   Taiwan   台湾、繁体字","categories":["notes"]},{"title":"NPM でパッケージの更新バージョンを確認する方法","url":"/ja/2021/10/22/npm-check-update.html","content":"まず更新可能なパッケージを確認   $ npm outdated   xxx パッケージの最新バージョン情報を確認   $ npm view xxx versions  or$ npm info xxx   npm で指定バージョンのパッケージをインストール   $ npm i xxx@1.11.1 --save-dev   npm で指定バージョンのパッケージをアップグレード   $ npm update xxx --save-dev   xxx パッケージの最新バージョンをインストール   $ npm i xxx@latest --save-dev   npm でインストール済みパッケージのリストを確認   $ npm list   npm で特定のパッケージのインストール済みバージョン情報を確認   $ npm list xxx   npm-check で更新パッケージを確認   $ npm install -g npm-check  # まず npm-check をグローバルにインストール$ npm-check -u              # 現在のプロジェクトのパッケージ更新を確認$ npm-check -u -g           # グローバルにインストールされたパッケージの更新を確認   すべての更新がリスト表示され、上下キーで制御し、スペースで選択・選択解除し、選択完了後エンターキーを押します。","categories":["notes"]},{"title":"シイタケとラムチョップの煮込み","url":"/ja/2021/10/19/stewed-lamb-chop-with-mushroom.html","content":"材料   材料   量   ラムチョップ   6本   シイタケ   300グラム   油   多め   塩   適量   唐辛子   適量   花椒   適量   八角   適量   クミン   適量   ラムチョップは必ず下茹でしてアクを取ること。そうしないと臭みが強くなる。   作り方の手順   画像   手順   1.    材料を準備する   2.    調味料皿：唐辛子、花椒、八角、クミン   3.    ラムチョップを水に浸して血抜きする   4.    ぬるま湯で下茹でし、取り出す   5.    調味料と一緒に中火でラムチョップを炒める   6.    水を加え、切ったシイタケと塩を加える   7.    中火で30分煮込む   8.    盛り付ける","categories":["cookbooks"]},{"title":"ピーマンと豚肉の炒め物","url":"/ja/2021/09/05/green-pepper-parch-meat.html","content":"材料   材料   量   ピーマン   300グラム   豚肉   120グラム   油   適量   ニンニク   適量   塩   適量   醤油   適量   濃口醤油   少量   料理酒   適量   肉を柔らかく、ピーマンを美味しく仕上げるコツ：強火ではなく、全工程中火で調理すること。   作り方の手順   画像   手順   1.    材料を準備する   2.    調味料を準備：ニンニク、唐辛子   3.    ピーマンを細切りにする   4.    豚肉を細切りにし、水気を取って、でんぷん・醤油・料理酒を加える   5.    粘り気が出るまで混ぜて漬けておく   6.    油を中火で熱し、調味料を入れて香りを出す   7.    豚肉を入れて炒める   8.    ピーマンを加えて均一に炒める   9.    塩と濃口醤油を加えて炒める   10.    仕上げる   11.    盛り付ける","categories":["cookbooks"]},{"title":"トマトとソーセージの卵炒め","url":"/ja/2021/06/14/scrambled-egg-with-tomato-sausage.html","content":"材料   材料   量   トマト   250グラム   卵   2個   ソーセージ   60グラム   油   適量   乾燥唐辛子   適量   塩   適量   氷砂糖   適量   作り方の手順   画像   手順   1.    材料を準備する   2.    トマトの底を切り落とし、湯むきしやすくする   3.    沸騰したお湯でトマトの皮が割れるまで茹でる   4.    トマトの皮をむく   5.    トマトを小さく切る   6.    卵を割り入れ、ネギのみじん切りと混ぜる   7.    ソーセージをスライスし、乾燥唐辛子と一緒に用意する   8.    フライパンを熱し、油が煙を上げたら卵液を入れる   9.    ソーセージと唐辛子を加えて均一に炒める   10.    トマトを加えて均一に炒め、塩を加える（トマトはヘラで潰す）   11.    仕上げる   12.    盛り付ける","categories":["cookbooks"]},{"title":"JavaScript ドキュメントコメント規約","url":"/ja/2021/04/28/javascript-document-convertions.html","content":"Type 構文   型名   構文例   説明   Symbol name   {string}, {myNamespace.MyClass}   シンボル名を指定します。   Multiple types   {number|boolean}   値が複数の型のいずれかであることを意味し、&quot;|&quot; で型のリストを区切ります。   Arrays   {string[]}, {MyClass[]}   string[]    は文字列配列、       {MyClass[]}    は MyClass インスタンスの配列を表します。   Objects   {a: number, b: string, c}     // or     {object} myObj     {number} myObj.a     {string} myObj.b     {any} myObj.c   オブジェクト &quot;MyObj&quot; に &#39;a&#39; (数値)、&#39;b&#39; (文字列)、&#39;c&#39; (任意型) のプロパティがあることを示します。    プロパティが既知のオブジェクトには Closure Compiler 構文で型を記述できます。    各プロパティを個別に記述することもでき、詳細な説明が可能です。   Nullable type   {?number}   指定した型または null であることを示します。   Non-nullable type   {!number}   指定した型であり、null にはなりません。   Variable number of that type   @param {...number} num   可変個数の引数を受け取ることを示し、型を指定します。   Optional parameter   @param {number} [foo=1]   パラメータがオプションであること、またデフォルト値も指定できます。   Callbacks   @callback myCallback     @param {number} x - ...   @callback タグでコールバックを示します。    @typedef タグと似ていますが、コールバックの型は常に &quot;function&quot; です。   Type definitions   @typedef {object} PropertiesHash     @property {string} id     @property {string} name     @property {number} age   @typedef タグで複雑な型を記述できます。   よく使うコメントキーワード   コメント名   別名   説明   @param   @argument, @arg   関数に渡されるパラメータを記述します。   @return   @returns   関数の戻り値を記述します。   @method   @function, @func   関数やメソッドを記述します。   @typedef   独自型を記述します。   @property   @prop   オブジェクトのプロパティを記述します。   @callback   コールバック関数を記述します。   @author   プロジェクトの作者を指定します。   @copyright   ファイルの著作権情報を記述します。   @description   識別子の説明を記述します。   @param   関数に渡されるパラメータを記述します。   別名： @arg，@argument   /*** @param {string} somebody - Somebody's name.*/function sayHello(somebody) {alert('Hello ' + somebody);}   パラメータがオブジェクトで特定のプロパティを持つ場合：   /*** Assign the project to an employee.* @param {object} employee            - The employee who is responsible for the project.* @param {string} employee.name       - The name of the employee.* @param {string} employee.department - The employee's department.*/Project.prototype.assign = function(employee) { ... };   パラメータのプロパティ値が配列の場合：   /*** Assign the project to a list of employees.* @param {object[]} employees            - The employees who are responsible for the project.* @param {string} employees[].name       - The name of an employee.* @param {string} employees[].department - The employee's department.*/Project.prototype.assign = function(employees) { ... };   オプションパラメータとデフォルト値：   /*** @param {string} [somebody=John Doe] - Somebody's name.*/function sayHello(somebody) {if (!somebody) {  somebody = 'John Doe';}alert('Hello ' + somebody);}   1つまたは複数の型を許容する場合：   /*** @param {string|string[]} [somebody=John Doe] - Somebody's name, or an array of names.*/function sayHello(somebody) {if (!somebody) {  somebody = 'John Doe';} else if (Array.isArray(somebody)) {  somebody = somebody.join(', ');}alert('Hello ' + somebody);}   パラメータがコールバック関数の場合：   /*** @param {requestCallback} cb*//*** @callback requestCallback* @param {number} responseCode* @param {string} responseMessage*/function doSomethingAsynchronously(cb) { ... }   @return   関数の戻り値を記述します。   別名： @returns   /*** Returns the sum of a and b* @param {number} a* @param {number} b* @param {boolean} retArr If set to true, the function will return an array* @return {number|array} Sum of a and b or an array that contains a, b and the sum of a and b.*/function sum(a, b, retArr) {if (retArr) {  return [a, b, a + b];}return a + b;}   @method   関数やメソッドを記述します。   別名： @function, @func   /*** Returns the sum of a and b* @method sum* @param {number} a* @param {number} b* @return {number} Sum of a and b or an array that contains a, b and the sum of a and b.*/function sum(a, b) {return a + b;}   @typedef   独自型を記述します。   /*** The complete Triforce, or one or more components of the Triforce.* @typedef {Object} WishGranter~Triforce* @property {boolean} hasCourage - Indicates whether the Courage component is present.* @property {boolean} hasPower   - Indicates whether the Power component is present.* @property {boolean} hasWisdom  - Indicates whether the Wisdom component is present.*//*** A class for granting wishes, powered by the Triforce.* @class* @param {...WishGranter~Triforce} triforce - One to three {@link WishGranter~Triforce} objects* containing all three components of the Triforce.*/function WishGranter() {}   @property   オブジェクトのプロパティを記述します。   /*** @namespace* @property {object}  defaults               - The default values for parties.* @property {number}  defaults.players       - The default number of players.* @property {string}  defaults.level         - The default level for the party.* @property {object}  defaults.treasure      - The default treasure.* @property {number}  defaults.treasure.gold - How much gold the party starts with.*/var config = {defaults: {  players: 1,  level: 'beginner',  treasure: {    gold: 0  }}};   @callback   コールバック関数を記述します。   /*** @class*/function Requester() {}   /**   Send a request.   @param {Requester~requestCallback} cb - The callback that handles the response.   /Requester.prototype.send = function(cb) {// code};   /**   This callback is displayed as part of the Requester class.   @callback Requester~requestCallback   @param {number} responseCode   @param {string} responseMessage   /   @author   プロジェクトの作者を指定します。   /*** @author Zane Liu &lt;liuzane@example.com&gt;*/function MyClass() {}   @copyright   著作権情報を記述します。   /*** @file This is my cool script.* @copyright Zane Liu 2021*/   @description   識別子の説明を記述します。   /*** @param {number} a* @param {number} b* @returns {number}* @description Add two numbers.*/function add(a, b) {return a + b;}","categories":["javascript"]},{"title":"スパイシーエビ炒め","url":"/ja/2020/12/27/fried-shrimp-with-chilli.html","content":"材料   材料   量   クルマエビ   10尾   油   適量   ネギ   適量   ニンニク   適量   ショウガ   適量   唐辛子   適量   ローレル   適量   塩   適量   水   半カップ   醤油   適量   作り方の手順   画像   手順   1.    材料を準備する   2.    ネギはぶつ切り、ショウガはスライス、ニンニクはみじん切りにして皿に盛る   3.    調味液：水、醤油、塩、ローレル   4.    エビを洗い、背ワタを取る   5.    フライパンに油を熱し、エビを入れて両面がきれいな赤色になりエビ油が出たら取り出す（ヘラで軽く押すと赤い油がよく出る）   6.    エビ油の残ったフライパンにネギとショウガを入れて香りを出す   7.    炒めたエビを戻し、調味液を加える   8.    強火で煮詰める   9.    盛り付ける","categories":["cookbooks"]},{"title":"localStorage","url":"/ja/2020/12/10/local-storage.html","content":"setStorage(key, data, hours)   localStorage を設定します```javascript/**   @method setStorage   @param {string} key   @param {any} data   @param {number} hours   @return {boolean}   /function setStorage(key, data, hours) { let expires;    if (!key || !data) {   console.error(&#39;[localStorage Error]: Key and Data is a must parameter&#39;);   return false; }    expires = hours ? new Date().getTime() + 1000 * 60 * 60 * hours : new Date(0).getTime(); localStorage.setItem(key, JSON.stringify({ data, expires }));    return true;}   getStorage(key)   localStorage を取得します```javascript/**   @method getStorage   @param {string} key   @return {boolean|null}   /function getStorage(key) { let data, nowTime = new Date().getTime();    if (!key) console.error(&#39;[localStorage Error]: Key is a must parameter&#39;);    try {   data = JSON.parse(localStorage.getItem(key)); } catch (error) {   return localStorage.getItem(key); }    if (!data) return null;    if (!Boolean(data.expires) || data.expires &gt;= nowTime) {   return data.data; } else {   localStorage.removeItem(key);   return null; }}   clearStorage(key)   localStorage をクリアします```javascript/**   @method clearStorage   @param {string} key   /function clearStorage(key) { if (key) {   localStorage.removeItem(key); } else {   localStorage.clear(); }}```","categories":["javascript"]},{"title":"Cookies","url":"/ja/2020/12/10/cookies.html","content":"setCookie(params)   Cookieを設定する```javascript/**   @method setCookie   @param {object} options   @param {string} options.key   @param {string} options.value   @param {number} [options.hours]   @param {string} [options.path]   - path: &#39;/&#39;   @param {string} [options.domain] - domain: document.domain   /function setCookie(options) { let time = new Date(), expires = &#39;&#39;, path = &#39;&#39;, domain = &#39;&#39;;    if (!options.key || !options.value) {   console.error(&#39;[Cookie Error]: key, value must be set.&#39;);   return; }    if (options.hours) {   try {   Number(options.hours);      } catch (e) {   console.error(&apos;[Cookie Error]: expires must is number.&apos;);      }      time.toGMTString(time.setTime(time.getTime() + 1000 * 60 * 60 * options.hours));   expires = &#39;expires=&#39; + time + &#39;;&#39;; }    if (options.path) path = &#39;path=&#39; + options.path + &#39;;&#39;;    if (options.domain) domain = &#39;domain=&#39; + options.domain;    document.cookie = options.key + &#39;=&#39; + options.value + &#39;;&#39; + expires + path + domain;}   getCookie(key)   Cookieを取得する```javascript/**   @method getCookie   @param {string} key    @return {undefined|string|null}   /function getCookie(key) { if (!key) {   console.error(&#39;[Cookie Error]: key is &#39; + (typeof key) + &#39;.&#39;);   return; } const regexp = new RegExp(&#39;(^|; )&#39; + key + &#39;=.*?(;|$)&#39;); const result = document.cookie.match(regexp); const value = result ? result[0].replace(/[; ]/g, &#39;&#39;).split(&#39;=&#39;)[1] : null; return value;}   deleteCookie(param)   ```javascript/**   @method deleteCookie   @param {string|object} param   @param {string} param.key   @param {string} [param.path]   @param {string} [param.domain]   @return {undefined|string|null}   /function deleteCookie(param) { const options = typeof param === &#39;object&#39; ? param : {}; const key = typeof param === &#39;string&#39; ? param : options.key;    if (!key) {   console.error(&#39;[Cookie Error]: key is &#39; + (typeof key) + &#39;.&#39;);   return; } if (options.path) path = &#39;path=&#39; + options.path + &#39;;&#39;; if (options.domain) domain = &#39;domain=&#39; + options.domain + &#39;;&#39;;    const regexp = new RegExp(&#39;(^|; )&#39; + key + &#39;=.*?(;|$)&#39;); const result = document.cookie.match(regexp); const item = result ? result[0].replace(/[; ]/g, &#39;&#39;) : &#39;&#39;; const time = new Date(); time.toGMTString(time.setTime(0)); document.cookie = item + &#39;;expires=&#39; + time + &#39;;&#39; + options.path + options.domain;}   clearCookie(params)   Cookieを全て削除する```javascript/**   @method clearCookie   @param {object} [options]   @param {string} [options.path]   @param {string} [options.domain]   /function clearCookie(options) { let arr = document.cookie.split(&#39;;&#39;), path = &#39;&#39;, domain = &#39;&#39;;    if (!options) options = {}; if (options.path) path = &#39;path=&#39; + options.path + &#39;;&#39;; if (options.domain) domain = &#39;domain=&#39; + options.domain + &#39;;&#39;;    for (let i = 0; i &lt; arr.length; i++) {   let key = arr[i].substring(0, arr[i].indexOf(&#39;=&#39;));   document.cookie = key + &#39;=0;expires=Thu, 01 Jan 1970 00:00:00 GMT;&#39; + path + domain; }}```","categories":["javascript"]},{"title":"JavaScript Utility Functions","url":"/ja/2020/12/10/javascript-utility-functions.html","content":"メソッド集：   メソッド名   説明   typeOf   データ型を検証します。   deepCopy   ディープコピー。   uuid   UUID を生成します。   download   ダウンロード。   getUrlArg   名前でパスパラメータを取得します。   getUrlQuery   パスパラメータをオブジェクト形式に変換します。   setUrlQuery   オブジェクト形式をパスパラメータに変換します。   getDeepValueOfObject   オブジェクトの深い値を取得します。   toThousands   千位区切り形式に変換します。   typeOf(anything)   データ型を検証します。   戻り値はすべて文字列です   enum TypeValue {Boolean = 'boolean',Number = 'number',String = 'string',Function = 'function',Array = 'array',Date = 'date',RegExp = 'regexp',Undefined = 'undefined',Null = 'null',Object = 'object'}   const TypeMap: Record&lt;string, TypeValue&gt; = {  &#39;[object Boolean]&#39;: TypeValue.Boolean,   &#39;[object Number]&#39;: TypeValue.Number,  &#39;[object String]&#39;: TypeValue.String,  &#39;[object Function]&#39;: TypeValue.Function,  &#39;[object Array]&#39;: TypeValue.Array,  &#39;[object Date]&#39;: TypeValue.Date,  &#39;[object RegExp]&#39;: TypeValue.RegExp,  &#39;[object Undefined]&#39;: TypeValue.Undefined,  &#39;[object Null]&#39;: TypeValue.Null,  &#39;[object Object]&#39;: TypeValue.Object};   /**   Validate data type.   @method typeOf   @param {any} obj   @return {string}   /export function typeOf(obj: unknown): TypeValue {const toString = Object.prototype.toString;return TypeMap[toString.call(obj)];}   console.log(typeOf(&#39;abc&#39;)); // stringconsole.log(typeOf([&#39;a&#39;, &#39;b&#39;, &#39;c&#39;])); // arrayconsole.log(typeOf({ a: 1, b: 2, c: 3 })); // object   * #### deepCopy(data)ディープコピー。&gt; このメソッドは `typeOf()` メソッドと組み合わせて使用します```typescript/** * Data deep copy. * @method deepCopy * @param {array|object} data * @return {array|object} */export function deepCopy&lt;T&gt;(data: T): T {  const type: TypeValue = typeOf(data);  switch (type) {    case TypeValue.Array: {      const array: unknown[] = [];      for (let index = 0; index &lt; (data as unknown[]).length; index++) {        array.push(deepCopy(data[index]));      }      return array as T;    }    case TypeValue.Object: {      const object: Record&lt;string, unknown&gt; = {};      for (const key in data) {        if (Object.prototype.hasOwnProperty.call(data, key)) {          object[key] = deepCopy(data[key]);        }      }      return object as T;    }    default:      return data;  }}const obj1 = { a: 1, b: 2, c: 3 };const obj2 = deepCopy(obj1);console.log(obj1 === obj2); // false   formatDate(date, format)   日付フォーマット。   /*** Time and date formatting.* @method formatDate* @param {string|date} time* @return {string}*/export function formatDate(time: string | Date, format = 'yyyy-MM-dd hh:mm:ss'): string {const date: Date = time ? new Date(time) : new Date();const dateValues: Record&lt;string, number&gt; = {  'M+': date.getMonth() + 1, // 月  'd+': date.getDate(), // 日  'h+': date.getHours(), // 時  'm+': date.getMinutes(), // 分  's+': date.getSeconds(), // 秒  'q+': Math.floor((date.getMonth() + 3) / 3), // 季度  'S': date.getMilliseconds() // ミリ秒};if (/(y{4})/.test(format)) {  format = format.replace(RegExp.$1, (date.getFullYear() + '').substr(4 - RegExp.$1.length));}for (const key in dateValues) {  if (new RegExp('(' + key + ')').test(format)) {    const value = dateValues[key].toString();    format = format.replace(RegExp.$1, (RegExp.$1.length === 1) ? value : ('00' + value).substr(value.length));  }}return format;}   console.log(formatDate(&#39;2024-05-01&#39;)); // &#39;2024-05-01 00:00:00&#39;console.log(formatDate(&#39;2024-05-01&#39;, &#39;yyyy-MM-dd&#39;)); // &#39;2024-05-01&#39;   * #### uuid()UUID を生成します。```javascript/** * @method uuid * @return {string} */function uuid() {  return &apos;xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx&apos;.replace(/[xy]/g, function (c) {    const r = Math.random() * 16 | 0;    const v = c === &apos;x&apos; ? r : (r &amp; 0x3 | 0x8);    return v.toString(16);  });}console.log(uuid()); // xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx   download(url, name)   ダウンロード。/*** @method download* @param {string} url* @param {string} name*/function download(url, name) {const aDom = document.createElement('a');aDom.download = name;aDom.href = url;document.body.appendChild(aDom);aDom.click();aDom.remove();}   console.log(download(&#39;word.docx&#39;, &#39;   https://www.test.com/word.docx&#39;   )); // word.docx   * #### getUrlArg(name)名前でパスパラメータを取得します。```javascript/** * @method getUrlArg * @param {string} name * @return {string} */function getUrlArg(name) {  const search = window.location.search;  const regexp = new RegExp(`(^|&amp;)${name}=([^&amp;]*)(&amp;|$)`);  const arg = search.substr(1).match(regexp);  return arg ? arg[2] : &apos;&apos;;}   getUrlQuery(url)   パスパラメータをオブジェクト形式に変換します。/*** @method getUrlQuery* @param {string} url* @return {object}*/function getUrlQuery(url) {const query = url.substring(url.indexOf('?') + 1).split('&amp;');const params = {};query.forEach(item =&gt; {  const key_value = item.split('=');  params[key_value[0]] = key_value[1];});return params;}   const url = &#39;   https://www.test.com/query?a=1&amp;b=2&amp;c=3&#39;   ;console.log(getUrlQuery(url)); // { a: 1, b: 2, c: 3 }   * #### setUrlQuery(url)オブジェクト形式をパスパラメータに変換します。```javascript/** * @method setUrlQuery * @param {object} params * @return {string} */function setUrlQuery(params) {  const querys = [];  for (const key in params) {    if (params.hasOwnProperty(key)) {      querys.push(key + &apos;=&apos; + params[key]);    }  }  return querys.join(&apos;&amp;&apos;);}const params = { a: 1, b: 2, c: 3 };console.log(setUrlQuery(params)); // &apos;a=1&amp;b=2&amp;c=3&apos;   getDeepValueOfObject(object, keyPath, defaultValue)   オブジェクトの深い値を取得します。   /*** @method getDeepValueOfObject* @param {object|array} object* @param {string} keyPath* @param {any} [defaultValue]* @return {any}*/function getDeepValueOfObject(object, keyPath, defaultValue) {const isString = typeof keyPath === 'string';if (!isString) {  console.warn('[getDeepValueOfObject warn]: keyPath is not a string, type ' + typeof keyPath);}if (object &amp;&amp; keyPath &amp;&amp; isString) {  const keys = keyPath.split('.');  let value = object;  for (let index = 0; index &lt; keys.length; index++) {    const key = keys[index];    if (value[key] !== undefined) {      value = value[key];    } else {      value = defaultValue;    }  }  return value;} else {  return defaultValue;}}   const obj = {  foo: {    number: 3  },  bar: 2,};const arr = [ obj ];   console.log(getDeepValueOfObject(obj, &#39;foo.number&#39;)); // 3console.log(getDeepValueOfObject(obj, &#39;bar.number&#39;)); // undefinedconsole.log(getDeepValueOfObject(obj, &#39;bar.number&#39;, &#39;default&#39;)); // &#39;default&#39;console.log(getDeepValueOfObject(obj, &#39;&#39;)); // undefinedconsole.log(getDeepValueOfObject(obj, &#39;&#39;, &#39;default&#39;)); // &#39;default&#39;console.log(getDeepValueOfObject(arr, 0)); // undefinedconsole.log(getDeepValueOfObject(arr, &#39;0.foo.number&#39;)); // 3   * #### toThousands(number)千位区切り形式に変換します。```javascript/** * @method toThousands * @param {number|string} number * @return {string} */function toThousands(number) {  if (Math.abs(Number(number)) &gt;= 1000) {    const [integer, float] = (number || 0).toString().split(&apos;.&apos;);    const thousandsInteger = integer.replace(/(\\d)(?=(?:\\d{3})+$)/g, &apos;$1,&apos;);    return thousandsInteger + (float ? &apos;.&apos; + float : &apos;&apos;);  } else {    return number;  }}","categories":["javascript"]},{"title":"きゅうりとソーセージの炒め物","url":"/ja/2020/12/05/sauteed-cucumber-sausage.html","content":"材料   材料   量   きゅうり   1本   ソーセージ   2本   油   適量   ニンニク   適量   塩   適量   鶏ガラスープの素   適量   醤油   適量   作り方の手順   画像   手順   1.    材料を準備する   2.    ニンニクをみじん切りにして皿に盛る   3.    きゅうりを薄切りにする   4.    ソーセージを斜めにスライスする   5.    フライパンを熱し、油を入れてソーセージを炒め、表面が少し焦げたら皿に取る   6.    別の油でニンニクを炒めて香りを出す   7.    きゅうりを加えて均一に炒める   8.    ソーセージ、塩、醤油、鶏ガラスープの素を加えて均一に炒める   9.    仕上げる   10.    盛り付ける","categories":["cookbooks"]},{"title":"セロリと肉の炒め物","url":"/ja/2020/11/30/celery-fried-meat.html","content":"材料   材料   量   セロリ   200グラム   鶏むね肉   半分   油   適量   ニンニク   適量   コショウ   適量   でんぷん   適量   塩   適量   醤油   適量   作り方の手順   画像   手順   1.    材料を準備する   2.    調味料を準備：ニンニクをスライスする   3.    セロリを切って、下茹でする   4.    肉をスライスし、水気を取って、醤油・コショウ・でんぷんを加える   5.    粘り気が出るまで混ぜる   6.    油を中火で熱し、調味料を入れて香りを出す   7.    肉を入れて炒める   8.    セロリを加え、少量の水を加えて強火で炒める   9.    塩と少しの濃口醤油を加えて炒める   10.    仕上げる   11.    盛り付ける","categories":["cookbooks"]},{"title":"セロリとソーセージの卵炒め","url":"/ja/2020/11/29/scrambled-eggs-with-celery-sausage.html","content":"材料   材料   量   セロリ   150グラム   ソーセージ   2本   卵   2個   油   少量   ニンニク   適量   塩   適量   醤油   適量   作り方の手順   画像   手順   1.    材料を準備する   2.    ニンニクをみじん切りにして用意する   3.    セロリをカットする   4.    ソーセージをスライスする   5.    卵を溶きほぐす   6.    フライパンを熱し、油を入れて卵を炒めて固め、取り出しておく   7.    フライパンを熱し、油を入れてソーセージを炒める   8.    ソーセージの表面が少し焦げたらニンニクとセロリを加えて炒める   9.    卵、塩、醤油を加えて味をなじませる   10.    仕上げる   11.    盛り付ける","categories":["cookbooks"]},{"title":"手で裂いた鶏肉","url":"/ja/2020/11/27/hand-tore-the-chicken.html","content":"材料   材料   量   骨なし鶏もも肉   2枚   ショウガ   適量   料理酒   適量   ネギ   適量   ニンニク   適量   唐辛子粉   適量   塩   適量   醤油   適量   ごま油   適量   花椒油   適量   作り方の手順   画像   手順   1.    材料を準備する   2.    鶏肉を茹でる調味料：ネギのぶつ切り、ショウガのスライス、塩、料理酒   3.    鍋に鶏もも肉と茹でる調味料を入れ、水を加えて約20分煮る   4.    その間に漬けダレを準備：ネギのぶつ切り、ニンニクのみじん切り、唐辛子粉、塩、醤油、花椒油、ごま油   5.    鶏肉が茹で上がったら取り出して手で裂く   6.    漬けダレを加えてよく和える   7.    盛り付ける","categories":["cookbooks"]},{"title":"麻辣手羽中","url":"/ja/2020/10/31/spicy-chicken-medium-wing.html","content":"材料   材料   量   手羽中   4本   油   少量   ネギ   適量   ショウガ   適量   ニンニク   適量   八角   2個   乾燥唐辛子   適量   花椒   適量   塩   適量   醤油   適量   濃口醤油   適量   ごま油   適量   手羽中は必ず下茹でしてアクを取ること。そうしないと臭みが残る。   作り方の手順   画像   手順   1.    材料を準備する   2.    ネギを小口切り、ニンニクをみじん切り、ショウガをスライスし、乾燥唐辛子・花椒・八角と一緒に用意する   3.    手羽中を解凍し、洗って切り込みを入れる（味を染み込ませたい場合は爪楊枝で刺してもよい）   4.    フライパンを熱し、油を入れて手羽中を表面がきつね色になるまで炒める   5.    ネギ、ニンニク、唐辛子、花椒、八角を加えて香りを出す   6.    半カップの水、醤油、濃口醤油、塩を加える   7.    汁気が少なくなったらごま油を加えて仕上げる   8.    盛り付ける","categories":["cookbooks"]},{"title":"青菜と肉の炒め物","url":"/ja/2020/10/31/green-vegetables-meat.html","content":"材料   材料   量   青菜   250グラム   鶏むね肉   半分   油   多め   ニンニク   適量   唐辛子の輪切り   適量   花椒   適量   塩   適量   醤油   適量   濃口醤油   適量   青菜から水分を出さないコツ：油を多めに使い、最後に塩を加えること。   作り方の手順   画像   手順   1.    材料を準備する   2.    調味料を準備：ニンニクをスライス、花椒、唐辛子の輪切り   3.    青菜を洗って下茹でする   4.    肉をスライスし、水気を取って、でんぷん・醤油・少量の濃口醤油を加える   5.    粘り気が出るまで混ぜる   6.    油を中火で熱し、ニンニク・唐辛子の輪切り・花椒を入れて香りを出す   7.    肉を加えて炒め、火が通るまで炒める   8.    青菜を加えて強火で炒める   9.    最後に塩を加えてさっと炒めて味をなじませる   10.    仕上げる   11.    盛り付ける","categories":["cookbooks"]},{"title":"じゃがいもと肉の煮込み","url":"/ja/2020/10/21/potato-cubes-stew-with-meat.html","content":"材料   材料   量   じゃがいも   400グラム   鶏むね肉   半分   油   適量   ネギ   適量   ショウガ   適量   ニンニク   適量   唐辛子の輪切り   適量   花椒   適量   ローレル   1枚   塩   適量   濃口醤油   少量   醤油   適量   作り方の手順   画像   手順   1.    材料を準備する   2.    調味料を準備：ネギのみじん切り、ニンニクのみじん切り、唐辛子の輪切り、花椒   3.    じゃがいもを一口大に切り、水に浸して変色を防ぐ   4.    肉をスライスし、水気を取る   5.    油を熱し、調味料を入れて香りを出す   6.    中火で肉を炒める   7.    じゃがいもを加えて均一に炒める   8.    醤油、濃口醤油、塩を加えて強火で炒める   9.    ローレルを加え、水を材料がかぶるくらい入れて強火で煮詰める   10.    仕上げる   11.    盛り付ける","categories":["cookbooks"]},{"title":"じゃがいもと豚肉の細切り炒め","url":"/ja/2020/10/21/potato-with-meat-shreds.html","content":"材料   材料   量   じゃがいも   250グラム   豚肉   120グラム   油   適量   ピーマン   適量   ニンニク   適量   乾燥唐辛子   適量   花椒   適量   塩   適量   醤油   適量   作り方の手順   画像   手順   1.    材料を準備する   2.    ピーマンを細切り、ニンニクをスライスし、唐辛子と花椒と一緒に用意する   3.    じゃがいもを細切りにし、でんぷんを落とすために洗い、水に浸して変色を防ぐ   4.    豚肉を細切りにする   5.    肉の細切りを解凍し、余分な水分を取る   6.    フライパンを熱し、油が煙を上げたら肉を入れて香りが出るまで炒める（肉に水分があると油がはねるので注意）   7.    ピーマンや調味料を加えて炒め、香りを出す   8.    じゃがいもの細切りを加えて均一に炒め、醤油と塩を加えて味をなじませる   9.    仕上げる   10.    盛り付ける","categories":["cookbooks"]},{"title":"フロントエンドの自動 GitHub Page デプロイ","url":"/ja/2019/12/05/deploy-github-page.html","content":"自分のプロジェクトを GitHub Page にデプロイするのは面倒で、まず build してからファイルを master/docs または gh-pages ブランチに push する必要があります。今は github にこれらの手順を自動化できるプラグインがあります：   github アドレス：   gh-pages   インストール：   $ npm install gh-pages --save-dev   注意：このモジュールは git バージョン 1.9 以上が必要です   設定：   package.json の script フィールドに以下を追加します   \"scripts\": {  \"deploy\": \"npm run build &amp; gh-pages -d dist\",}   次に    npm run deploy    を実行すると、まず build コマンドが実行され、その後このプロジェクトの gh-pages ブランチに build したファイルが push されます。その後、github プロジェクトの Settings &gt; GitHub Pages の Sourse で gh-pages branch を選択し、数分待ってから URL を開いて確認します。   https://${username}.github.io/${project}   コマンドライン引数の説明   引数   説明   -d   push するファイルのディレクトリ。ここではプロジェクトルートの dist フォルダ。   -m   push メッセージ。メッセージが長く空白を含む場合は json で    -m \\&quot;Update GitHub Page\\&quot;    のようにダブルクォートで囲む必要があります。   -b   push するブランチ。デフォルトは gh-pages   詳細な引数は以下のコマンドで確認できます   $ gh-pages --help","categories":["notes"]},{"title":"MySQLのインストール","url":"/ja/2019/11/13/mysql-install.html","content":"Windows での MySQL インストール   Windows での MySQL インストールは比較的簡単です。最新版は    MySQL ダウンロード    からダウンロードできます（詳細なインストール手順は：   Windows での MySQL インストール    を参照）。   Download ボタンをクリックしてダウンロードページに進み、下図の No thanks, just start my download. をクリックするとすぐにダウンロードが始まります：   ダウンロード後、解凍すると以下のようになります（インストールファイルは D:\\mysql に置きました）：   次に、MySQL の設定ファイルを作成します   解凍したフォルダ D:\\mysql を開き、そのフォルダ内に my.ini 設定ファイルを作成し、以下の基本情報を記述します：   [client]# MySQL クライアントのデフォルト文字セットを設定default-character-set=utf8[mysqld]# 3306 ポートを設定port = 3306# MySQL のインストールディレクトリを設定basedir=C:\\\\web\\\\mysql-8.0.11# MySQL データベースのデータ保存ディレクトリを設定（MySQL 8+ では不要、システムが自動生成。設定するとエラーになる場合あり）# datadir=C:\\\\web\\\\sqldata# 最大接続数max_connections=20# サーバーで使用するデフォルトの文字セット（8ビットのlatin1）character-set-server=utf8# 新しいテーブル作成時のデフォルトストレージエンジンdefault-storage-engine=INNODB   次に、MySQL データベースを起動します：   管理者権限で cmd コマンドラインツールを開き、ディレクトリを移動：   $ cd C:\\web\\mysql-8.0.11\\bin   データベースを初期化：   $ mysqld --initialize --console   注意：このコマンドでエラーが出る場合があります：   mysqld : &quot;mysqld&quot; はコマンドレット、関数、スクリプトファイル、または実行可能なプログラムの名前として認識されません。名前の綴りを確認し、パスが含まれている場合はパスが正しいことを確認してから再試行してください。   解決方法は2つ：1、コマンドの前に ./ を付ける（例：   $ ./mysqld --initialize --console   ）2、   MySQL の環境変数を設定   実行後、root ユーザーの初期パスワードが出力されます：   ...2019-11-13T09:36:49.186128Z 5 [Note] [MY-010454] [Server] A temporary password is generated for root@localhost: &lt;!wbLjV?/3uq   &lt;!wbLjV?/3uq が初期パスワードです。後でログイン時に必要となり、ログイン後にパスワードを変更することもできます。以下のコマンドでインストール：   $ mysqld install   起動は以下のコマンド：   $ net start mysql   MySQL にログイン   MySQL サービスが起動している場合、MySQL 付属のクライアントツールで MySQL データベースにログインできます。まずコマンドプロンプトを開き、以下の形式でコマンドを入力：   $ mysql -h ホスト名 -u ユーザー名 -p   パラメータ説明：   -h : クライアントが接続する MySQL ホスト名を指定。ローカル（localhost または 127.0.0.1）なら省略可。   -u : ログインユーザー名。   -p : パスワードを使ってログインすることを指定。ユーザー名のパスワードが空の場合は省略可。   ローカルの MySQL にログインする場合は以下のコマンド：   $ mysql -u root -p   Enter キーで確定し、インストールが正しく、MySQL が起動していれば以下のような応答が得られます：   $ Enter password:   パスワードがあれば入力、なければそのまま Enter でログイン。ログイン成功後、Welcome to the MySQL monitor... のメッセージが表示されます。その後、コマンドプロンプトは mysq&gt; となり、コマンド入力待ちになります。exit または quit でログアウト。   MySQL 環境変数の設定   上記インストール時、MySQL のデフォルトインストールパスは D:\\mysql です。PC の「プロパティ」→「詳細設定」→「環境変数」→「新規作成」で MYSQL_HOME を作成し、インストールディレクトリを入力：   path を編集し、%MYSQL_HOME%\\bin を追加：   cmd を開いて    mysql    と入力し、動作確認します。   navicat for mysql での接続   navicat for mysql ダウンロード    インストール後、navicat を起動   クライアントは navicat for mysql を使用。本地に mysql 8.0 をインストール済みですが、接続時に以下のエラーが出る場合があります：   解決方法：   このコマンドは2つの意味があります。1つ目は root のパスワードを &#39;root&#39; に変更すること。2つ目は mysql_native_password で新しいパスワードをエンコードすることです。   $ ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'root';   詳細なエラー情報は    navicat for mysql 接続時エラー：1251...    を参照してください。","categories":["database"]},{"title":"荒れ狂う波、ある老水兵の実体験","url":"/ja/2019/10/31/wave-and-sky.html","content":"","categories":["reprints"]},{"title":"画像 JPEG 表示最適化","url":"/ja/2019/10/31/gradual-jpeg.html","content":"1. JPEG の紹介   JPEG は Joint Photographic Experts Group（画像専門家グループ）の略称で、最初の国際画像圧縮標準です。JPEG 画像圧縮アルゴリズムは良好な圧縮性能を提供しながら、比較的良い再構築品質を持ち、画像・動画処理分野で広く使用されています。   2. 保存方式   JPEG ファイル形式には2つの保存方式があります。Baseline JPEG と Progressive JPEG です。両形式は同じサイズと画像データを持ち、拡張子も同じですが、唯一の違いは表示方式です。   2.1 Baseline JPEG （ベースライン）   このタイプの JPEG ファイルは上から下へのスキャン方式で、各行を順番に JPEG ファイルに保存します。このファイルを開いて内容を表示する時、データは保存時の順序で上から下へ一行ずつ表示され、すべてのデータが読み込まれるまで続き、画像全体の表示が完了します。ファイルが大きいかネットワークのダウンロード速度が遅い場合、画像が一行ずつ読み込まれる効果が見られます。この形式の JPEG には特に利点がないため、一般的に Progressive JPEG の使用が推奨されています。   2.2 Progressive JPEG （プログレッシブ）   Baseline の一度のスキャンとは異なり、Progressive JPEG ファイルは複数回のスキャンを含み、これらのスキャンが順番に JPEG ファイルに保存されます。ファイルを開く過程で、まず画像全体のぼやけた輪郭が表示され、スキャン回数が増えるにつれて画像が徐々に鮮明になります。この形式の主な利点は、ネットワークが遅い場合でも画像の輪郭を見ることができ、読み込み中の画像が何であるかを知ることができることです。一部のウェブサイトで大きな画像を開く時、この技術に気づくでしょう。   3. 作成方法   Photoshop を使用   ファイル &gt; 別名で保存 &gt; 保存をクリック後、JPEG オプションが表示されます   プログレッシブ JPEG を作成したい場合は、連続を選択   4. 応用   基本 JPEG とプログレッシブ JPEG はいつ使用すべきか？   JPEG 画像が 10K 未満の場合、基本 JPEG として保存するのが最適です（約75％の確率でより小さくなります）10K を超えるファイルの場合、プログレッシブ JPEG がより良い圧縮を提供します（94％の場合）Chrome + Firefox + IE9 ブラウザでは、プログレッシブ画像の読み込みがより速く、大幅に速くなります。他のブラウザでは、基本画像の読み込みと同等で、少なくとも遅れることはありません。   プログレッシブ画像にも欠点があり、CPU とメモリを消費します。","categories":["notes"]},{"title":"母鶏とフロントエンドエンジニア","url":"/ja/2019/10/25/hen-and-front-end-engineer.html","content":"","categories":["reprints"]},{"title":"RegExp","url":"/ja/2019/10/22/regexp.html","content":"JavaScript RegExp オブジェクト   構文   var regexp = new RegExp(pattern, modifiers);    // 通过 RegExp 构造函数创建var regexp = /[pattern]/[modifiers];            // 通过字面量创建   pattern（パターン）は式のパターンを記述します   modifiers（修飾子）はグローバルマッチ、大小文字の区別、複数行マッチを指定します   注意：コンストラクタで正規表現オブジェクトを作成する場合、通常の文字エスケープルール（バックスラッシュ \\ を前に付ける）が必要です。例えば、次は等価です：   var regexp = new RegExp('\\\\w+');var regexp = /\\w+/;   修飾子   修飾子（Modifiers）はグローバルマッチ、大小文字の区別、複数行マッチを指定します：   修飾子   説明   i   大小文字を区別しないマッチを実行します。   g   グローバルマッチ（すべての一致を検索、最初の一致で停止しない）を実行します。   m   複数行マッチを実行します。   s   . で改行文字もマッチできるようにします。   u   unicode コードのパターンでマッチします。   y   &quot;粘着（sticky）&quot;検索を実行し、ターゲット文字列の現在位置からマッチします。   量指定子   量指定子（Quantifiers）は繰り返しマッチする文字の回数や範囲を定義します：   量指定子   説明   n+   少なくとも1つの n を含む文字列にマッチします。   n*   0個以上の n を含む文字列にマッチします。   n?   0個または1個の n を含む文字列にマッチします。   n{X}   X 個の n の並びにマッチします。   n{X,}   最低 x 個、最大 y 個の n の並びにマッチします。   n{X,Y}   少なくとも x 個の n の並びにマッチします。   ^n   n で始まる文字列にマッチします。   n$   n で終わる文字列にマッチします。   ?=n   直後に指定文字列 n が続く場合にマッチします。   ?!n   直後に指定文字列 n が続かない場合にマッチします。   メタ文字   メタ文字（Metacharacter）は特別な意味を持つ文字です：   メタ文字   説明   .   （ドット）デフォルトで   改行以外   の任意の1文字にマッチします。   \\w   単語文字（数字、英字、アンダースコア）にマッチします。   \\W   非単語文字にマッチします。   \\d   数字にマッチします。   \\D   非数字文字にマッチします。   \\s   空白文字にマッチします。   \\S   非空白文字にマッチします。   \\b   単語境界にマッチします。   \\B   非単語境界にマッチします。   \\0   NULL 文字にマッチします。   \\n   改行文字にマッチします。   \\f   改ページ文字にマッチします。   \\r   復帰文字にマッチします。   \\t   タブ文字にマッチします。   \\v   垂直タブにマッチします。   \\xxx   8進数 xxx で指定された文字にマッチします。   \\xdd   16進数 dd で指定された文字にマッチします。   \\uxxxx   16進数 xxxx で指定された Unicode 文字にマッチします。   角括弧   角括弧は特定の範囲の文字を検索するために使います：   式   説明   [^]   任意の文字にマッチします。（   改行もマッチ可能   ）   [abc]   角括弧内の任意の文字にマッチします。   [^abc]   角括弧内にない任意の文字にマッチします。   [0-9]   0 から 9 までの任意の数字にマッチします。   [a-z]   小文字 a から小文字 z までの任意の文字にマッチします。   [A-Z]   大文字 A から大文字 Z までの任意の文字にマッチします。   [A-z]   大文字 A から小文字 z までの任意の文字にマッチします。   (red|blue|green)   指定されたいずれかの選択肢にマッチします。   RegExp オブジェクトのメソッド   式   説明   compile   正規表現をコンパイルします。   exec   文字列内で指定値を検索します。見つかった値とその位置を返します。   test   文字列内で指定値を検索します。true または false を返します。   正規表現をサポートする String オブジェクトのメソッド   式   説明   search   正規表現に一致する値を検索します。   match   1つまたは複数の正規表現の一致を見つけます。   replace   正規表現に一致する部分文字列を置換します。   split   文字列を配列に分割します。   複数行テキストで正規表現を使う   var string = 'Please yes\\nmake my day!';string.match(/yes.*day/); // nullstring.match(/yes[^]*day/); // 'yes\\nmake my day'   先読みアサーションと否定先読みアサーション   先読みアサーション（lookahead）は、xがyの前にある場合のみマッチします。/x(?=y)/ のように書きます。例えば、パーセント記号の前の数字だけをマッチさせるには /\\d+(?=%)/ と書きます。   var string = '100% of US presidents have been male';/\\d+(?=%)/.exec(string); // ['100']/have(?=%)/.exec(string); // null   否定先読みアサーション（negative lookahead）は、xがyの前にない場合のみマッチします。/x(?!y)/ のように書きます。例えば、パーセント記号の前でない数字だけをマッチさせるには /\\d+(?!%)/ と書きます。   var string = 'that's all 44 of them';/\\d+(?!%)/.exec(string); // ['44']/\\d+(?!.*of)/.exec(string); // null/\\d+(?!.*all)/.exec(string); // ['44']/\\d+(?!.*of|.*all)/.exec(string); // null   後読みアサーションと否定後読みアサーション   ES2018 で後読みアサーションが導入され、V8 エンジン 4.9（Chrome 62）以降でサポートされています。後読みアサーション（lookbehind）は、xがyの後にある場合のみマッチします。/(?&lt;=y)x/ のように書きます。例えば、ドル記号の後の数字だけをマッチさせるには /(?&lt;=$)d+/ と書きます。   var string = 'Benjamin Franklin is on the $100 bill';/(?&lt;=\\$)\\d+/.exec(string);  // [\"100\"]   否定後読みアサーション（negative lookbehind）は、xがyの後にない場合のみマッチします。/(?&lt;!y)x/ のように書きます。例えば、ドル記号の後でない数字だけをマッチさせるには /(?&lt;!\\$)d+/ と書きます。   var string = 'it's is worth about €90';/(?&lt;!\\$)\\d+/.exec(string);  // [\"90\"]   貪欲モードと非貪欲モード   貪欲モード: 正規表現は通常、できるだけ長くマッチしようとします。   var html = '&lt;html&gt;&lt;head&gt;&lt;title&gt;&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;';var regexp = /(&lt;.*&gt;)/;html.match(regexp); // ['&lt;html&gt;&lt;head&gt;&lt;title&gt;&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;']   非貪欲モード: 最小限のマッチを試みます。   var html = '&lt;html&gt;&lt;head&gt;&lt;title&gt;&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;';var regexp = /(&lt;.*?&gt;)/;html.match(regexp); // ['&lt;html&gt;']   6種類の繰り返しの非貪欲マッチの簡単な説明：   {n,m}?：できるだけ n 回マッチしますが、条件を満たすために最大 m 回まで繰り返すこともあります。   {n}?：できるだけ n 回マッチします。   {n,}?：できるだけ n 回マッチしますが、条件を満たすために任意回数繰り返すこともあります。   ??：できるだけマッチしますが、条件を満たすために最大1回までマッチします（{0,1}? と同等）。   +?：できるだけ1回マッチしますが、条件を満たすために任意回数繰り返すこともあります（{1,}? と同等）。   *? ：できるだけマッチしませんが、条件を満たすために任意回数繰り返すこともあります（{0,}? と同等）。   キャプチャグループと非キャプチャグループ   キャプチャグループ ()：キャプチャグループは各グループでマッチした内容を一時的に保存し、次回利用できます。JavaScript では $1, $2, $3… の形式で保存されます。そのためキャプチャグループはパフォーマンスに影響します。   var string = 'sjds24324abcabc1234';var regexp = /(abc){2}/;string.match(regexp); // ['abcabc', 'abc']   非キャプチャグループ (?:)：非キャプチャグループは各グループのマッチ内容を保存せず、結果のみ返します。したがってマッチ速度が向上します。   var string = 'sjds24324abcabc1234';var regexp = /(?:abc){2}/;string.match(regexp); // ['abcabc']   正規表現の名前付きグループキャプチャ   名前付きグループキャプチャは ?    記法を使い、マッチした結果を名前でアクセスできます。グループがマッチしなかった場合、groups オブジェクトの該当プロパティは undefined になります。   var date = '2023-01-01';var regexp = /(?&lt;year&gt;\\d{4})-(?&lt;month&gt;\\d{2})-(?&lt;day&gt;\\d{2})/u;regexp.exec('2023-01-01'); // { year: '2023', month: '01', day: '01' }","categories":["javascript"]},{"title":"VSCode","url":"/ja/2019/09/21/vscode-configuration.html","content":"プラグイン   GitLens   ：特定の行のコードが誰によって書かれたかを表示   vscode-fileheader   ：ファイルの作者・修正情報を表示   ESLint   ：プロジェクトの eslint 設定ファイルを使用してコードをチェック   Prettier - Code formatter   ：prettier でコードをフォーマット   Tailwind CSS IntelliSense   ：Tailwind css の構文ヒントプラグイン   {  \"recommendations\": [    \"eamodio.gitlens\",    \"dbaeumer.vscode-eslint\",    \"esbenp.prettier-vscode\",    \"bradlc.vscode-tailwindcss\"  ]}   VSCode エディタ設定：   {  \"editor.detectIndentation\": true,  \"editor.tabSize\": 2,  \"files.eol\": \"\\n\",  \"files.autoSave\": \"off\",  \"editor.formatOnSave\": true,  \"editor.formatOnType\": false,  \"editor.formatOnPaste\": false,  \"editor.defaultFormatter\": \"dbaeumer.vscode-eslint\",  \"emmet.triggerExpansionOnTab\": true,  \"editor.wordWrap\": \"on\",  \"workbench.tree.enableStickyScroll\": false,  \"editor.stickyScroll.enabled\": false,  \"extensions.ignoreRecommendations\": true,  \"http.proxy\": \"http://127.0.0.1:1000\"}   インデント    Indentation   detectIndentation    - ファイルを開く時にファイル内容に基づいて &quot;editor.tabSize&quot; と &quot;editor.insertSpaces&quot; を自動検出するかどうかを制御します。   tabSize    - タブ文字に相当するスペース数。 &quot;editor.detectIndentation&quot; が有効な場合、この設定はファイル内容に基づいて上書きされます。   insertSpaces    - &quot;Tab&quot; キーを押した時にスペースを挿入します。 &quot;editor.detectIndentation&quot; が有効な場合、この設定はファイル内容に基づいて上書きされます。   {\"editor.detectIndentation\": true,\"editor.tabSize\": 2,\"editor.insertSpaces\": true}   行終端文字   デフォルトの行終端文字。   値   説明   \\n   LF (Linux)   \\r\\n   CRLF (Windows)   auto   Uses operating system specific end of line character.   {  \"files.eol\": \"\\n\",  // Configure settings to be overridden for the shellscript language.  \"[shellscript]\": {    \"files.eol\": \"\\n\"  }}   自動保存    Auto Save   値   説明   off   to disable auto save.   afterDelay   to save files after a configured delay (default 1000 ms).   onFocusChange   to save files when focus moves out of the editor of the dirty file.   onWindowChange   to save files when the focus moves out of the VS Code window.   {  \"files.autoSave\": \"off\",  \"files.autoSaveDelay\": 1000}   自動フォーマット    Formatting   formatOnSave    - 保存時にコードファイルをフォーマット   formatOnType    - 入力後にその行のコードをフォーマット   formatOnPaste    - 貼り付け内容をフォーマット   {\"editor.formatOnSave\": true,\"editor.formatOnType\": false,\"editor.formatOnPaste\": false}   デフォルトフォーマッタ    Default formatter   dbaeumer.vscode-eslint    - Eslint Plugin.   esbenp.prettier-vscode    - Prettier - Code formatter.   {// 将根据eslint配置格式化代码\"editor.defaultFormatter\": \"dbaeumer.vscode-eslint\"}   改行   コードの長さがエディタの表示幅を超えた場合に改行するかどうか   {\"editor.wordWrap\": \"on\"}   省略記法の展開    Emmet   ショートカット構文でタグを展開します。例：ul&gt;li*3&gt;span.hello   {\"emmet.triggerExpansionOnTab\": true}   スティッキースクロール    Sticky Scroll   https://code.visualstudio.com/updates/v1_85#_sticky-scroll-in-trees   {\"workbench.tree.enableStickyScroll\": false,\"editor.stickyScroll.enabled\": false}   その他   ignoreRecommendations    - true に設定すると推奨プラグインのプッシュを禁止できます。   詳細はこちら   proxy    - エディタのプロキシ設定   {\"extensions.ignoreRecommendations\": true,\"http.proxy\": \"http://127.0.0.1:1000\"}   コードフォーマットのショートカット：   Windows   Shift + Alt + F   Mac   Shift + Option + F   Ubuntu   Ctrl + Shift + I   ショートカット設定：   Redo（やり直し）：   Ctrl + Shift + Z   -&gt;   Ctrl + Y   Copy Line Down（行を素早くコピー）:   Shift + Alt + ↓   -&gt;   Ctrl + D   Transform to Uppercase（大文字に変換）:   Null   -&gt;   Ctrl + Shift + U   Transform to Lowercase（小文字に変換）:   Null   -&gt;   Ctrl + Shift + I","categories":["notes"]},{"title":"Webstorm","url":"/ja/2019/09/20/webstorm-configuration.html","content":"中文字体の設定   Show only monospaced fonts のチェックを外す   Font：consolas   Size：14   Line spacing: 1.2   Fallback font：Microsoft YaHei   コードフォーマットのショートカット：   Ctrl + Alt + L   キーボードショートカット：   Add Or Remove Caret（マルチカーソル）:   Alt+ Button1 Click   Redo（やり直し）:   Ctrl + Shift + Z   Expand Live Template / Emmet Abbreviation（タグの展開）:   Tab   Fix ESLint Problems（ESLint エラーの修正）:   Alt + Shift + L   波括弧と角括弧の間にスペースを追加する設定：   Setting &gt; Editor &gt; Code Style &gt; JavaScript &gt; Space で Within を見つけ、以下の項目にチェックを入れる：   Object literal braces   ES6 import/export braces   Array brackets   Interpolation expressions   ESLint の設定   Setting &gt; Plugins で ESLint プラグインをインストール   Setting &gt; ESLint Settings で設定   Setting で ESLint を検索するか、Setting &gt; Languages &amp; Frameworks &gt; JavaScript &gt; Code Quality Tools &gt; ESLint を探す   webstorm の自動保存を無効にする   ステップ1：   Settings &gt; Appearance &amp; Behavior &gt; System Settings&gt; Synchronization   &gt; Synchroniza files on frame or editor tab activation           // 激活当前窗口时保存   &gt; Save files on frame deactivation                                       // 切换到其他窗口时保存   &gt; Save files automatically if application is idle for  15 sec.    // 设定一个时间自动保存   &gt; Use &quot;safe write&quot; (save changes to a temporary file first)    // 安全写入,这个选项会不停的保存源文件,因此关闭最后一个就好   ステップ2：   Settings &gt; Editor &gt; General &gt; Editor Tabs&gt; Appearance   &gt; Mark modified(*)   // 被修改的文件会出现 * 号（在文件图标右下角）","categories":["notes"]}]