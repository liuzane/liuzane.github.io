[{"title":"运维的未来是平台工程","url":"/2023/07/19/platform-engineering.html","content":"转载：[运维的未来是平台工程](http://www.ruanyifeng.com/blog/2023/03/platform-engineering.html)\n作者：阮一峰\n\n互联网公司有一个重要工种，叫做\"运维\"。\n\n![](./platform-engineering/bg2023031501.webp)\n\n\"运维\"的英文是 Operations，简写为 Ops，直译就是\"操作\"，指的是各种服务器操作。\n\n简单说，**运维工程师就是管理服务器、保障代码运行环境的人**。\n\n这是很重要的工作，公司理应非常重视。但是实际上这几年，运维岗位一直在缩减，Ops 工程师被要求转型 DevOps 工程师。据我知道，很多运维工程师其实很苦恼。\n\n应该怎么看待这种变化？运维有没有前途？将来会怎么发展？\n\n![](./platform-engineering/bg2023031502.webp)\n\n最近，我读到一篇老外的文章，标题就叫[《运维的未来是平台工程》](https://charity.wtf/2022/09/30/the-future-of-ops-is-platform-engineering/)。\n\n> \"The future of Ops is platform engineering.\"\n\n![](./platform-engineering/bg2023031503.webp)\n\n作者系统地回答了上面这些问题，认为运维最终将会消失，演变成一种新的工种----\"平台工程\"（platform engineering）。\n\n我觉得他的文章很有启发，让我对运维的看法清晰了很多，分享给大家。\n\n### 一、运维的由来\n\n最早的时候，并没有运维，程序员同时负责编写和运行软件。\n\n但是，编写软件和运行软件，其实是两种不同的技能：前者需要熟悉代码，后者需要熟悉服务器。\n\n互联网软件发展起来以后，这两种技能就逐渐分家了。\n\n开发工程师负责编写代码，运维工程师负责运行代码（即保障服务器运行环境）。\n\n### 二、运维的衰落\n\n事实证明，**开发和运维分家是一个巨大的错误**。\n\n写代码的人不了解服务器环境，管理服务器的人不了解代码在干什么，这样不利于做出优秀的产品，也不利于排查问题。\n\n因此，有些公司就推动，开发与运维重新合在一起：编写软件的人也要负责运行软件。\n\n这就是 DevOps 的由来，它等于 Dev（开发）+ Ops（运维）。\n\n![](./platform-engineering/bg2023031504.webp)\n\n另一方面，互联网公司的核心资产和竞争力，更多的是代码，而不是运维。所以，公司也有意愿，把更多的力量投入在开发上，逐步压缩专门的运维团队，积极外包尽可能多的基础设施。\n\n这两方面因素决定了，运维作为一个单独的工种，正在逐渐消失。\n\n### 三、DevOps 的问题\n\n但是，**DevOps 实际上没有办法取代运维**。\n\n越来越复杂的业务，注定了系统和基础设施也越来越复杂，同时还必须稳定可靠。\n\n普通的开发工程师，根本不可能做到这一点。他既不了解所有基础设施，也达不到专业运维的系统管理水平。\n\n这种情况下，公司就会选择外包，采购外部的云服务，**把基础设施外包给专业的云服务商**， 最大化压缩自身成本。\n\n### 四、运维的职责\n\n虽然总体上，运维是管理服务器，但是可以细分成两方面的职责：构建基础架构 + 管理运行环境。\n\n\"构建基础架构\"指的是硬件的采购、安装、上架、联网这些工作。\n\n\"管理运行环境\"指的是保障业务软件的运行。\n\nDevOps 出现后，\"构建基础架构\"这一职责逐渐消失，变成了采购云服务，\"管理运行环境\"这一职责则是转给了 DevOps 工程师。\n\n于是，新的问题出现了：**谁负责采购和整合云服务？**\n\n### 五、平台工程是什么\n\n采购合适的云服务，并不是一件简单的事情。\n\n云服务纷繁复杂，各种 API、SDK 和配套工具令人眼花缭乱，即使经验丰富的运维工程师也不容易说清楚。\n\n因此，需要有专职人员来做出正确决策，选择一套满足需要的云服务，并且负责编写工具，整合所有采购来的云服务，供业务开发使用。\n\n<u>这种角色就叫做平台工程，他负责评估、采购、整合各种云服务，作为自身的基础设施，并在外部云服务基础上构建自己的平台，让开发工程师能够在其上自助服务，将自己的代码投入生产。</u>\n\n上面的定义有几个要点。\n\n（1）基础设施是外包的，以求成本和开发周期最小化。\n\n（2）平台工程师负责整合外包的基础设施，构建成一个平台。\n\n（3）开发工程师在该平台上，自主搭建和管理运行环境，自己运行代码。\n\n### 六、平台工程与运维的区别\n\n平台工程与运维，存在几个显著区别。\n\n（1）平台工程需要开发软件，包括编写测试和代码审核，团队的运作方式很像开发团队，有产品经理、甚至设计师和前端工程师。\n\n运维一般不开发应用软件，最多就是写一些自动化脚本。\n\n以前，有的工程师写代码，有的工程师跑代码。今后，所有工程师都编写代码，并且运行自己的代码，不管你是开发工程师、DevOps 工程师或者平台工程师，不同之处只在于按层或功能划分的职责范围不同。\n\n（2）平台工程是云原生的，所有工作都存在于云上。\n\n运维不是云原生的，需要自己管理硬件，只能说是支持云的。\n\n（3）平台工程采购云服务，运维采购的是硬件。\n\n### 七、运维工程师的出路\n\n随着传统的运维角色的消失，现有的运维工程师必然面临着转型，不外乎有三种出路可以选择。\n\n（1）如果喜欢开发业务软件，可以选择成为 DevOps 工程师。\n\n（2）如果喜欢开发平台软件，可以选择做平台工程，专注于基础设施的整合。\n\n（3）如果更喜欢硬件和底层，可以选择加入\"基础设施即服务\"（IaaS）的云公司，深入研究基础设施。\n\n（完）","categories":["reprint"]},{"title":"软件吃软件，编程工作会越来越多吗？","url":"/2023/07/07/will-programmers-increase.html","content":"转载：[软件吃软件，编程工作会越来越多吗？](https://www.ruanyifeng.com/blog/2020/05/will-programmers-increase.html)\n作者：阮一峰\n\n**1、**\n\n最近，国外有一篇文章，标题很有趣，叫做《软件吃掉软件》。\n\n作者认为，大型软件和通用软件越来越强大，将会取代小软件和专门软件，相当于把后者都吃掉了。\n\n![](./will-programmers-increase/bg2020052607.jpg)\n\n他以自己的经历举例，云服务就取代了很多小软件。\n\n>\"我亲眼目睹了这种情况发生的速度。我的第一份工作是在一家小型创业公司，我们拥有大量的物理服务器。现在，很难想象有任何一家 Web 创业公司会直接管理服务器，人们都是在亚马逊 AWS 控制台上点击几个按钮和链接。\"\n\n框架的发展，也使得从头编写代码的需求越来越少。\n\n>\"程序员曾经需要从头开始构建东西，但是软件库的发展速度超过了我们的使用速度，甚至软件可以自己生成新的软件，这也是为什么你看到如此之多的\"无代码\"或\"低代码\"解决方案突然出现的原因。现在，自己编写代码的理由越来越少，你要做的只是将不同的产品集成在一起。\"\n\n他的结论就是，**软件自动化技术的发展，可能将会减少对软件工程师的需求，未来的程序员可能会比现在少。**\n\n**2、**\n\n我对这个话题很感兴趣，因为这是在预测未来的重大变化，而且跟就业趋势直接相关。如果未来软件的规模化和自动化，会抑制对程序员的需求，那么就不应该鼓励年轻人都来当程序员。\n\nHacker News 论坛对这篇文章进行了[热烈的讨论](https://news.ycombinator.com/item?id=23297463)。大部分人（都是职业程序员）的看法是， **这种观点已经说了几十年了，根本是杞人忧天，实际情况恰恰相反，程序员变得越来越多。**\n\n>\"10岁时，我开始用 Qbasic 编码。我告诉爸爸，长大后想成为一名程序员。他告诉我，计算机可能很快就会实现自动化，就像他的工程行业一样，那时我会不得不找另一份工作。\n>但是，23年过去了，市场对程序员的需求不断上升，并且似乎仍在上升\n>我想说，我们离软件自动解决大部分需求的这种抽象水平，还很遥远。正如文章所说，k8s、docker、kafka、databricks、redshift 这些新工具，取代了很多程序员。但是，它们其实引发了更多对程序员的需求。\n>那些必须由程序员解决的问题，只是转移到了新的地方。\"\n\n就像上面引文所说，现实情况是需要编程解决的问题不是越来越少，而是越来越多，导致了程序员的增加。原文提出的两个论据，都站不住脚。\n\n首先，云服务确实使得企业免去了服务器管理，但是你仍然需要有了解 docker、kubernetes、数据库分片和索引、故障转移、备份、消息队列等等技术的人员。即使这些东西现在更加集成，更易于组合，但要弄清楚它们如何相互作用，如何设置，仍然是很复杂的一件事。\n\n其次，\"无代码开发\"只能解决一些通用的软件问题，迟早会出现需要定制的情况。那时，就需要有程序员来修改代码，用户才能继续使用。\n\n总之，世界正在变得越来越自动化，而自动化的本质是软件，所以对程序员的需求只可能越来越多，不可能越来越少。\n\n**3、**\n\n不过，论坛上面也有少部分人赞同原作者的观点，认为程序员越来越多只是过去的情况，未来未必如此。**现在可能是软件开发\"突变\"的一个时间点，未来的发展可能不同于此前的情况。**\n\n市场需要更多了解 docker 和 kubernetes 这样新工具的人，这个是没错。但是，主要是大公司才需要这样的人，小公司用不到 kubernetes。小公司面对的复杂性是有限的，只要使用大公司提供的简单解决方案即可，需要自己开发的部分几乎没有。\n\n而且，如果公司的业务重点不在技术方面（你要知道大部分公司都不是互联网公司），使用\"无代码方案\"是最有效的。因为无需在软件工程上花费很多钱，就可以快速应用。\n\n历史上，每当一个领域出现大量需要编程解决的问题，就会诞生一个通用的解决方案，解决掉90%的场景。然后，这个领域对程序员的需求就会快速减少。\n\n>\"30年前，开发图形界面 GUI 很困难，Visual Basic 改变了这一点。\n>20年前，制作一个 Web 应用很困难，PHP 改变了这一点。\n>10年前，写一个复杂的网页布局很困难，Bootstrap 改变了这一点。\n>现在，机器学习很困难，PyTorch 正在改变了这一点。\n>每个棘手的问题最终都会产生一个有效解决方案，解决掉90%的场景。对于大多数公司而言，这个解决方案已经足够了。剩下的10％场景，其中一部分由某些公司付钱给程序员来解决，另一部分永远不会解决。\"\n\n所以，如果新的领域层出不穷，那么就会需要更多的程序员。但是，这些领域对程序员的需求都不会持久，一旦产生了解决方案，需求就会迅速降低。\n\n**4、**\n\n看完了上面的讨论，我的想法是，市场对程序员的需求，未来怎么变化，不能简单地回答增加或减少，而是取决于两个因素。\n\n**（1）人们需求增加的速度，能否超过软件自动化的进化速度。**\n\n现有的场景最终都会有通用的解决方案，需要雇佣程序员的情况，确实将越来越少。程序员的就业，主要依靠新出现的场景。而且，新场景的增加速度，必须超过软件自动化的进化速度，否则旧的解决方案也许会自己升级成新场景的解决方案。\n\n**（2）软件开发的难度，必须超过机器学习的进化速度。**\n\n程序员的数量，还跟软件开发的难度有关。难度越低，就会有越多的人从事这项工作。以前，你必须懂得计算机的底层硬件和汇编语言，才能开发软件，所以程序员很少。现在，软件开发越来越容易，已经不需要了解底层，只需要懂得某个框架即可，所以越来越多普通人变成程序员。\n\n未来的编程肯定会变得越来越容易，但是，越来越容易的编程，也意味着机器可以轻而易举地代替人，来完成这些工作。所以，软件开发的难度必须超过机器学习的水平，否则需求的增加只会导致更多的机器自动编程，而不会导致更多的程序员雇佣。\n\n（完）","categories":["reprint"]},{"title":"大盘鸡","url":"/2022/08/16/big-plate-chicken.html","content":"![ ](./big-plate-chicken/big-plate-chicken_00.jpg)\n\n#### 食材用料\n| 食材 | 数量 |\n| ---- | ---- |\n| 鸡   | 一只 |\n| 土豆  | 两个 |\n| 青椒  | 两个 |\n| 油    | 适量 |\n| 白糖  | 适量 |\n| 葱    | 适量 |\n| 姜    | 适量 |\n| 蒜    | 适量 |\n| 辣椒  | 适量 |\n| 花椒  | 适量 |\n| 八角  | 适量 |\n| 香叶  | 适量 |\n| 桂皮  | 适量 |\n| 盐    | 适量 |\n| 生抽  | 适量 |\n| 老抽  | 适量 |\n| 辣椒油 | 适量 |\n| 料酒  | 适量 |\n\n#### 做法步骤\n| 图片 | 步骤  |\n| ---- | ---- |\n| ![ ](./big-plate-chicken/big-plate-chicken_01.jpg) | <serial>1.</serial> 准备食材 |\n| ![ ](./big-plate-chicken/big-plate-chicken_02.jpg) | <serial>2.</serial> 准备调料：蒜、姜、蒜、辣椒、花椒、八角、香叶、桂皮 |\n| ![ ](./big-plate-chicken/big-plate-chicken_03.jpg) | <serial>3.</serial> 鸡块焯水，放入姜片、料酒 |\n| ![ ](./big-plate-chicken/big-plate-chicken_04.jpg) | <serial>4.</serial> 土豆切滚刀块 |\n| ![ ](./big-plate-chicken/big-plate-chicken_05.jpg) | <serial>5.</serial> 鸡块去除浮沫后捞出 |\n| ![ ](./big-plate-chicken/big-plate-chicken_06.jpg) | <serial>6.</serial> 放油大火，放入白糖或者冰糖炒化 |\n| ![ ](./big-plate-chicken/big-plate-chicken_07.jpg) | <serial>7.</serial> 放入鸡块翻炒，炒出香味 |\n| ![ ](./big-plate-chicken/big-plate-chicken_08.jpg) | <serial>8.</serial> 放入调料翻炒 |\n| ![ ](./big-plate-chicken/big-plate-chicken_09.jpg) | <serial>9.</serial> 放入盐、生抽、老抽、辣椒油、料酒翻炒均匀 |\n| ![ ](./big-plate-chicken/big-plate-chicken_10.jpg) | <serial>10.</serial> 放入土豆翻炒，然后加入水没过土豆，盖上锅盖 |\n| ![ ](./big-plate-chicken/big-plate-chicken_11.jpg) | <serial>11.</serial> 煮到一半放入青椒，大火收汁 |\n| ![ ](./big-plate-chicken/big-plate-chicken_12.jpg) | <serial>12.</serial> 装盘 |\n","categories":["cookbook"]},{"title":"Language Tags (BCP 47)","url":"/2022/04/10/language-tags.html","content":"\n| Language Tag | Language | Region | Description |\n| ------------ | -------- | ------ | ----------- |\n| ar-SA\t| Arabic     |\tSaudi Arabia       |\tArabic (Saudi Arabia)\n| bn-BD\t| Bangla     |\tBangladesh         |\tBangla (Bangladesh)\n| bn-IN\t| Bangla     |\tIndia              |\tBangla (India)\n| cs-CZ\t| Czech      |\tCzech Republic     |\tCzech (Czech Republic)\n| da-DK\t| Danish     |\tDenmark            |\tDanish (Denmark)\n| de-AT\t| German     |\tAustria            |\tAustrian German\n| de-CH\t| German     |\tSwitzerland        |\t\"Swiss\" German\n| de-DE\t| German     |\tGermany            |\tStandard German (as spoken in Germany)\n| el-GR\t| Greek      |\tGreece             |\tModern Greek\n| en-AU\t| English    |\tAustralia          |\tAustralian English\n| en-CA\t| English    |\tCanada             |\tCanadian English\n| en-GB\t| English    |\tUnited Kingdom     |\tBritish English\n| en-IE\t| English    |\tIreland            |\tIrish English\n| en-IN\t| English    |\tIndia              |\tIndian English\n| en-NZ\t| English    |\tNew Zealand        |\tNew Zealand English\n| en-US\t| English    |\tUnited States      |\tUS English\n| en-ZA\t| English    |\tSouth Africa       |\tEnglish (South Africa)\n| es-AR\t| Spanish    |\tArgentina          |\tArgentine Spanish\n| es-CL\t| Spanish    |\tChile              |\tChilean Spanish\n| es-CO\t| Spanish    |\tColumbia           |\tColombian Spanish\n| es-ES\t| Spanish    |\tSpain              |\tCastilian Spanish (as spoken in Central-Northern Spain)\n| es-MX\t| Spanish    |\tMexico             |\tMexican Spanish\n| es-US\t| Spanish    |\tUnited States      |\tAmerican Spanish\n| fi-FI\t| Finnish    |\tFinland            |\tFinnish (Finland)\n| fr-BE\t| French     |\tBelgium            |\tBelgian French\n| fr-CA\t| French     |\tCanada             |\tCanadian French\n| fr-CH\t| French     |\tSwitzerland        |\t\"Swiss\" French\n| fr-FR\t| French     |\tFrance             |\tStandard French (especially in France)\n| he-IL\t| Hebrew     |\tIsrael             |\tHebrew (Israel)\n| hi-IN\t| Hindi      |\tIndia              |\tHindi (India)\n| hu-HU\t| Hungarian  |\tHungary            |\tHungarian (Hungary)\n| id-ID\t| Indonesian |\tIndonesia          |\tIndonesian (Indonesia)\n| it-CH\t| Italian    |\tSwitzerland        |\t\"Swiss\" Italian\n| it-IT\t| Italian    |\tItaly              |\tStandard Italian (as spoken in Italy)\n| jp-JP\t| Japanese   |\tJapan              |\tJapanese (Japan)\n| ko-KR\t| Korean     |\tRepublic of Korea  |\tKorean (Republic of Korea)\n| nl-BE\t| Dutch      |\tBelgium            |\tBelgian Dutch\n| nl-NL\t| Dutch      |\tThe Netherlands    |\tStandard Dutch (as spoken in The Netherlands)\n| no-NO\t| Norwegian  |\tNorway             |\tNorwegian (Norway)\n| pl-PL\t| Polish     |\tPoland             |\tPolish (Poland)\n| pt-BR\t| Portugese  |\tBrazil             |\tBrazilian Portuguese\n| pt-PT\t| Portugese  |\tPortugal           |\tEuropean Portuguese (as written and spoken in Portugal)\n| ro-RO\t| Romanian   |\tRomania            |\tRomanian (Romania)\n| ru-RU\t| Russian    |\tRussian Federation |\tRussian (Russian Federation)\n| sk-SK\t| Slovak     |\tSlovakia           |\tSlovak (Slovakia)\n| sv-SE\t| Swedish    |\tSweden             |\tSwedish (Sweden)\n| ta-IN\t| Tamil      |\tIndia              |\tIndian Tamil\n| ta-LK\t| Tamil      |\tSri Lanka          |\tSri Lankan Tamil\n| th-TH\t| Thai       |\tThailand           |\tThai (Thailand)\n| tr-TR\t| Turkish    |\tTurkey             |\tTurkish (Turkey)\n| zh-CN\t| Chinese    |\tChina              |\tMainland China, simplified characters\n| zh-HK\t| Chinese    |\tHond Kong          |\tHong Kong, traditional characters\n| zh-TW\t| Chinese    |\tTaiwan             |\tTaiwan, traditional characters","categories":["note"]},{"title":"杏鲍菇炒肉","url":"/2021/12/24/fried-meat-with-pleurotus-eryngii.html","content":"![ ](./fried-meat-with-pleurotus-eryngii/fried-meat-with-pleurotus-eryngii_00.jpg)\n\n#### 食材用料\n| 食材 | 数量 |\n| ---- | ---- |\n| 杏鲍菇   | 250克 |\n| 鸡胸肉   | 半块 |\n| 油      | 适量 |\n| 葱      | 适量 |\n| 姜      | 适量 |\n| 蒜      | 适量 |\n| 辣椒    | 适量 |\n| 花椒    | 适量 |\n| 盐      | 适量 |\n| 冰糖    | 适量 |\n| 生抽    | 适量 |\n| 老抽    | 少量 |\n| 耗油    | 适量 |\n| 十三香  | 适量 |\n\n#### 做法步骤\n| 图片 | 步骤  |\n| ---- | ---- |\n| ![ ](./fried-meat-with-pleurotus-eryngii/fried-meat-with-pleurotus-eryngii_01.jpg)    | <serial>1.</serial> 准备食材 |\n| ![ ](./fried-meat-with-pleurotus-eryngii/fried-meat-with-pleurotus-eryngii_02.jpg)    | <serial>2.</serial> 准备调料：葱姜蒜、辣椒、花椒 |\n| ![ ](./fried-meat-with-pleurotus-eryngii/fried-meat-with-pleurotus-eryngii_03.jpg)    | <serial>3.</serial> 杏鲍菇洗净切片 |\n| ![ ](./fried-meat-with-pleurotus-eryngii/fried-meat-with-pleurotus-eryngii_04.jpg)    | <serial>4.</serial> 肉切片，捏掉水 |\n| ![ ](./fried-meat-with-pleurotus-eryngii/fried-meat-with-pleurotus-eryngii_05.jpg)    | <serial>5.</serial> 放油中火，放调料爆香 |\n| ![ ](./fried-meat-with-pleurotus-eryngii/fried-meat-with-pleurotus-eryngii_06.jpg)    | <serial>6.</serial> 放肉片炒熟 |\n| ![ ](./fried-meat-with-pleurotus-eryngii/fried-meat-with-pleurotus-eryngii_07.jpg)    | <serial>7.</serial> 放入杏鲍菇片，大火翻炒变软 |\n| ![ ](./fried-meat-with-pleurotus-eryngii/fried-meat-with-pleurotus-eryngii_08.jpg)    | <serial>8.</serial> 放入盐、冰糖、生抽、老抽、十三香翻炒 |\n| ![ ](./fried-meat-with-pleurotus-eryngii/fried-meat-with-pleurotus-eryngii_09.jpg)    | <serial>9.</serial> 收锅 |\n| ![ ](./fried-meat-with-pleurotus-eryngii/fried-meat-with-pleurotus-eryngii_10.jpg)    | <serial>10.</serial> 装盘 |\n\n","categories":["cookbook"]},{"title":"NPM如何查看更新包版本","url":"/2021/10/22/npm-check-update.html","content":"#### 先查询有哪些包有更新\n``` bash\n$ npm outdated\n```\n\n#### 如查看xxx包的最新版本信息\n``` bash\n$ npm view xxx versions\n  or\n$ npm info xxx\n```\n\n#### 使用npm安装指定版本的包\n``` bash\n$ npm i xxx@1.11.1 --save-dev\n```\n\n#### 使用npm升级指定版本的包\n``` bash\n$ npm update xxx --save-dev\n```\n\n#### 安装xxx最新版本的包\n``` bash\n$ npm i xxx@latest --save-dev\n```\n\n#### 使用npm查看已安装的包列表\n``` bash\n$ npm list\n```\n\n#### 使用npm查看已安装某一指定包的版本信息\n``` bash\n$ npm list xxx\n```\n\n#### 使用npm-check查看更新包\n``` bash\n$ npm install -g npm-check  # 先全局安装 npm-check\n$ npm-check -u              # 查询当前项目下的包更新\n$ npm-check -u -g           # 查询全局安装的包更新\n```\n会列出所有的更新，上下键控制，空格选中或取消选中，选好了以后按回车就行了。","categories":["note"]},{"title":"香菇炖羊排","url":"/2021/10/19/stewed-lamb-chop-with-mushroom.html","content":"![ ](./stewed-lamb-chop-with-mushroom/stewed-lamb-chop-with-mushroom_00.jpg)\n\n#### 食材用料\n| 食材 | 数量 |\n| ---- | ---- |\n| 羊排    | 6个 |\n| 香菇    | 300克 |\n| 油      | 多量 |\n| 盐      | 适量 |\n| 辣椒    | 适量 |\n| 花椒    | 适量 |\n| 八角    | 适量 |\n| 孜然    | 适量 |\n\n> 羊排必须焯水去血沫，不然腥味重。\n\n#### 做法步骤\n| 图片 | 步骤  |\n| ---- | ---- |\n| ![ ](./stewed-lamb-chop-with-mushroom/stewed-lamb-chop-with-mushroom_01.jpg) | <serial>1.</serial> 准备食材 |\n| ![ ](./stewed-lamb-chop-with-mushroom/stewed-lamb-chop-with-mushroom_02.jpg) | <serial>2.</serial> 调料盘：辣椒、花椒、八角、孜然 |\n| ![ ](./stewed-lamb-chop-with-mushroom/stewed-lamb-chop-with-mushroom_03.jpg) | <serial>3.</serial> 羊排加水放血 |\n| ![ ](./stewed-lamb-chop-with-mushroom/stewed-lamb-chop-with-mushroom_04.jpg) | <serial>4.</serial> 温水焯水捞出 |\n| ![ ](./stewed-lamb-chop-with-mushroom/stewed-lamb-chop-with-mushroom_05.jpg) | <serial>5.</serial> 放入调料中火翻炒羊排 |\n| ![ ](./stewed-lamb-chop-with-mushroom/stewed-lamb-chop-with-mushroom_06.jpg) | <serial>6.</serial> 加水，放入切好的香菇，放入盐 |\n| ![ ](./stewed-lamb-chop-with-mushroom/stewed-lamb-chop-with-mushroom_07.jpg) | <serial>7.</serial> 中火炖煮30分钟 |\n| ![ ](./stewed-lamb-chop-with-mushroom/stewed-lamb-chop-with-mushroom_08.jpg) | <serial>8.</serial> 装盘 |\n","categories":["cookbook"]},{"title":"青椒炒肉","url":"/2021/09/05/green-pepper-parch-meat.html","content":"![ ](./green-pepper-parch-meat/green-pepper-parch-meat_00.jpg)\n\n#### 食材用料\n| 食材 | 数量 |\n| ---- | ---- |\n| 青椒    | 300克 |\n| 猪肉    | 120克 |\n| 油      | 适量 |\n| 蒜      | 适量 |\n| 盐      | 适量 |\n| 生抽    | 适量 |\n| 老抽    | 少量 |\n| 料酒    | 适量 |\n\n> 肉嫩青椒好吃关键：不能大火，全程中火。\n\n#### 做法步骤\n| 图片 | 步骤  |\n| ---- | ---- |\n| ![ ](./green-pepper-parch-meat/green-pepper-parch-meat_01.jpg)    | <serial>1.</serial> 准备食材 |\n| ![ ](./green-pepper-parch-meat/green-pepper-parch-meat_02.jpg)    | <serial>2.</serial> 准备调料：蒜、辣椒 |\n| ![ ](./green-pepper-parch-meat/green-pepper-parch-meat_03.jpg)    | <serial>3.</serial> 青椒切成丝 |\n| ![ ](./green-pepper-parch-meat/green-pepper-parch-meat_04.jpg)    | <serial>4.</serial> 肉切丝，捏掉水，放入淀粉、生抽、料酒 |\n| ![ ](./green-pepper-parch-meat/green-pepper-parch-meat_05.jpg)    | <serial>5.</serial> 搅拌成粘稠状腌一下 |\n| ![ ](./green-pepper-parch-meat/green-pepper-parch-meat_06.jpg)    | <serial>6.</serial> 放油中火，放调料爆香 |\n| ![ ](./green-pepper-parch-meat/green-pepper-parch-meat_07.jpg)    | <serial>7.</serial> 放肉丝炒熟 |\n| ![ ](./green-pepper-parch-meat/green-pepper-parch-meat_08.jpg)    | <serial>8.</serial> 放入青椒翻炒均匀 |\n| ![ ](./green-pepper-parch-meat/green-pepper-parch-meat_09.jpg)    | <serial>9.</serial> 放入盐、老抽翻炒 |\n| ![ ](./green-pepper-parch-meat/green-pepper-parch-meat_10.jpg)    | <serial>10.</serial> 收锅 |\n| ![ ](./green-pepper-parch-meat/green-pepper-parch-meat_11.jpg)    | <serial>11.</serial> 装盘 |\n","categories":["cookbook"]},{"title":"番茄香肠炒鸡蛋","url":"/2021/06/14/scrambled-egg-with-tomato-sausage.html","content":"![ ](./scrambled-egg-with-tomato-sausage/scrambled-egg-with-tomato-sausage_00.jpg)\n\n#### 食材用料\n| 食材 | 数量 |\n| ---- | ---- |\n| 番茄    | 250克 |\n| 鸡蛋    | 两个 |\n| 香肠    | 60克 |\n| 油      | 适量 |\n| 干辣椒   | 适量 |\n| 盐      | 适量 |\n| 冰糖    | 适量 |\n\n#### 做法步骤\n| 图片 | 步骤  |\n| ---- | ---- |\n| ![ ](./scrambled-egg-with-tomato-sausage/scrambled-egg-with-tomato-sausage_01.jpg) | <serial>1.</serial> 准备食材 |\n| ![ ](./scrambled-egg-with-tomato-sausage/scrambled-egg-with-tomato-sausage_02.jpg) | <serial>2.</serial> 番茄底部切掉，为了煮开的时候更好裂皮 |\n| ![ ](./scrambled-egg-with-tomato-sausage/scrambled-egg-with-tomato-sausage_03.jpg) | <serial>3.</serial> 开水煮到番茄表面裂皮 |\n| ![ ](./scrambled-egg-with-tomato-sausage/scrambled-egg-with-tomato-sausage_04.jpg) | <serial>4.</serial> 番茄剥皮 |\n| ![ ](./scrambled-egg-with-tomato-sausage/scrambled-egg-with-tomato-sausage_05.jpg) | <serial>5.</serial> 番茄切成小块 |\n| ![ ](./scrambled-egg-with-tomato-sausage/scrambled-egg-with-tomato-sausage_06.jpg) | <serial>6.</serial> 打入鸡蛋、葱花搅拌 |\n| ![ ](./scrambled-egg-with-tomato-sausage/scrambled-egg-with-tomato-sausage_07.jpg) | <serial>7.</serial> 香肠切片和辣椒装在一起 |\n| ![ ](./scrambled-egg-with-tomato-sausage/scrambled-egg-with-tomato-sausage_08.jpg) | <serial>8.</serial> 热锅热油，油冒烟放入鸡蛋液 |\n| ![ ](./scrambled-egg-with-tomato-sausage/scrambled-egg-with-tomato-sausage_09.jpg) | <serial>9.</serial> 放入香肠辣椒翻炒均匀 |\n| ![ ](./scrambled-egg-with-tomato-sausage/scrambled-egg-with-tomato-sausage_10.jpg) | <serial>10.</serial> 放入番茄块翻炒均匀，放入盐（番茄块用锅铲摁烂） |\n| ![ ](./scrambled-egg-with-tomato-sausage/scrambled-egg-with-tomato-sausage_11.jpg) | <serial>11.</serial> 收锅 |\n| ![ ](./scrambled-egg-with-tomato-sausage/scrambled-egg-with-tomato-sausage_12.jpg) | <serial>12.</serial> 装盘 |","categories":["cookbook"]},{"title":"JavaScript 注释规范","url":"/2021/04/28/javascript-document-convertions.html","content":"#### Type 语法\n| 类型名 | 语法示例 | 描述 |\n| ----- | ------- | --- |\n| Symbol name                  | {string}, {myNamespace.MyClass} | 指定符号的名称。 |\n| Multiple types               | {number\\|boolean}               | 这意味着值可能是几种类型中的一种，用\"\\|\"分隔类型的完整列表。 |\n| Arrays                       | {string[]}, {MyClass[]}         | 表达式`string[]`表示字符串数组，<br/> 表达式`{MyClass[]}`标识具有MyClass实例的数组 |\n| Objects                      | {a: number, b: string, c} <br/> // or <br/> {object} myObj <br/> {number} myObj.a <br/> {string} myObj.b <br/> {any} myObj.c | 对象“MyObj”中具有属性 'a' (一个数字) 'b' (一个字符串) 和 'c' (任何类型)，<br/> 对于具有一组已知的属性的对象，<br/> 你可以使用 Closure Compiler 语法文档化标注的类型。<br/> 你也可以分别描述每个属性，<br/> 这使你能够提供有关每个属性的更多详细信息。 |\n| Nullable type                | {?number}                       | 指明类型为指定的类型，或者为null。 |\n| Non-nullable type            | {!number}                       | 指明类型为指定的类型，但是绝对不会是null。 |\n| Variable number of that type | @param {...number} num          | 表示该函数接受可变数量的参数，并指定一个类型的参数。 |\n| Optional parameter           | @param {number} [foo=1]         | 指示参数是可选的, 你还可以指明参数的默认值。 |\n| Callbacks                    | @callback myCallback <br/> @param {number} x - ... | 使用@callback标签指明一个回调。<br/> 和@typedef标签是相同的，<br/> 不同之处在于回调的类型始终是\"function\"。 |\n| Type definitions             | @typedef {object} PropertiesHash <br/> @property {string} id <br/> @property {string} name <br/> @property {number} age | 你可以使用@typedef标签记录复杂类型。 |\n\n#### 常用注释关键字\n| 注释名 | 别名 | 描述 |\n| ----- | ---- | --- |\n| [@param](#param)             | @argument, @arg  | 记录传递给一个函数的参数。 |\n| [@return](#return)           | @returns         | 记录一个函数的返回值。 |\n| [@method](#method)           | @function, @func | 描述一个函数或方法。 |\n| [@typedef](#typedef)         |                  | 记录一个自定义的类型。 |\n| [@property](#property)       | @prop            | 记录一个对象的属性。 |\n| [@callback](#callback)       |                  | 描述一个回调函数。 |\n| [@author](#author)           |                  | 指定项目的作者。 |\n| [@copyright](#copyright)     |                  | 描述一个文件的版权信息。 |\n| [@description](#description) |                  | 描述一个标识。 |\n\n* #### @param\n记录传递给一个函数的参数。\n> 别名： @arg，@argument\n```javascript\n/**\n * @param {string} somebody - Somebody's name.\n */\nfunction sayHello(somebody) {\n  alert('Hello ' + somebody);\n}\n```\n如果参数是一个对象，有特定的属性：\n```javascript\n/**\n * Assign the project to an employee.\n * @param {object} employee            - The employee who is responsible for the project.\n * @param {string} employee.name       - The name of the employee.\n * @param {string} employee.department - The employee's department.\n */\nProject.prototype.assign = function(employee) { ... };\n```\n如果参数的属性值在数组中：\n```javascript\n/**\n * Assign the project to a list of employees.\n * @param {object[]} employees            - The employees who are responsible for the project.\n * @param {string} employees[].name       - The name of an employee.\n * @param {string} employees[].department - The employee's department.\n */\nProject.prototype.assign = function(employees) { ... };\n```\n一个可选参数和默认值：\n```javascript\n/**\n * @param {string} [somebody=John Doe] - Somebody's name.\n */\nfunction sayHello(somebody) {\n  if (!somebody) {\n    somebody = 'John Doe';\n  }\n  alert('Hello ' + somebody);\n}\n```\n允许一个类型或另一个类型：\n```javascript\n/**\n * @param {string|string[]} [somebody=John Doe] - Somebody's name, or an array of names.\n */\nfunction sayHello(somebody) {\n  if (!somebody) {\n    somebody = 'John Doe';\n  } else if (Array.isArray(somebody)) {\n    somebody = somebody.join(', ');\n  }\n  alert('Hello ' + somebody);\n}\n```\n参数接受一个回调函数：\n```javascript\n/**\n * @param {requestCallback} cb\n */\n/**\n * @callback requestCallback\n * @param {number} responseCode\n * @param {string} responseMessage\n */\nfunction doSomethingAsynchronously(cb) { ... }\n```\n\n* #### @return\n记录一个函数的返回值。\n> 别名： @returns\n```javascript\n/**\n * Returns the sum of a and b\n * @param {number} a\n * @param {number} b\n * @param {boolean} retArr If set to true, the function will return an array\n * @return {number|array} Sum of a and b or an array that contains a, b and the sum of a and b.\n */\nfunction sum(a, b, retArr) {\n  if (retArr) {\n    return [a, b, a + b];\n  }\n  return a + b;\n}\n```\n\n* #### @method\n描述一个函数或方法。\n> 别名： @function, @func\n```javascript\n/**\n * Returns the sum of a and b\n * @method sum\n * @param {number} a\n * @param {number} b\n * @return {number} Sum of a and b or an array that contains a, b and the sum of a and b.\n */\nfunction sum(a, b) {\n  return a + b;\n}\n```\n\n* #### @typedef\n记录一个自定义的类型。\n```javascript\n/**\n * The complete Triforce, or one or more components of the Triforce.\n * @typedef {Object} WishGranter~Triforce\n * @property {boolean} hasCourage - Indicates whether the Courage component is present.\n * @property {boolean} hasPower   - Indicates whether the Power component is present.\n * @property {boolean} hasWisdom  - Indicates whether the Wisdom component is present.\n */\n /**\n * A class for granting wishes, powered by the Triforce.\n * @class\n * @param {...WishGranter~Triforce} triforce - One to three {@link WishGranter~Triforce} objects\n * containing all three components of the Triforce.\n */\nfunction WishGranter() {}\n```\n\n* #### @property\n记录一个对象的属性。\n```javascript\n/**\n * @namespace\n * @property {object}  defaults               - The default values for parties.\n * @property {number}  defaults.players       - The default number of players.\n * @property {string}  defaults.level         - The default level for the party.\n * @property {object}  defaults.treasure      - The default treasure.\n * @property {number}  defaults.treasure.gold - How much gold the party starts with.\n */\nvar config = {\n  defaults: {\n    players: 1,\n    level: 'beginner',\n    treasure: {\n      gold: 0\n    }\n  }\n};\n```\n\n* #### @callback\n描述一个回调函数。\n```javascript\n/**\n * @class\n */\nfunction Requester() {}\n\n/**\n * Send a request.\n * @param {Requester~requestCallback} cb - The callback that handles the response.\n */\nRequester.prototype.send = function(cb) {\n  // code\n};\n\n/**\n * This callback is displayed as part of the Requester class.\n * @callback Requester~requestCallback\n * @param {number} responseCode\n * @param {string} responseMessage\n */\n```\n\n* #### @author\n指定项目的作者。\n```javascript\n/**\n * @author Zane Liu <liuzane@example.com>\n */\nfunction MyClass() {}\n```\n\n* #### @copyright\n描述一些版权信息。\n```javascript\n/**\n * @file This is my cool script.\n * @copyright Zane Liu 2021\n */\n```\n\n* #### @description\n描述一个标识。\n```javascript\n/**\n * @param {number} a\n * @param {number} b\n * @returns {number}\n * @description Add two numbers.\n */\nfunction add(a, b) {\n  return a + b;\n}\n```","categories":["javascript"]},{"title":"香菇炒肉","url":"/2021/04/05/mushroom-fried-meat.html","content":"![ ](./mushroom-fried-meat/mushroom-fried-meat_00.jpg)\n\n#### 食材用料\n| 食材 | 数量 |\n| ---- | ---- |\n| 香菇    | 250克 |\n| 鸡胸肉  | 半块 |\n| 青椒    | 一个 |\n| 油      | 少量 |\n| 蒜      | 适量 |\n| 葱      | 适量 |\n| 辣椒    | 适量 |\n| 花椒    | 适量 |\n| 盐      | 适量 |\n| 老抽    | 适量 |\n| 十三香  | 适量 |\n| 豆瓣酱  | 适量 |\n\n#### 做法步骤\n| 图片 | 步骤  |\n| ---- | ---- |\n| ![ ](./mushroom-fried-meat/mushroom-fried-meat_01.jpg) | <serial>1.</serial> 准备食材 |\n| ![ ](./mushroom-fried-meat/mushroom-fried-meat_02.jpg) | <serial>2.</serial> 准备调料：蒜切片、辣椒、花椒、葱花 |\n| ![ ](./mushroom-fried-meat/mushroom-fried-meat_03.jpg) | <serial>3.</serial> 蘑菇切片焯水装盘 |\n| ![ ](./mushroom-fried-meat/mushroom-fried-meat_04.jpg) | <serial>4.</serial> 肉切片，捏掉水 |\n| ![ ](./mushroom-fried-meat/mushroom-fried-meat_05.jpg) | <serial>5.</serial> 青椒切成条 |\n| ![ ](./mushroom-fried-meat/mushroom-fried-meat_06.jpg) | <serial>6.</serial> 放油放入调料爆香 |\n| ![ ](./mushroom-fried-meat/mushroom-fried-meat_07.jpg) | <serial>7.</serial> 中火放入肉炒熟 |\n| ![ ](./mushroom-fried-meat/mushroom-fried-meat_08.jpg) | <serial>8.</serial> 放入青椒、蘑菇大火翻炒 |\n| ![ ](./mushroom-fried-meat/mushroom-fried-meat_09.jpg) | <serial>9.</serial> 放入盐、老抽、十三香、豆瓣酱 |\n| ![ ](./mushroom-fried-meat/mushroom-fried-meat_10.jpg) | <serial>10.</serial> 大火翻炒几下 |\n| ![ ](./mushroom-fried-meat/mushroom-fried-meat_11.jpg) | <serial>11.</serial> 出锅 |\n| ![ ](./mushroom-fried-meat/mushroom-fried-meat_12.jpg) | <serial>12.</serial> 装盘 |\n","categories":["cookbook"]},{"title":"ScrollContainer Component","url":"/2020/12/30/scroll-container.html","content":"### 滚动容器组件\n\n* Plugin\n| Name | Link |\n| ---- | ---- |\n| prop-types | [https://github.com/facebook/prop-types](https://github.com/facebook/prop-types) |\n\n* Usage\n```javascript\nnull\n```\n\n* ScrollContainer\n```javascript\n// 基础模块\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\n\nclass ScrollContainer extends Component {\n  static propTypes = {\n    className: PropTypes.string,\n    style: PropTypes.object,\n    tagName: PropTypes.string,\n    scrollBottomDistance: PropTypes.oneOfType([ PropTypes.number, PropTypes.string ]),\n    onScrollBottom: PropTypes.func,\n    children: PropTypes.node,\n  }\n\n  static defaultProps = {\n    tagName: 'div',\n    scrollBottomDistance: 100,\n    onScrollBottom: () => {},\n  }\n\n  constructor(props) {\n    super(props);\n    this.scrollBottom = false;\n  }\n\n  // 监听content是否滑动到底部\n  onScroll = (e) => {\n    const { onScrollBottom } = this.props;\n    const target = e.currentTarget;\n    const scrollHeight = target.scrollHeight;\n    const scrollTop = target.scrollTop;\n    const clientHeight = target.clientHeight;\n    const scrollBottomDistance = parseInt(this.props.scrollBottomDistance);\n\n    if (scrollHeight - clientHeight > (scrollTop + scrollBottomDistance)) {\n      this.scrollBottom = false;\n    }\n\n    if (!this.scrollBottom && (scrollHeight - clientHeight <= (scrollTop + scrollBottomDistance))) {\n      //滚动条滚到最底部\n      this.scrollBottom = true;\n      onScrollBottom();\n    }\n  }\n\n  render() {\n    const { className, style, children } = this.props;\n    return (\n      <this.props.tagName \n        className={className}\n        style={style}\n        onScroll={this.onScroll}\n      >\n        {children}\n      </this.props.tagName>\n    );\n  }\n}\n\nexport default ScrollContainer;\n```","categories":["react"]},{"title":"Screenshot Component","url":"/2020/12/30/screenshot.html","content":"### 截屏组件\n\n* Plugin\n| Name | Link |\n| ---- | ---- |\n| prop-types | [https://github.com/facebook/prop-types](https://github.com/facebook/prop-types) |\n| html2canvas | [http://html2canvas.hertzen.com](http://html2canvas.hertzen.com) |\n\n* Usage\n```javascript\nnull\n```\n\n* Screenshot.jsx\n```javascript\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport html2canvas from 'html2canvas';\n\nimport './Screenshot.css';\n\n\nclass Screenshot extends Component {\n  static propTypes = {\n    options: PropTypes.object,\n    className: PropTypes.string,\n    style: PropTypes.object,\n    children: PropTypes.node,\n    callback: PropTypes.func,\n    onRef: PropTypes.func,\n  }\n\n  static defaultProps = {\n    options: {},\n    callback: () => {},\n    onRef: () => {},\n  }\n\n  constructor(props) {\n    super(props);\n    this.Element = React.createRef();\n    \n    Screenshot.screenshot = this.screenshot.bind(this);\n  }\n\n  componentDidMount() {\n    this.props.onRef(this.Element);\n  }\n\n  // 截图\n  screenshot = () => {\n    const { callback } = this.props;\n    const Element = this.Element.current;\n    const options = {\n      logging: false,\n      scale: 2,\n      scrollX: 0,\n      scrollY: 0,\n      backgroundColor: null,\n      useCORS: true,\n    };\n    // Element.classList.add('screenshot');\n    html2canvas(Element, options).then((canvas) => {\n      // Element.classList.remove('screenshot');\n      callback(canvas);\n    });\n  }\n\n  render() {\n    const { className, style, children } = this.props;\n    return (\n      <div ref={this.Element} className={className} style={style}>{children}</div>\n    );\n  }\n}\n\nexport default Screenshot;\n```\n\n* Screenshot.css\n```css\n.screenshot {\n  position: fixed !important;\n  top: 0 !important;\n  left: 0 !important;\n}\n```","categories":["react"]},{"title":"香辣虾","url":"/2020/12/27/fried-shrimp-with-chilli.html","content":"![ ](./fried-shrimp-with-chilli/fried-shrimp-with-chilli_00.jpg)\n\n#### 食材用料\n| 食材 | 数量 |\n| ---- | ---- |\n| 基围虾    | 10个 |\n| 油      | 适量 |\n| 葱      | 适量 |\n| 蒜      | 适量 |\n| 姜      | 适量 |\n| 辣椒    | 适量 |\n| 香叶    | 适量 |\n| 盐      | 适量 |\n| 清水    | 半碗 |\n| 生抽    | 适量 |\n\n#### 做法步骤\n| 图片 | 步骤  |\n| ---- | ---- |\n| ![ ](./fried-shrimp-with-chilli/fried-shrimp-with-chilli_01.jpg)    | <serial>1.</serial> 准备食材 |\n| ![ ](./fried-shrimp-with-chilli/fried-shrimp-with-chilli_02.jpg)    | <serial>2.</serial> 葱切段，姜切撕，蒜切末装盘 |\n| ![ ](./fried-shrimp-with-chilli/fried-shrimp-with-chilli_03.jpg)    | <serial>3.</serial> 调料汁：清水、生抽、盐、香叶 |\n| ![ ](./fried-shrimp-with-chilli/fried-shrimp-with-chilli_04.jpg)    | <serial>4.</serial> 虾洗净，挑去虾线 |\n| ![ ](./fried-shrimp-with-chilli/fried-shrimp-with-chilli_05.jpg)    | <serial>5.</serial> 热锅热油，下虾，煎至两面成漂亮的红色出虾油后，盛出虾（用锅铲轻轻压一压虾，红油出的多） |\n| ![ ](./fried-shrimp-with-chilli/fried-shrimp-with-chilli_06.jpg)    | <serial>6.</serial> 把葱和姜放入虾油锅中爆香 |\n| ![ ](./fried-shrimp-with-chilli/fried-shrimp-with-chilli_07.jpg)    | <serial>7.</serial> 放入煎好的虾，倒入调料汁 |\n| ![ ](./fried-shrimp-with-chilli/fried-shrimp-with-chilli_08.jpg)    | <serial>8.</serial> 大火收汁 |\n| ![ ](./fried-shrimp-with-chilli/fried-shrimp-with-chilli_09.jpg)    | <serial>9.</serial> 装盘 |\n","categories":["cookbook"]},{"title":"ClickOutside Component","url":"/2020/12/25/click-outside.html","content":"### 点击到元素外面组件\n\n* Plugin\n| Name | Link |\n| ---- | ---- |\n| prop-types | [https://github.com/facebook/prop-types](https://github.com/facebook/prop-types) |\n| immutable | [https://github.com/immutable-js/immutable-js](https://github.com/immutable-js/immutable-js) |\n\n* Usage\n```javascript\nnull\n```\n\n* ClickOutside.jsx\n```javascript\n// 基础模块\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\n// 第三方模块\nimport { fromJS, is } from 'immutable';\n\n\nclass ClickOutside extends Component {\n  static propTypes = {\n    tag: PropTypes.string.isRequired,\n    children: PropTypes.element,\n    onOutside: PropTypes.func,\n  };\n\n  static defaultProps = {\n    onOutside: () => {},\n  };\n\n  constructor(props) {\n    super(props);\n    this.Tag = React.createRef();\n  }\n\n  componentDidMount() {\n    document.addEventListener('click', this.isOutside);\n  }\n\n  componentWillunmount() {\n    document.removeEventListener('click', this.isOutside);\n  }\n\n  isOutside = event => {\n    let [ isChild, node ] = [ false, event.target ];\n    while (node && node.id !== 'root') {\n      if (is(fromJS(node), fromJS(this.refs.tag))) {\n        isChild = true;\n        break;\n      }\n      node = node.parentNode;\n    }\n    if (!isChild) {\n      this.props.onOutside();\n    }\n  }\n\n  render() {\n    const { tag, children, ...restProps } = this.props;\n    return (\n      <this.props.tag\n        ref={this.Tag}\n        onClick={ this.isOutside }\n        {...restProps}\n      >\n        { children }\n      </this.props.tag>\n    );\n  }\n}\n\nexport default ClickOutside;\n```","categories":["react"]},{"title":"Validate Component","url":"/2020/12/25/validate.html","content":"### 自定义验证组件\n\n* Plugin\n| Name | Link |\n| ---- | ---- |\n| prop-types | [https://github.com/facebook/prop-types](https://github.com/facebook/prop-types) |\n| immutable | [https://github.com/immutable-js/immutable-js](https://github.com/immutable-js/immutable-js) |\n| lodash | [https://www.lodashjs.com](https://www.lodashjs.com) |\n\n* Usage\n```javascript\nclass Desktop extends PureComponent {\n  constructor() {\n    super();\n    this.state = {\n      model: {\n        name: '',\n        phone: '',\n      },\n      rules: {\n        name: {\n          required: true,\n          message: 'Please type name',\n        },\n        phone: [\n          {\n            required: true,\n            message: 'Please type phone',\n          },\n          {\n            validator(rule, value, callback) {\n              console.log('rule', rule);\n              console.log('value', value);\n              if (!/^1\\d{10}$/.test(value)) {\n                callback('Please type the correct phone, inside');\n              } else {\n                callback();\n              }\n            },\n            message: 'Please type the correct phone, outside',\n          }\n        ]\n      }\n    };\n  }\n\n  onSetValue = (key, e) => {\n    const value = e.target.value;\n    const model = _.cloneDeep(this.state.model);\n    model[key] = value;\n    this.setState({ model });\n  }\n\n  handleValidate = () => {\n    Validate.validate((error, model) => {\n      console.log('error', error);\n      console.log('model', model);\n    });\n  }\n\n  render() {\n    const { model, rules } = this.state;\n    return (\n      <LayContainer>\n        <Validate model={model} rules={rules}>\n          {\n            (messages) => (\n              <div className=\"validate-wrap\">\n                <div className=\"validate-row\">\n                  <Input value={model.name} placeholder=\"Please type name\" onChange={this.onSetValue.bind(this, 'name')}/>\n                  <p>{messages.name}</p>\n                </div>\n                <div className=\"validate-row\">\n                  <Input value={model.phone} placeholder=\"Please type phone\" onChange={this.onSetValue.bind(this, 'phone')}/>\n                  <p>{messages.phone}</p>\n                </div>\n                <Button onClick={this.handleValidate}>验证</Button>\n              </div>\n            )\n          }\n        </Validate>\n      </LayContainer>\n    );\n  }\n}\n```\n\n* Validate.jsx\n```javascript\n// 基础模块\nimport { Component } from 'react';\nimport PropTypes from 'prop-types';\n\n// 第三方模块\nimport { fromJS, is } from 'immutable';\nimport _ from 'lodash';\n\n\nclass Validate extends Component {\n  static propTypes = {\n    model: PropTypes.object,\n    rules: PropTypes.object,\n    children: PropTypes.func,\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      messages: {},\n      originalModel: {},\n      isValidated: {},\n    };\n    Validate.validate = this.validate;\n  }\n\n  // 初始化设置原始model数据\n  componentWillMount() {\n    const { model } = this.props;\n    this.setState({ originalModel: model });\n  }\n\n  // 如果更新了 model 就获取 messages\n  componentWillReceiveProps(nextProps) {\n    if (!is(fromJS(this.props.model), fromJS(nextProps.model))) {\n      const messages = this.getValidateMessages(nextProps.model);\n      this.setState({ messages });\n    }\n  }\n\n  shouldComponentUpdate (nextProps, nextState) {\n    return !is(fromJS(this.props), fromJS(nextProps)) || !is(fromJS(this.state), fromJS(nextState));\n  }\n\n  // 验证规则项\n  validateRuleItem = (rule, value) => {\n    if (rule.required && !value) {\n      return rule.message;\n    }\n    \n    if (rule.validator) {\n      let message;\n      const callback = errorMsg => {\n        message = errorMsg || rule.message;\n      };\n      rule.validator(rule, value, callback);\n      return message;\n    }\n  }\n\n  // 获取验证错误信息\n  getValidateMessages = (model, isValidate) => {\n    const messages = {};\n    const { rules } = this.props;\n    const { originalModel, isValidated } = this.state;\n\n    for (const key in rules) {\n      if (isValidate || (model[key] !== undefined && (model[key] !== originalModel[key] || isValidated[key]))) {\n        // 计算 key 更新次数\n        isValidated[key] = true;\n\n        // 如果规则项是数组\n        if (_.isArray(rules[key])) {\n          for (let i = 0; i < rules[key].length; i++) {\n            const message = this.validateRuleItem(rules[key][i], model[key]);\n            if (message) {\n              messages[key] = message;\n              break;\n            }\n          }\n          continue;\n        }\n        \n        // 如果规则项是对象\n        if (_.isPlainObject(rules[key])) {\n          const message = this.validateRuleItem(rules[key], model[key]);\n          if (message) messages[key] = message;\n          continue;\n        }\n      }\n    }\n\n    this.setState({ countModel: _.cloneDeep(isValidated) });\n\n    return messages;\n  }\n\n  // 外部调用验证方法\n  validate = (callback) => {\n    const { model } = this.props;\n    const messages = this.getValidateMessages(model, true);\n    const error = Object.keys(messages).length > 0 ? messages : null;\n    this.setState({ messages });\n    callback(error, model);\n  }\n\n  render () {\n    const { children } = this.props;\n    const { messages } = this.state;\n\n    return children(messages);\n  }\n}\n\nexport default Validate;\n```","categories":["react"]},{"title":"localStorage","url":"/2020/12/10/local-storage.html","content":"* #### setStorage(key, data, hours)\n设置localStorage\n```javascript\n/**\n* @method setStorage\n* @param {string} key\n* @param {any} data\n* @param {number} hours\n* @return {boolean}\n*/\nfunction setStorage(key, data, hours) {\n  let expires;\n\n  if (!key || !data) {\n    console.error('[localStorage Error]: Key and Data is a must parameter');\n    return false;\n  }\n\n  expires = hours ? new Date().getTime() + 1000 * 60 * 60 * hours : new Date(0).getTime();\n  localStorage.setItem(key, JSON.stringify({ data, expires }));\n\n  return true;\n}\n```\n\n* #### getStorage(key)\n获取localStorage\n```javascript\n/**\n* @method getStorage\n* @param {string} key\n* @return {boolean|null}\n*/\nfunction getStorage(key) {\n  let data, nowTime = new Date().getTime();\n\n  if (!key) console.error('[localStorage Error]: Key is a must parameter');\n\n  try {\n    data = JSON.parse(localStorage.getItem(key));\n  } catch (error) {\n    return localStorage.getItem(key);\n  }\n\n  if (!data) return null;\n\n  if (!Boolean(data.expires) || data.expires >= nowTime) {\n    return data.data;\n  } else {\n    localStorage.removeItem(key);\n    return null;\n  }\n}\n```\n\n* #### clearStorage(key)\n清除localStorage\n```javascript\n/**\n* @method clearStorage\n* @param {string} key\n*/\nfunction clearStorage(key) {\n  if (key) {\n    localStorage.removeItem(key);\n  } else {\n    localStorage.clear();\n  }\n}\n```","categories":["javascript"]},{"title":"Cookies","url":"/2020/12/10/cookies.html","content":"* #### setCookie(params)\n设置Cookie\n```javascript\n/**\n* @method setCookie\n* @param {object} options\n* @param {string} options.key\n* @param {string} options.value\n* @param {number} [options.hours]\n* @param {string} [options.path]   - path: '/'\n* @param {string} [options.domain] - domain: document.domain\n*/\nfunction setCookie(options) {\n  let time = new Date(), expires = '', path = '', domain = '';\n\n  if (!options.key || !options.value) {\n    console.error('[Cookie Error]: key, value must be set.');\n    return;\n  }\n\n  if (options.hours) {\n    try {\n      Number(options.hours);\n    } catch (e) {\n      console.error('[Cookie Error]: expires must is number.');\n    }\n\n    time.toGMTString(time.setTime(time.getTime() + 1000 * 60 * 60 * options.hours));\n    expires = 'expires=' + time + ';';\n  }\n\n  if (options.path) path = 'path=' + options.path + ';';\n\n  if (options.domain) domain = 'domain=' + options.domain;\n\n  document.cookie = options.key + '=' + options.value + ';' + expires + path + domain;\n}\n```\n\n* #### getCookie(key)\n获取Cookie\n```javascript\n/**\n* @method getCookie\n* @param {string} key \n* @return {undefined|string|null}\n*/\nfunction getCookie(key) {\n  if (!key) {\n    console.error('[Cookie Error]: key is ' + (typeof key) + '.');\n    return;\n  }\n  const regexp = new RegExp('(^|; )' + key + '=.*?(;|$)');\n  const result = document.cookie.match(regexp);\n  const value = result ? result[0].replace(/[; ]/g, '').split('=')[1] : null;\n  return value;\n}\n```\n\n* #### deleteCookie(param)\n```javascript\n/**\n* @method deleteCookie\n* @param {string|object} param\n* @param {string} param.key\n* @param {string} [param.path]\n* @param {string} [param.domain]\n* @return {undefined|string|null}\n*/\nfunction deleteCookie(param) {\n  const options = typeof param === 'object' ? param : {};\n  const key = typeof param === 'string' ? param : options.key;\n\n  if (!key) {\n    console.error('[Cookie Error]: key is ' + (typeof key) + '.');\n    return;\n  }\n  if (options.path) path = 'path=' + options.path + ';';\n  if (options.domain) domain = 'domain=' + options.domain + ';';\n\n  const regexp = new RegExp('(^|; )' + key + '=.*?(;|$)');\n  const result = document.cookie.match(regexp);\n  const item = result ? result[0].replace(/[; ]/g, '') : '';\n  const time = new Date();\n  time.toGMTString(time.setTime(0));\n  document.cookie = item + ';expires=' + time + ';' + options.path + options.domain;\n}\n```\n\n* #### clearCookie(params)\n清除Cookie\n```javascript\n/**\n* @method clearCookie\n* @param {object} [options]\n* @param {string} [options.path]\n* @param {string} [options.domain]\n*/\nfunction clearCookie(options) {\n  let arr = document.cookie.split(';'), path = '', domain = '';\n\n  if (!options) options = {};\n  if (options.path) path = 'path=' + options.path + ';';\n  if (options.domain) domain = 'domain=' + options.domain + ';';\n\n  for (let i = 0; i < arr.length; i++) {\n    let key = arr[i].substring(0, arr[i].indexOf('='));\n    document.cookie = key + '=0;expires=Thu, 01 Jan 1970 00:00:00 GMT;' + path + domain;\n  }\n}\n```","categories":["javascript"]},{"title":"Assist","url":"/2020/12/10/assist.html","content":"#### 方法集合：\n| 方法名称 | 描述 |\n| ------- | --- |\n| [typeOf](#typeOf-anything) | 验证数据类型。 |\n| [deepCopy](#deepCopy-data) | 深拷贝。 |\n| [uuid](#uuid) | 生成 UUID。 |\n| [download](#download-url-name) | 下载。 |\n| [getUrlArg](#getUrlArg-name) | 根据名称获取路径参数。 |\n| [getUrlQuery](#getUrlQuery-name) | 将路径参数转化为对象格式。 |\n| [setUrlQuery](#setUrlQuery-url) | 将对象格式转化为路径参数。 |\n| [getDeepValueOfObject](#getDeepValueOfObject-object-keyPath-defaultValue) | 获取对象深层值。 |\n| [toThousands](#toThousands-number) | 转化为千位分隔符格式。 |\n\n* #### typeOf(anything)\n验证数据类型。\n> 返回值均为字符串\n```javascript\n/**\n * @method typeOf\n * @param {any} obj\n * @return {string}\n */\nfunction typeOf(obj) {\n  const toString = Object.prototype.toString;\n  const map = {\n    '[object Boolean]': 'boolean',\n    '[object Number]': 'number',\n    '[object String]': 'string',\n    '[object Function]': 'function',\n    '[object Array]': 'array',\n    '[object Date]': 'date',\n    '[object RegExp]': 'regExp',\n    '[object Undefined]': 'undefined',\n    '[object Null]': 'null',\n    '[object Object]': 'object'\n  };\n\n  return map[toString.call(obj)];\n}\n\nconsole.log(typeOf('abc')); // string\nconsole.log(typeOf(['a', 'b', 'c'])); // array\nconsole.log(typeOf({ a: 1, b: 2, c: 3 })); // object\n```\n\n* #### deepCopy(data)\n深拷贝。\n> 该方法需要结合 `typeOf()` 方法一起使用\n```javascript\n/**\n * @method deepCopy\n * @param {object|array} data\n * @return {object|array}\n */\nfunction deepCopy(data) {\n  const type = typeOf(data);\n  let object;\n\n  if (type === 'array') {\n    object = [];\n  } else if (type === 'object') {\n    object = {};\n  } else {\n    return data;\n  }\n\n  if (type === 'array') {\n    for (let i = 0; i < data.length; i ++) {\n      object.push(deepCopy(data[i]));\n    }\n  } else if (type === 'object') {\n    for (const key in data) {\n      if (data.hasOwnProperty(key)) {\n        object[key] = deepCopy(data[key]);\n      }\n    }\n  }\n  return object;\n}\n\nconst obj1 = { a: 1, b: 2, c: 3 };\nconst obj2 = deepCopy(obj1);\nconsole.log(obj1 === obj2); // false\n```\n\n* #### uuid()\n生成 UUID。\n```javascript\n/**\n * @method uuid\n * @return {string}\n */\nfunction uuid() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    const r = Math.random() * 16 | 0;\n    const v = c === 'x' ? r : (r & 0x3 | 0x8);\n\n    return v.toString(16);\n  });\n}\n\nconsole.log(uuid()); // xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\n```\n\n* #### download(url, name)\n下载。\n```javascript\n/**\n * @method download\n * @param {string} url\n * @param {string} name\n */\nfunction download(url, name) {\n  const aDom = document.createElement('a');\n  aDom.download = name;\n  aDom.href = url;\n  document.body.appendChild(aDom);\n  aDom.click();\n  aDom.remove();\n}\n\nconsole.log(download('word.docx', 'https://www.test.com/word.docx')); // word.docx\n```\n\n* #### getUrlArg(name)\n根据名称获取路径参数。\n```javascript\n/**\n * @method getUrlArg\n * @param {string} name\n * @return {string}\n */\nfunction getUrlArg(name) {\n  const search = window.location.search;\n  const regexp = new RegExp(`(^|&)${name}=([^&]*)(&|$)`);\n  const arg = search.substr(1).match(regexp);\n  return arg ? arg[2] : '';\n}\n```\n\n* #### getUrlQuery(url)\n将路径参数转化为对象格式。\n```javascript\n/**\n * @method getUrlQuery\n * @param {string} url\n * @return {object}\n */\nfunction getUrlQuery(url) {\n  const query = url.substring(url.indexOf('?') + 1).split('&');\n  const params = {};\n  query.forEach(item => {\n    const key_value = item.split('=');\n    params[key_value[0]] = key_value[1];\n  });\n  return params;\n}\n\nconst url = 'https://www.test.com/query?a=1&b=2&c=3';\nconsole.log(getUrlQuery(url)); // { a: 1, b: 2, c: 3 }\n```\n\n* #### setUrlQuery(url)\n将对象格式转化为路径参数。\n```javascript\n/**\n * @method setUrlQuery\n * @param {object} params\n * @return {string}\n */\nfunction setUrlQuery(params) {\n  const querys = [];\n  for (const key in params) {\n    if (params.hasOwnProperty(key)) {\n      querys.push(key + '=' + params[key]);\n    }\n  }\n  return querys.join('&');\n}\n\nconst params = { a: 1, b: 2, c: 3 };\nconsole.log(setUrlQuery(params)); // 'a=1&b=2&c=3'\n```\n\n* #### getDeepValueOfObject(object, keyPath, defaultValue)\n获取对象深层值。\n```javascript\n/**\n * @method getDeepValueOfObject\n * @param {object|array} object\n * @param {string} keyPath\n * @param {any} [defaultValue]\n * @return {any}\n */\nfunction getDeepValueOfObject(object, keyPath, defaultValue) {\n  const isString = typeof keyPath === 'string';\n  if (!isString) {\n    console.warn('[getDeepValueOfObject warn]: keyPath is not a string, type ' + typeof keyPath);\n  }\n  \n  if (object && keyPath && isString) {\n    const keys = keyPath.split('.');\n    let value = object;\n    for (let index = 0; index < keys.length; index++) {\n      const key = keys[index];\n      if (value[key] !== undefined) {\n        value = value[key];\n      } else {\n        value = defaultValue;\n      }\n    }\n    return value;\n  } else {\n    return defaultValue;\n  }\n}\n\nconst obj = {\n  foo: {\n    number: 3\n  },\n  bar: 2,\n};\nconst arr = [ obj ];\n\nconsole.log(getDeepValueOfObject(obj, 'foo.number')); // 3\nconsole.log(getDeepValueOfObject(obj, 'bar.number')); // undefined\nconsole.log(getDeepValueOfObject(obj, 'bar.number', 'default')); // 'default'\nconsole.log(getDeepValueOfObject(obj, '')); // undefined\nconsole.log(getDeepValueOfObject(obj, '', 'default')); // 'default'\nconsole.log(getDeepValueOfObject(arr, 0)); // undefined\nconsole.log(getDeepValueOfObject(arr, '0.foo.number')); // 3\n```\n\n* #### toThousands(number)\n转化为千位分隔符格式\n```javascript\n/**\n * @method toThousands\n * @param {number|string} number\n * @return {string}\n */\nfunction toThousands(number) {\n  if (Math.abs(Number(number)) >= 1000) {\n    const [integer, float] = (number || 0).toString().split('.');\n    const thousandsInteger = integer.replace(/(\\d)(?=(?:\\d{3})+$)/g, '$1,');\n    return thousandsInteger + (float ? '.' + float : '');\n  } else {\n    return number;\n  }\n}\n```","categories":["javascript"]},{"title":"黄瓜炒香肠","url":"/2020/12/05/sauteed-cucumber-sausage.html","content":"![ ](./sauteed-cucumber-sausage/sauteed-cucumber-sausage_00.jpg)\n\n#### 食材用料\n| 食材 | 数量 |\n| ---- | ---- |\n| 黄瓜    | 1根 |\n| 香肠    | 2根 |\n| 油      | 适量 |\n| 蒜      | 适量 |\n| 盐      | 适量 |\n| 鸡精    | 适量 |\n| 生抽    | 适量 |\n\n#### 做法步骤\n| 图片 | 步骤  |\n| ---- | ---- |\n| ![ ](./sauteed-cucumber-sausage/sauteed-cucumber-sausage_01.jpg)    | <serial>1.</serial> 准备食材 |\n| ![ ](./sauteed-cucumber-sausage/sauteed-cucumber-sausage_02.jpg)    | <serial>2.</serial> 蒜切末装盘 |\n| ![ ](./sauteed-cucumber-sausage/sauteed-cucumber-sausage_03.jpg)    | <serial>3.</serial> 黄瓜切成片 |\n| ![ ](./sauteed-cucumber-sausage/sauteed-cucumber-sausage_04.jpg)    | <serial>4.</serial> 香肠斜切成片 |\n| ![ ](./sauteed-cucumber-sausage/sauteed-cucumber-sausage_05.jpg)    | <serial>5.</serial> 热锅热油，下香肠，炒至表面略焦装盘备用 |\n| ![ ](./sauteed-cucumber-sausage/sauteed-cucumber-sausage_06.jpg)    | <serial>6.</serial> 另起油下蒜末爆香 |\n| ![ ](./sauteed-cucumber-sausage/sauteed-cucumber-sausage_07.jpg)    | <serial>7.</serial> 下黄瓜片翻炒均匀 |\n| ![ ](./sauteed-cucumber-sausage/sauteed-cucumber-sausage_08.jpg)    | <serial>8.</serial> 加入香肠、盐、生抽和鸡精翻炒均匀 |\n| ![ ](./sauteed-cucumber-sausage/sauteed-cucumber-sausage_09.jpg)    | <serial>9.</serial> 收锅 |\n| ![ ](./sauteed-cucumber-sausage/sauteed-cucumber-sausage_10.jpg)    | <serial>10.</serial> 装盘 |\n","categories":["cookbook"]},{"title":"芹菜炒肉","url":"/2020/11/30/celery-fried-meat.html","content":"![ ](./celery-fried-meat/celery-fried-meat_00.jpg)\n\n#### 食材用料\n| 食材 | 数量 |\n| ---- | ---- |\n| 芹菜    | 200克 |\n| 鸡胸肉  | 半块 |\n| 油      | 适量 |\n| 蒜      | 适量 |\n| 胡椒粉  | 适量 |\n| 淀粉    | 适量 |\n| 盐      | 适量 |\n| 生抽    | 适量 |\n\n#### 做法步骤\n| 图片 | 步骤  |\n| ---- | ---- |\n| ![ ](./celery-fried-meat/celery-fried-meat_01.jpg) | <serial>1.</serial> 准备食材 |\n| ![ ](./celery-fried-meat/celery-fried-meat_02.jpg) | <serial>2.</serial> 准备调料：蒜切片 |\n| ![ ](./celery-fried-meat/celery-fried-meat_03.jpg) | <serial>3.</serial> 芹菜切段，焯水 |\n| ![ ](./celery-fried-meat/celery-fried-meat_04.jpg) | <serial>4.</serial> 肉切片，捏掉水，加入生抽、胡椒粉、淀粉 |\n| ![ ](./celery-fried-meat/celery-fried-meat_05.jpg) | <serial>5.</serial> 搅拌至粘稠 |\n| ![ ](./celery-fried-meat/celery-fried-meat_06.jpg) | <serial>6.</serial> 放油中火，放入调料爆香 |\n| ![ ](./celery-fried-meat/celery-fried-meat_07.jpg) | <serial>7.</serial> 放入肉片翻炒 |\n| ![ ](./celery-fried-meat/celery-fried-meat_08.jpg) | <serial>8.</serial> 放入芹菜段，再加入一点点水大火翻炒 |\n| ![ ](./celery-fried-meat/celery-fried-meat_09.jpg) | <serial>9.</serial> 放盐、一点点老抽翻炒 |\n| ![ ](./celery-fried-meat/celery-fried-meat_10.jpg) | <serial>10.</serial> 收锅 |\n| ![ ](./celery-fried-meat/celery-fried-meat_11.jpg) | <serial>11.</serial> 装盘 |\n","categories":["cookbook"]},{"title":"芹菜香肠炒鸡蛋","url":"/2020/11/29/scrambled-eggs-with-celery-sausage.html","content":"![ ](./scrambled-eggs-with-celery-sausage/scrambled-eggs-with-celery-sausage_00.jpg)\n\n#### 食材用料\n| 食材 | 数量 |\n| ---- | ---- |\n| 芹菜    | 150克 |\n| 香肠    | 2根 |\n| 鸡蛋    | 2个 |\n| 油      | 少量 |\n| 蒜      | 适量 |\n| 盐      | 适量 |\n| 生抽    | 适量 |\n\n#### 做法步骤\n| 图片 | 步骤  |\n| ---- | ---- |\n| ![ ](./scrambled-eggs-with-celery-sausage/scrambled-eggs-with-celery-sausage_01.jpg) | <serial>1.</serial> 准备食材 |\n| ![ ](./scrambled-eggs-with-celery-sausage/scrambled-eggs-with-celery-sausage_02.jpg) | <serial>2.</serial> 蒜切末装起来 |\n| ![ ](./scrambled-eggs-with-celery-sausage/scrambled-eggs-with-celery-sausage_03.jpg) | <serial>3.</serial> 芹菜切段 |\n| ![ ](./scrambled-eggs-with-celery-sausage/scrambled-eggs-with-celery-sausage_04.jpg) | <serial>4.</serial> 香肠切片 |\n| ![ ](./scrambled-eggs-with-celery-sausage/scrambled-eggs-with-celery-sausage_05.jpg) | <serial>5.</serial> 鸡蛋打散 |\n| ![ ](./scrambled-eggs-with-celery-sausage/scrambled-eggs-with-celery-sausage_06.jpg) | <serial>6.</serial> 热锅热油，倒入鸡蛋炒成定型，盛出备用 |\n| ![ ](./scrambled-eggs-with-celery-sausage/scrambled-eggs-with-celery-sausage_07.jpg) | <serial>7.</serial> 锅烧热，下油加香肠炒一下 |\n| ![ ](./scrambled-eggs-with-celery-sausage/scrambled-eggs-with-celery-sausage_08.jpg) | <serial>8.</serial> 香肠表面略焦加入蒜末和芹菜翻炒 |\n| ![ ](./scrambled-eggs-with-celery-sausage/scrambled-eggs-with-celery-sausage_09.jpg) | <serial>9.</serial> 加入鸡蛋、盐、生抽翻炒入味 |\n| ![ ](./scrambled-eggs-with-celery-sausage/scrambled-eggs-with-celery-sausage_10.jpg) | <serial>10.</serial> 收锅 |\n| ![ ](./scrambled-eggs-with-celery-sausage/scrambled-eggs-with-celery-sausage_11.jpg) | <serial>11.</serial> 装盘 |\n","categories":["cookbook"]},{"title":"手撕鸡肉","url":"/2020/11/27/hand-tore-the-chicken.html","content":"![ ](./hand-tore-the-chicken/hand-tore-the-chicken_00.jpg)\n\n#### 食材用料\n| 食材 | 数量 |\n| ---- | ---- |\n| 无骨鸡腿 | 2个 |\n| 姜      | 适量 |\n| 料酒    | 适量 |\n| 葱      | 适量 |\n| 蒜      | 适量 |\n| 辣椒粉   | 适量 |\n| 盐      | 适量 |\n| 生抽    | 适量 |\n| 香油    | 适量 |\n| 藤椒油  | 适量 |\n\n#### 做法步骤\n| 图片 | 步骤  |\n| ---- | ---- |\n| ![ ](./hand-tore-the-chicken/hand-tore-the-chicken_01.jpg) | <serial>1.</serial> 准备食材 |\n| ![ ](./hand-tore-the-chicken/hand-tore-the-chicken_02.jpg) | <serial>2.</serial> 煮鸡腿调料：葱段、姜片、盐和料酒 |\n| ![ ](./hand-tore-the-chicken/hand-tore-the-chicken_03.jpg) | <serial>3.</serial> 锅中放鸡腿、煮鸡腿调料，加水开始煮20分钟左右 |\n| ![ ](./hand-tore-the-chicken/hand-tore-the-chicken_04.jpg) | <serial>4.</serial> 期间准备腌料：葱段、蒜末、辣椒粉、盐、生抽、藤椒油、香油 |\n| ![ ](./hand-tore-the-chicken/hand-tore-the-chicken_05.jpg) | <serial>5.</serial> 鸡腿煮好后捞出撕碎 |\n| ![ ](./hand-tore-the-chicken/hand-tore-the-chicken_06.jpg) | <serial>6.</serial> 把腌料倒进去拌匀 |\n| ![ ](./hand-tore-the-chicken/hand-tore-the-chicken_07.jpg) | <serial>7.</serial> 装盘 |\n","categories":["cookbook"]},{"title":"麻辣鸡中翅","url":"/2020/10/31/spicy-chicken-medium-wing.html","content":"![ ](./spicy-chicken-medium-wing/spicy-chicken-medium-wing_00.jpg)\n\n#### 食材用料\n| 食材 | 数量 |\n| ---- | ---- |\n| 鸡中翅   | 4块 |\n| 油      | 少量 |\n| 葱      | 适量 |\n| 姜      | 适量 |\n| 蒜      | 适量 |\n| 八角    | 2个 |\n| 辣椒圈  | 适量 |\n| 花椒    | 适量 |\n| 盐      | 适量 |\n| 生抽    | 适量 |\n| 老抽    | 适量 |\n| 香油    | 适量 |\n\n> 鸡翅必须焯水去血沫，不然菜味会变腥。\n\n#### 做法步骤\n| 图片 | 步骤  |\n| ---- | ---- |\n| ![ ](./spicy-chicken-medium-wing/spicy-chicken-medium-wing_01.jpg) | <serial>1.</serial> 准备食材 |\n| ![ ](./spicy-chicken-medium-wing/spicy-chicken-medium-wing_02.jpg) | <serial>2.</serial> 葱切葱花，蒜切末，姜切片，和辣椒圈花椒八角装起来 |\n| ![ ](./spicy-chicken-medium-wing/spicy-chicken-medium-wing_03.jpg) | <serial>3.</serial> 鸡中翅解冻洗净割口（想入味又不想割口可以拿牙签刺） |\n| ![ ](./spicy-chicken-medium-wing/spicy-chicken-medium-wing_04.jpg) | <serial>4.</serial> 热锅热油，下鸡中翅炒至表面金黄 |\n| ![ ](./spicy-chicken-medium-wing/spicy-chicken-medium-wing_05.jpg) | <serial>5.</serial> 下葱花、蒜末、辣椒圈、花椒、八角爆香 |\n| ![ ](./spicy-chicken-medium-wing/spicy-chicken-medium-wing_06.jpg) | <serial>6.</serial> 加入半碗水、生抽、老抽、盐 |\n| ![ ](./spicy-chicken-medium-wing/spicy-chicken-medium-wing_07.jpg) | <serial>7.</serial> 汤汁剩少许时加入香油出锅 |\n| ![ ](./spicy-chicken-medium-wing/spicy-chicken-medium-wing_08.jpg) | <serial>8.</serial> 装盘 |","categories":["cookbook"]},{"title":"青菜炒肉","url":"/2020/10/31/green-vegetables-meat.html","content":"![ ](./green-vegetables-meat/green-vegetables-meat_00.jpg)\n\n#### 食材用料\n| 食材 | 数量 |\n| ---- | ---- |\n| 青菜    | 250克 |\n| 鸡胸肉  | 半块 |\n| 油      | 多量 |\n| 蒜      | 适量 |\n| 辣椒圈  | 适量 |\n| 花椒    | 适量 |\n| 盐      | 适量 |\n| 生抽    | 适量 |\n| 老抽    | 适量 |\n\n> 青菜不出水关键：多放油，炒完菜最后放盐。\n\n#### 做法步骤\n| 图片 | 步骤  |\n| ---- | ---- |\n| ![ ](./green-vegetables-meat/green-vegetables-meat_01.jpg) | <serial>1.</serial> 准备食材 |\n| ![ ](./green-vegetables-meat/green-vegetables-meat_02.jpg) | <serial>2.</serial> 准备调料：蒜切片、花椒、辣椒圈 |\n| ![ ](./green-vegetables-meat/green-vegetables-meat_03.jpg) | <serial>3.</serial> 青菜洗净焯水 |\n| ![ ](./green-vegetables-meat/green-vegetables-meat_04.jpg) | <serial>4.</serial> 肉切片，捏掉水，加入淀粉、生抽、一点点老抽 |\n| ![ ](./green-vegetables-meat/green-vegetables-meat_05.jpg) | <serial>5.</serial> 搅拌至粘稠 |\n| ![ ](./green-vegetables-meat/green-vegetables-meat_06.jpg) | <serial>6.</serial> 放油中火，放入蒜、辣椒圈、花椒爆香 |\n| ![ ](./green-vegetables-meat/green-vegetables-meat_07.jpg) | <serial>7.</serial> 放入肉片翻炒至肉熟 |\n| ![ ](./green-vegetables-meat/green-vegetables-meat_08.jpg) | <serial>8.</serial> 翻入青菜大火翻炒 |\n| ![ ](./green-vegetables-meat/green-vegetables-meat_09.jpg) | <serial>9.</serial> 最后放入盐简单翻炒两下入味 |\n| ![ ](./green-vegetables-meat/green-vegetables-meat_10.jpg) | <serial>10.</serial> 出锅 |\n| ![ ](./green-vegetables-meat/green-vegetables-meat_11.jpg) | <serial>11.</serial> 装盘 |","categories":["cookbook"]},{"title":"土豆块炖肉","url":"/2020/10/21/potato-cubes-stew-with-meat.html","content":"![ ](potato-cubes-stew-with-meat/potato-cubes-stew-with-meat_00.jpg)\n\n#### 食材用料\n| 食材 | 数量 |\n| ---- | ---- |\n| 土豆    | 400克 |\n| 鸡胸肉  | 半块 |\n| 油      | 适量 |\n| 葱      | 适量 |\n| 姜      | 适量 |\n| 蒜      | 适量 |\n| 辣椒圈  | 适量 |\n| 花椒    | 适量 |\n| 桂叶    | 1片 |\n| 盐      | 适量 |\n| 老抽    | 少量 |\n| 生抽    | 适量 |\n\n#### 做法步骤\n| 图片 | 步骤  |\n| ---- | ---- |\n| ![ ](potato-cubes-stew-with-meat/potato-cubes-stew-with-meat_01.jpg) | <serial>1.</serial> 准备食材 |\n| ![ ](potato-cubes-stew-with-meat/potato-cubes-stew-with-meat_02.jpg) | <serial>2.</serial> 准备调料：葱花、蒜末、辣椒圈、花椒  |\n| ![ ](potato-cubes-stew-with-meat/potato-cubes-stew-with-meat_03.jpg) | <serial>3.</serial> 土豆切成块，加清水泡防止变色  |\n| ![ ](potato-cubes-stew-with-meat/potato-cubes-stew-with-meat_04.jpg) | <serial>4.</serial> 肉切片，捏掉水  |\n| ![ ](potato-cubes-stew-with-meat/potato-cubes-stew-with-meat_05.jpg) | <serial>5.</serial> 放油放入调料爆香  |\n| ![ ](potato-cubes-stew-with-meat/potato-cubes-stew-with-meat_06.jpg) | <serial>6.</serial> 中火放入肉炒熟  |\n| ![ ](potato-cubes-stew-with-meat/potato-cubes-stew-with-meat_07.jpg) | <serial>7.</serial> 放入土豆块翻炒均匀  |\n| ![ ](potato-cubes-stew-with-meat/potato-cubes-stew-with-meat_08.jpg) | <serial>8.</serial> 放入生抽、老抽、盐大火翻炒  |\n| ![ ](potato-cubes-stew-with-meat/potato-cubes-stew-with-meat_09.jpg) | <serial>9.</serial> 放香叶，加水，没过食材，大火收汁  |\n| ![ ](potato-cubes-stew-with-meat/potato-cubes-stew-with-meat_10.jpg) | <serial>10.</serial> 收锅  |\n| ![ ](potato-cubes-stew-with-meat/potato-cubes-stew-with-meat_11.jpg) | <serial>11.</serial> 装盘  |","categories":["cookbook"]},{"title":"土豆肉丝","url":"/2020/10/21/potato-with-meat-shreds.html","content":"![ ](./potato-with-meat-shreds/potato-with-meat-shreds_00.jpg)\n\n#### 食材用料\n| 食材 | 数量 |\n| ---- | ---- |\n| 土豆    | 250克 |\n| 猪肉    | 120克 |\n| 油      | 适量 |\n| 青椒    | 适量 |\n| 蒜      | 适量 |\n| 干辣椒   | 适量 |\n| 花椒    | 适量 |\n| 盐      | 适量 |\n| 生抽    | 适量 |\n\n#### 做法步骤\n| 图片 | 步骤  |\n| ---- | ---- |\n| ![ ](./potato-with-meat-shreds/potato-with-meat-shreds_01.jpg) | <serial>1.</serial> 准备食材 |\n| ![ ](./potato-with-meat-shreds/potato-with-meat-shreds_02.jpg) | <serial>2.</serial> 青椒切条，蒜切片，和辣椒圈花椒装起来 |\n| ![ ](./potato-with-meat-shreds/potato-with-meat-shreds_03.jpg) | <serial>3.</serial> 土豆切成丝，冲洗一遍去掉淀粉，加清水泡防止变色 |\n| ![ ](./potato-with-meat-shreds/potato-with-meat-shreds_04.jpg) | <serial>4.</serial> 猪肉切成丝 |\n| ![ ](./potato-with-meat-shreds/potato-with-meat-shreds_05.jpg) | <serial>5.</serial> 肉丝解冻，捏去多余水分 |\n| ![ ](./potato-with-meat-shreds/potato-with-meat-shreds_06.jpg) | <serial>6.</serial> 热锅热油，油冒烟下肉丝爆香翻炒（肉丝有水注意锅里油乱蹦） |\n| ![ ](./potato-with-meat-shreds/potato-with-meat-shreds_07.jpg) | <serial>7.</serial> 放入青椒调料等，翻炒爆香 |\n| ![ ](./potato-with-meat-shreds/potato-with-meat-shreds_08.jpg) | <serial>8.</serial> 放入土豆丝翻炒均匀，加入生抽、盐后翻炒均匀入味 |\n| ![ ](./potato-with-meat-shreds/potato-with-meat-shreds_09.jpg) | <serial>9.</serial> 收锅 |\n| ![ ](./potato-with-meat-shreds/potato-with-meat-shreds_10.jpg) | <serial>10.</serial> 装盘 |\n","categories":["cookbook"]},{"title":"React PropTypes","url":"/2020/09/17/react-proptypes.html","content":"\n### Install\n``` bash\n$ npm install prop-types --save\n```\n\n### Use\n**Grammar One：**\n```javascript\nclass Greeting extends Component {\n  static propTypes = {\n    className: PropTypes.string,\n    style: PropTypes.object,\n  };\n\n  static defaultProps = {\n    className: '',\n  };\n\n  render() { ... }\n}\n```\n\n**Grammar Two：**\n```javascript\nclass Greeting extends Component { ... }\n\nGreeting.propTypes = {\n  className: PropTypes.string,\n};\n\nGreeting.defaultProps = {\n  className: '',\n};\n```\n\n#### String\n```javascript\n  string: PropTypes.string\n```\n\n#### Number\n```javascript\n  number: PropTypes.number\n```\n\n#### Boolean\n```javascript\n  bool: PropTypes.bool\n```\n\n#### Array\n```javascript\n  array: PropTypes.array\n```\n\n#### Object\n```javascript\n  object: PropTypes.object\n```\n\n#### Symbol\n```javascript\n  symbol: PropTypes.symbol\n```\n\n#### Function\n```javascript\n  func: PropTypes.func\n```\n\n#### Required\n```javascript\n  // 必填\n  isRequired: PropTypes.isRequired\n  stringIsRequired: PropTypes.string.isRequired\n```\n\n#### Anything\n```javascript\n  // 任意类型的数据\n  any: PropTypes.any\n```\n\n#### Node\n```javascript\n  // 任何可被渲染的元素（包括数字、字符串、子元素或数组）\n  node: PropTypes.node\n```\n\n#### Element\n```javascript\n  // 一个 React 元素\n  element: PropTypes.element\n```\n\n#### ElementType\n```javascript\n  // 一个 React 元素类型（即，MyComponent）\n  elementType: PropTypes.elementType\n```\n\n#### InstanceOf\n```javascript\n  // 声明属性为某个类的实例，这里使用 JS 的 instanceof 操作符实现。\n  instanceOf: PropTypes.instanceOf(Message)\n```\n\n#### OneOf\n```javascript\n  // 限制你的属性值是某个特定值之一\n  oneOf: PropTypes.oneOf(['News', 'Photos'])\n```\n\n#### OneOfType\n```javascript\n  // 限制它为列举类型之一的对象\n  oneOfType: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n    PropTypes.instanceOf(Message)\n  ])\n```\n\n#### ArrayOf\n```javascript\n  // 一个指定元素类型的数组\n  arrayOf: PropTypes.arrayOf(PropTypes.number)\n```\n\n#### ObjectOf\n```javascript\n  // 一个指定类型的对象\n  objectOf: PropTypes.objectOf(PropTypes.number)\n```\n\n#### Shape\n```javascript\n  // 一个指定属性及其类型的对象\n  objectWithShape: PropTypes.shape({\n    color: PropTypes.string,\n    fontSize: PropTypes.number\n  })\n```\n","categories":["react"]},{"title":"前端自动部署 GitHub Page","url":"/2019/12/05/deploy-github-page.html","content":"自己的项目部署在GitHub Page的时候很麻烦，要先build然后再把文件推到master/docs或者gh-pages分支上面，现在github有一个插件可以帮你完成上面步骤：\n\n\ngithub地址：[gh-pages](https://github.com/tschaub/gh-pages)\n\n#### 安装：\n``` bash\n$ npm install gh-pages --save-dev\n```\n> 注意：该模块需要git版本大于等于1.9\n\n#### 配置：\n在 package.json 的 script 字段中添加以下代码\n``` json\n\"scripts\": {\n  \"deploy\": \"npm run build & gh-pages -d dist\",\n}\n```\n\n接下来运行 `npm run deploy` 就会先执行build命令，然后开始向该项目的gh-pages分支推送刚build的文件，随后在github项目的 Settings > GitHub Pages 在 Sourse 中选择 gh-pages branch ，稍等几分钟后打开网址查看\n\n[https://${username}.github.io/${project}](https://${username}.github.io/${project})\n\n#### 命令行参数说明\n| 参数  | 说明 |\n| ---- | ---- |\n|  -d  | 要推送文件的目录，这里写的是项目根目录 dist 文件夹。 |\n|  -m  | 推送信息，信息如果过长带空格的话在json中需要加上双引号 `-m \\\"Update GitHub Page\\\"` |\n|  -b  | 推送的分支，默认gh-pages |\n\n> 更多参数请在命令行中输入以下命令\n``` bash\n$ gh-pages --help\n```","categories":["note"]},{"title":"安装MySQL","url":"/2019/11/13/mysql-install.html","content":"## Windows 上安装 MySQL\nWindows 上安装 MySQL 相对来说会较为简单，最新版本可以在 [MySQL 下载](https://dev.mysql.com/downloads/mysql/) 中下载中查看(更详细安装：[Windows 上安装 MySQL](https://www.runoob.com/w3cnote/windows10-mysql-installer.html))。\n\n![](./mysql-install/select-version.png)\n\n点击 Download 按钮进入下载页面，点击下图中的 No thanks, just start my download. 就可立即下载：\n\n![](./mysql-install/no-thanks.png)\n\n下载完后，解压完成后为以下样子（我将安装文件放在 D:\\mysql 中）：\n\n![](./mysql-install/database-catalogue.png)\n\n**接下来我们需要配置下 MySQL 的配置文件**\n打开刚刚解压的文件夹 D:\\mysql ，在该文件夹下创建 my.ini 配置文件，编辑 my.ini 配置以下基本信息：\n\n```\n[client]\n# 设置mysql客户端默认字符集\ndefault-character-set=utf8\n \n[mysqld]\n# 设置3306端口\nport = 3306\n# 设置mysql的安装目录\nbasedir=C:\\\\web\\\\mysql-8.0.11\n# 设置 mysql数据库的数据的存放目录，MySQL 8+ 不需要以下配置，系统自己生成即可，否则有可能报错\n# datadir=C:\\\\web\\\\sqldata\n# 允许最大连接数\nmax_connections=20\n# 服务端使用的字符集默认为8比特编码的latin1字符集\ncharacter-set-server=utf8\n# 创建新表时将使用的默认存储引擎\ndefault-storage-engine=INNODB\n```\n\n**接下来我们来启动下 MySQL 数据库：**\n\n以管理员身份打开 cmd 命令行工具，切换目录：\n``` bash\n$ cd C:\\web\\mysql-8.0.11\\bin\n```\n\n初始化数据库：\n``` bash\n$ mysqld --initialize --console\n```\n> 注意：这个可能会报错：\n> `mysqld : 无法将“mysqld”项识别为 cmdlet、函数、脚本文件或可运行程序的名称。请检查名称的拼写，如果包括路径，请确保路径正确，然后再试一次。`\n> 解决办法有两个：1、在命令前面加上 ./ 如：`$ ./mysqld --initialize --console`\n> 2、[配置 mysql 环境变量](#配置-mysql-环境变量)\n\n执行完成后，会输出 root 用户的初始默认密码，如：\n``` bash\n...\n2019-11-13T09:36:49.186128Z 5 [Note] [MY-010454] [Server] A temporary password is generated for root@localhost: <!wbLjV?/3uq\n```\n\n\\<\\!wbLjV?/3uq 就是初始密码，后续登录需要用到，你也可以在登陆后修改密码。\n输入以下安装命令：\n``` bash\n$ mysqld install\n```\n\n启动输入以下命令即可：\n``` bash\n$ net start mysql\n```\n\n## 登录 MySQL\n当 MySQL 服务已经运行时, 我们可以通过 MySQL 自带的客户端工具登录到 MySQL 数据库中, 首先打开命令提示符, 输入以下格式的命名:\n``` bash\n$ mysql -h 主机名 -u 用户名 -p\n```\n\n参数说明：\n* -h : 指定客户端所要登录的 MySQL 主机名, 登录本机(localhost 或 127.0.0.1)该参数可以省略;\n* -u : 登录的用户名;\n* -p : 告诉服务器将会使用一个密码来登录, 如果所要登录的用户名密码为空, 可以忽略此选项。\n\n如果我们要登录本机的 MySQL 数据库，只需要输入以下命令即可：\n``` bash\n$ mysql -u root -p\n```\n\n按回车确认, 如果安装正确且 MySQL 正在运行, 会得到以下响应:\n``` bash\n$ Enter password:\n```\n若密码存在, 输入密码登录, 不存在则直接按回车登录。登录成功后你将会看到 Welcome to the MySQL monitor... 的提示语。\n然后命令提示符会一直以 mysq> 加一个闪烁的光标等待命令的输入, 输入 exit 或 quit 退出登录。\n\n## 配置 mysql 环境变量\n上面安装的是时候我们看到mysql默认安装路径是：D:\\mysql 我的电脑右键—>属性—>高级系统设置—>环境变量—>新建MYSQL_HOME,将安装目录输入：\n\n![](./mysql-install/mysql-home01.png)\n\n找到path编辑：输入%MYSQL_HOME%\\bin\n\n![](./mysql-install/mysql-home02.png)\n\n打开 cmd 输入 `mysql` 检测一下\n\n## 在 navicat for mysql 上链接 mysql\n[navicat for mysql 下载](https://navicatformysql.en.softonic.com/download) 安装完成后运行 navicat \n> 客户端使用 navicat for mysql。本地安装了mysql 8.0。但是在链接的时候提示：\n![](./mysql-install/error-1251.png)\n\n解决方法：\n> 这行代码有两层含义，第一:修改root的密码为'root'，摒弃原来的旧密码。第二：使用mysql_native_password对新密码进行编码。\n``` bash\n$ ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'root';\n```\n详情报错信息请看 [navicat for mysql 链接时报错：1251...](https://my.oschina.net/u/3295928/blog/1811804)\n","categories":["database"]},{"title":"海浪涛天，一个老水兵的亲身经历","url":"/2019/10/31/wave-and-sky.html","content":"转载：[海浪涛天（一个老水兵的亲身经历）](http://www.ruanyifeng.com/blog/2004/01/post_15.html)\n作者：阮一峰\n原作者：诸葛一丁\n这是最近在各大军事论坛上非常热的一个连载回忆录，作者诸葛一丁曾在海军服役。\n![](./wave-and-sky/bg401102.jpg)\n\n### 前言\n每当夜色降临，望着那茫茫的大海，看着来往的商船，好一派和平景象。只有他们，那些在海上为了国家利益，驾着并不先进的舰艇的海军弟兄，才知道这一切来得多么不容易。在和平时期，我的这些弟兄们默默无闻，有的献出了年青的生命。这看似太平的景象背后，又会有什么样的故事呢？\n\n我到过一位牺牲弟兄的家，他曾经是我的潜水老师，他是在一次执行特殊任务中潜水具被渔网缠住无法解脱而牺牲的。我到他家后，看着他年老体弱的父母和不懂事的孩子，我预先想好的安慰话语一句也说不出，一切安慰都是多余的。中国老百姓太伟大了。\n\n由于工作性质的原因，我再也没有到过烈士的家。在每年清明节，只要不出海，我都会和其他弟兄一道，来到烈士生前最爱去的地方，军港边的高山上，望着他牺牲的方向，心里默默地为他祈祷。我想，终有一天他的心愿可以完成。\n![](./wave-and-sky/bg401101.jpg)\n\n### 人员分工\n舰艇在海上航行时，一般由航海部门负责舰位及航向的保持，绘制航图和填写航海日志也是他们的拿手好戏。可别小看航海日志的填写，它以后可是要入档案库的重要文件。由于航海部门的弟兄们战位大多在甲板面以上，因此，一遇到大风浪，首当其冲晕船的就是他们了。\n\n观通部门是一艘军舰的眼睛，雷达，声纳，信号，气象，电台都是他们的下属。你如果有一个哥们在观通部门，就可以利用值更的间隙，让你的视力成千上万倍的增长，记住，这可不是能吹出来的。他们的工作环境往往非常干净，信号兵呆的地方可不怎么样，虽然他时常能站在舰长的头顶上，俯视着对舰长说三道四，但十分危险，伴君如伴虎这个道理我想大家都懂，为了不被摔下海，他们常用绳子把自己绑在栏杆上。另外，保证信号的准确无误也是压在他们头上的一座大山，各位如果早晚到军港，经常能看到他们在劈哩叭啦打只有他们才懂的灯光信号。手旗信号更可笑，只见他们挥动着手旗，嘴里念念有词：\"玻璃，阿姨，南瓜，希望......\"。他们也有一无人能比的民用技能，我劝各位不要和他们两个同伙同时玩牌，你准玩不过他们，他们的眼睛就是信号灯，一眨一眨的准让你浑身发毛；不信，你试试看。\n\n导弹部门可是舰上的宝贝，那几颗大家伙打不打的出去可要看他们的了。别看他们平时吊儿郎当，战斗警报一响可都不含糊的。枪炮部门的辛苦是大家公认的，军舰上的很多力气活都跑不了他们，谁让他们长得人高马大呢。他们也是消耗子弹的大户，一次外膛枪打靶，可能就比陆军弟兄几年消耗的子弹要多得多；我曾经给他们一个炮位搬运子弹，累得头晕眼花，只是为了换一颗空炮弹壳，划不来啊，这等事各位千万别干。\n\n舰务部门是掌管舰上后勤的，最高领导是舰务长；常常有地方的菜贩找到军港送菜，开口要找舰长，一问才知道是找舰务长，一字之差到也风光；各位如果在军港遇见一胖子，眼睛乱转像商人，不用问，十有八九他是舰务长。关于舰务长，还有很多笑话这里就不多说了。\n\n军医；这可是一个响当当的人物，军衔有时比舰长还高。小病看得好，大病也能看，这是大家对他们的评价。机电部门可是军舰上的要害部门，一艘军舰能不能动窝可就要看他们的本事了。他们的权力之大各位难以想象。\n\n机电长在舰长耳边一嘀咕，完了，限额用淡水。一人一天才一小杯淡水，真不够啊。淡水，柴油，机油，汽油，电，空调，甚至连装副食品的冰库他们也有钥匙，太不公平了，谁让冰库舱里有冷冻机呢。一到夏天，看着舱段兵像变戏法似的拿一根冰棍在大家面前炫耀，简直能把人气死。军舰的所有舱室他们都有权进入，空调不好有时还得求他们那帮油鬼呢。但平心而论，他们也是最辛苦的一帮弟兄，机舱里难闻的柴油味可不是一般人能忍受得了的。本人一般情况下很少晕船，可一下到机舱，被油味一熏，哇！还是上去吐吧，省得挨油鬼们的骂，这吐传染你信不。苦归苦，但这帮弟兄发明了一种食品，把土豆，地瓜，一类的东西放在排烟管旁边，一会就熟了；遇上一个好天气，军舰摇摆不大，机舱操纵室的电话就响个不停，各部门的弟兄都饿了，能不能给考点东西吃。只要机电长睁一眼闭一眼，他们都能满足大家。只是舰务长不高兴了，\"这土豆，洋葱是留着明天用的，这帮败家子\"。大家由此可以想象一下机舱的温度有多高了。虽然说机器的操纵可在操纵室内完成，但一般都留人在看管机器，有故障早发现吗嘛。他们也有绝活，就是手语，由于噪音大，相互间只能打手势；手势是他们自编的，《舰艇条令》无统一规定。\n\n### 台海军事对峙\n八十年代中期，我国对全世界宣布，台湾海峡及其周边海域的海图绘制完毕，结束了长期使用外国人绘制的海图。一纸声明看似平常，可其中的酸甜苦辣只有参加海绘和为其护航的我东，南两舰队的官兵心里才清楚。\n\n　　为了顺利完成任务，我海测船一律被漆成白色。当时，东南沿海出现了一支白色的奇怪的舰队。就是这样的一支大规模的舰队（建国以来最大一次海军积结）让台湾当局大为紧张，台湾也出动了所有战斗舰艇与我在台海展开军事对峙。\n\n　　这次军事对峙历时半年。其间，大小磨擦不断，双方最终没有酿成大规模战斗。\n\n### 猫抓老鼠\n八十年代某一天，我观通站发现在我领海附近有一支快速运动的不明国籍的舰队。那天正赶上海面有强风暴。在一阵紧急出航的铃声中我们出发了，军舰一出港口大家就惨了，左右上下前后天旋地转，鼻孔里，嗓子里塞满了面条，吐不出咽不下（海军有条不成文的规矩，出海期间不吃面条和油条）。不过大家都在战位上准备了三宝之一的油漆罐挂在胸前。距离目标不远了，几艘军舰变换队型小心接近，打开强光灯一照，哈哈，原来是英国皇家海军驻香港舰队的七八艘巡逻艇，看来他们也怕大风浪。一组信号打过去，命令它们离开我领海，否则就不客气。从舷窗探出一个胖胖的脑袋打了一个OK手势。几艘英舰起锚。\n转了一圈突然加速向我大陆方向开去。\"撞它们，赶出去\"，接到命令后我三艘舰艇直插过去挡住去路。看着它们小小的舰身（我唯一一次感到自豪）在涌浪里漂浮不定，舰长倒犯难了。撞太重了它会翻沉，撞太轻了它还跑。我吨位大，它数量多，一会赶跑了这艘那艘又往里闯。一夜就这样过去了。天慢慢放亮，搞得大家筋疲力尽。新鲜事又来了，它有两艘艇派人拿鸡蛋和土豆砸我们。我们舰务长则组织人用洋葱回敬。还有一弟兄拿来一个菜筐，里面垫上毛毯专们迎接它们的鸡蛋，当然一完好的也没接着，自己倒成了蛋制品。老这样也不是办法呀，副长想了一个好办法，我一弟兄内穿全村防化服外套防火服顶着对方打来的棍棒，把缆绳挂在它的揽拄上，在它砍断前可把它们拖好远。\n\n　　中午传来好消息，我方增派了十艘护卫艇接替我们。对方看站不到便宜，灰溜溜地加速跑远了。\n\n　　结果：我轻伤三人。损失洋葱六筐。舰身轻微刮伤。竹竿四根。菜刀一把。缆绳一根。对方轻伤数人。土豆鸡蛋不详。\n\n### 潜艇追踪（一）\n前s国潜艇的型号之多，我想大家都有耳闻。三年一改型，五年一新型，搞得它的老对手也云里雾里，摸不着头脑。有一段时间，出于战略需要，它的老对手主动向我投怀送抱。双方你来我往，演出了一场精彩的爱情喜剧。是情人就有分手的一天，几乎是在一夜之间，它变脸了，提起裤子就不认人，这等男人作风可是要不得啊！\n\n　　言归正传，某年的锚地集训，如火如荼地进行到尾声，弟兄们天天掐着手指算计，再过几天就可回基地了。人在海上时间呆长了，眼神都变得发绿了，再憋两天准不定要出点什么事。几天前就断烟了；这附近有一个岛，岛上有一片烟叶地，几年前我就知道，晚上不知是谁出的馊主意，舰长派了四个弟兄，开着救生艇，说是到岛上去买烟；这黑灯瞎火的哪有烟卖呀。大家心照不宣。两个小时过去了，上岛买烟的弟兄也回来了，烟没买着，还差点挨了一顿揍，鞋都跑没了一只，好在他们穿的是工作服；要不然，这麻烦可就大了。第二天一早，来任务了。四艘舰组成一编队，到几百海哩外某海区执行搜潜任务。这次是m国的情报通报，说是s国最新型号的潜艇在这一海区进行海试，这一海区水深，水温，海水的浓度特别适合干这等事。我们的任务是要对它进行速度等技术指标进行测试。说的轻松，在大海里要想找到一艘潜艇可不是一件容易得事。一阵忙碌，直插某海区。一路摇摇摆摆，准时抵达。哈，这里可真是热闹；天上是某国的反潜飞机，海面上是某小国的军舰；m国的面子果然很大。一组灯光信号打过来，信号新兵憋了半天，查完福尔斯码才给翻译过来：欢迎你们加入！这帮f国的小鬼子，竟然用这种不常用的语言，好像有意难为我们的弟兄。按搜潜队形一字排开，减速，攻击声纳开机。老牛耕地似的一遍又一遍地耕作起来。不知道过了多长时间，天上的飞机也走了；f国的军舰也丧了气，远远的像似也不干活了。声纳站报告，发现一大型运动目标，同时友邻舰也发现了它。大家一下就来了精神，自动跟踪，它快我快，它慢我慢，左转右转......速度，深度等指标到手，那个爽啊！岸指命令返航，告诉f国小的们后会有期，信号兵发完信号露出神秘的奸返航的途中，我问了那小战士，他神秘地告诉我，舰长的命令他用国际信号发给对方了。后面还发了一组他自己也搞不清的乱码，哈，够对方回家查几年的了。我答应过那个小战士为他保密；这可是违反规定的严重行为。大家可不要说我今天出卖了他啊！去年那个当年的小伙子来看我；说起这件事直后怕，要知道如果是在战争中，他可能连命都没了。\n\n　　过了几个月后我们才知道，那几天s国潜艇根本不是在那片海区进行的海试，m国把我们给耍了。水下的那个目标也许就是m国自己的潜艇。看来m国的情报并不像他吹嘘的那样准确。\n\n### 潜艇追踪（二）\n对不起各位，出了趟远门，又找不到电脑，实在有愧。为了养家糊口，以后还会经常外出捕鱼，鱼汛不等人啊，请大家原凉。这次出去捕鱼收获颇丰，更遇见一件新奇之事，以后有机会告诉大家。今天下午无事回到家里，那狗崽子竟认不出我，踢了它一脚便老实多了。晚上躺在床上睡不着觉，回忆起前些年在海上的奔波，很难用文字准确概括，其中有趣的故事更是说不尽道不完。\n\n　　记得还是一年冬季，我军两艘军舰在南部某群岛战备值班到期，返回基地途中突然接到命令，让我们就近停靠一海岛军港补给待命。想一想将要进入久违了的军港和熟悉的环境，还有那些一年多没见面的漂亮的军装妹妹，弟兄们心中都乐开了花。中午进港靠码头，老夫发现，有些平时爱穿一身油工作服的弟兄突然间军容整齐，连嘴上的胡子也刮得一干二净，这呢子制服配上擦得亮亮的皮鞋，还真的很帅！\"这几个小子要重点盯防\"政委也开始布置工作任务。按老夫经验判断，突发性任务来了，小子们帅也白帅，借他们一个狗胆也不敢乱跑，大可放心。燃油淡水食品等补充完毕，接下来的时间弟兄们便难熬了。由于军舰随时会出发，所以弟兄们都不敢走远，那几个帅哥也弄个自讨没趣，又换回了油工作服。不少断了烟的弟兄开始着急了，站在码头上，也不管是哪个单位的认识不认识，见人就磕头烧香，收购烟粮。码头值班哨兵纳闷，这舰艇上的鸟人都是些懒鬼？他哪里知道要是掉了码头可是吃不了要兜着走的。凡事总有例外，那些磕头烧香也搞不到烟的大烟鬼，眼睛便盯上了舰务部门买菜用的破自行车，他们想赌一把。部队服务社距离码头还很远，但骑上那玩意来回二十多分钟也足够了。几个弟兄聚在一块伸出油手，锤子，剪刀，布这么一比划，胜利者便咧着嘴露出一颗颗大黄牙，哈！哈！哈！哈！的笑声让人憋不住尿。几轮之后剩下的一个家伙便成了倒霉蛋。他趁着值更官不注意，把那架破车搬上码头，骑上后就玩命似地往服务社飞奔。说他是倒霉蛋一点也不冤枉他，这家伙刚走没有几分钟，信号台的灯光信号就到了。紧急出航部署的铃声一响，在码头附近的弟兄们跑步上舰，紧张地做出航准备。舰长发现少了一个人，把那值更官骂得狗血淋头。值更官憋了一肚子气，找到那几个同伙，发下毒誓：\"出了问题统统关进锚链舱\"。十多分钟后，军舰离码头，远远看见一辆自行车沿着海堤公路飞奔而来。小子真可怜啊，满头大汗还是没能赶上。舰长用高音喇叭命令小子自己赶回基地。千里迢迢，拔山过海，要饭回去吧！\n航渡来到一近海航道，接上级通报，有渔民近日多次在此发现有潜艇的潜望镜。兄弟部队在此作业一整天了，我们是来替换他们。摆开搜潜队形，主被动声纳开机，几个弟兄更从弹药舱搬来几箱手榴弹。大家有所不知，这攻潜分为\"往死里整\"和驱赶两种。\"往死里整\"就是用舰上的深水炸弹和反潜鱼雷进行攻击；和平时期多采用驱赶的方法，强迫对方浮上水面，以便验明身份。这最佳手段便是用手榴弹警告对方，对方能听见爆炸声，又不会对潜艇产生危害，不轻不重正好适合。老夫眼看着那些蛋蛋，手便有些发痒。从打参军算起，一共就扔过两颗，其中还有一颗是坏蛋。嘿嘿，今天可要扔他妈个痛快。人工投弹人手不够，老夫和军医第一时间来到后甲板。那几个\"深弹\"弟兄临时教了一遍投弹要领和\"小连串\"与\"大连串\"之区别，接下来就要看声纳部门的本事了。一个小时过去了，这帮白白净净的老爷们竟然连个毛也没发现，平时牛逼哄哄的他们也开始头冒虚汗，四肢发凉。害得弟兄们手握蛋蛋摆好姿势却没机会往外扔，白白浪费弟兄们的上镜姿势了。首长英明，这航道水不太深，如果有潜艇应该在主航道上,并且它也不敢航行得太快，倒不如顺着主航道一路杀将过去。机会来了，舰长命令间隔五十秒钟投放一个\"小连串\"，只见弟兄们姿势优美地边扔边夸张地回喊：\"小--连--串\"，场景十分滑稽搞笑。那手榴弹在水中的爆炸声更像似有人坐在水缸上放屁\"咚，咚\"得令人十分耳熟。弟兄们一时杀得性起，手忙脚乱之中有的便忘了拉掉火冒，好在没有人注意，只当是一个臭蛋蛋。不知过了多长时间，蛋蛋扔光光了，弟兄们也都累了，坐在后甲板上直喘粗气。老夫突发奇想，真想扔一个真家伙下去......\n\n　　岸指来电，命令原地抛锚监视水下和海面情况。抛锚三天后再接到返航命令，返航途中弟兄们议论纷纷，这情报的可信度到底有多少？老夫认为，这等事宁可信其有，不可信其无，大不了是进行一次实战搜潜演习。回到基地第三天，那个倒霉蛋也抵达，还是那身油光发亮的破工作服，人瘦了许多,他的噩梦将要从今天开始......不过这小子还挺讲信用，千里迢迢，他帮弟兄们买的烟是一包没少。\n\n### 过把潜水瘾\n前天一弟兄要到河北卖鱼。老夫便委托他给牺牲了的，我的潜水老师家捎点海货；只是很长时间没联系，不知地址变动没有。今天应该找到了吧。\n\n　　水面舰艇原本不需要潜水作业，但在海上经常遇到意想不到的情况。这一日，老夫休假回基地，遇军舰出海未归，便在招待所住下。难得一个自我管理机会。招待所在一片风景区，人来人往煞是热闹。每天无事便傻坐阳台，欣赏来往的漂亮MM。慢慢老夫发现，这清贫寡欲的地方，竟然还有和老夫同等兴趣之人。隔壁那人更显得专业，手拿一单筒高倍望远镜，对准一片树林不断调整焦距。老夫不懂，那树林里能有啥好看的。食堂吃饭同桌，便和那人聊了几句。他是某潜水大队潜水员，志愿兵，老家在河北某县，满族人，祖上出过七品县太爷。这次是奉命来我基地培训一批潜水员，只是军舰都已出海在外，便在这里小住。老夫与他一来二去便成朋友。潜水对老夫吸引力不小，想一想若潜在水中，与游物同类，再带上一两件家伙，这收获肯定小不了。各位看官，老夫也就这觉悟，按现在的话叫假公济私。他拿把卷尺把老夫脸面丈量一番。潜水这鸟事，还要看长像不成。老夫天生就长得古怪，有话就明说。他一阵解释，好像说老夫脸长得太长，带上潜水面具容易漏水。屁话。按他要求的条件老夫一条也够不上。不过，他答应......\n\n军舰出海回港，通知就下来了。每舰抽出三人，在教练室集中，这名册里果然有老夫。潜水有轻潜和重潜之分，理论上以四十米为分界。轻潜是最常见的，也是这次所要学的；重潜可不是谁都能有机会，要求比飞行员只高不低。理论课完活，大家便迫不及待想要下水。没门，考试是必不可少的。共九门理论课，你一门不及格便遭淘汰。可怜老夫我年老眼花，活生生两门课......！哎，不提也罢了。这领导看老夫革命热情高涨，便再给了一次机会。谢天谢地，补考不多不少刚好八十分。\n\n　　乘登陆艇出海。按规定只能在无水下障碍物地方作业。在老夫带头鼓动下，这艇长看了看菜筐，咽了口吐沫，从牙缝里挤出几个字：\"找珊瑚礁\"。哈。这才叫革命好兄弟！另一弟兄看时机成熟，便把偷带上艇的家伙在甲板上一一摊开。这没出过远海的艇长看得眼都花了。这次鱼虾可要倒大霉了。\n\n　　找到一暗礁盘，正好平潮，水深十多米，水下视距良好。三人一组：一人下水，一人拉信号绳，一人准备救援。老夫年长，自然首当其冲。带好装备，腰上扎压铅，揣上潜水刀等小东东，一个漂亮后仰下。接近礁盘，这游物果然不少，大眼瞪小眼，心一狠，去他**，尽挑大个的。这海胆可轻易不要碰，老夫手掌现在还隐隐做痛。这面罩进水，老师也早教了一手高着，歪着脑袋喝进肚子，啥屁事没有。\n\n　　上来。换人。只不到两个小时，几瓶压缩空气便用光光了，这氧气贵呀，舍不得。就近在某小岛靠岸。可把岛上油库的弟兄馋坏了，他们哪里见过这些高级货色。这老师也还大方，挑几件扔过去，够他们吃两餐的。\"把这几个气瓶也搬去，压力打到40，表现好明天还有\"。哈哈！看来他妈真没有免费的午餐。\n\n　　晚上讲评。老师扳起面孔，大赞这理论联系实际是如何如何的好！这捕鱼抓虾，与潜水各种预案正好相吻合！听得老夫和弟兄们心花怒放。艇长犯愁了，这一餐吃不完，又没冰库。干脆，全送给油库，他们伙食标准太低了。\n\n　　一连几天如此，弟兄们便把这个潜水玩得如愿以偿。该实际考试了。可他妈考啥呢？脚噗弟兄们比老师打的还好了。这艇长不是个好东西，出了一馊主意，让弟兄们在水下给他刮尾轴和螺旋浆。刮完了，全体成绩良好，皆大欢喜。\n\n　　几个月下来，这老师与弟兄们感情渐深，无话不谈。临分别时，大家抱头痛哭一场。\n\n　　两个月后，噩耗传来，他在执行一项特殊任务时，单独下水，光荣牺牲。\n\n### 生活野趣\n海上生活是很枯燥的。没完没了的训练，没完没了的出海，任务是一个接一个。和平时期如此，战争状态可能更甚。但枯燥中弟兄们也能找到乐趣；晚上躺在床板上，女人便是真正永垂不朽的话题；弟兄们你一言我一语，光说不练倒也自得其乐；不过，也有胆大的。记得有一个来自湖南的小兄弟，话说得非常毛委员化。这小子有段时间染上了不少怪毛病；每次出海回来就发高烧，军医想尽了办法也不见好。一纸介绍信他便住进了医院。次数多了，大家难免产生怀疑；果不其然，经过卫生员的严密侦察，发现这位弟兄和医院里的一个女护理兵关系不一般；这等鸟事，大家一般都非常感兴趣；每次卫生员侦察胜利归来，弟兄们便缠着他，让他\"从头讲起，从最细微处讲起\"。那些天，这卫生员的生活水准比舰长政委还高，高到连牙膏都有人给挤好的地步；这人和人之间的差距有时还他妈真的这么大。该收网了。舰长政委和军医一商量，这检讨和处分是跑不掉的了。前甲板集合，军人大会作检查；第一次楞没通过，而且还百般狡辩。欺骗了领导欺骗了党，臭屎臊尿给自己头上扣了一大堆后，脑袋上便多了一个留舰察看的紧箍咒。私下里大家可没少拿他开心，大多数弟兄都挺羡慕他，只是苦于自己没有机会罢了。自从出了那鸟事后，本人发现，弟兄们又多了一个爱好，爱往自己脸上涂抹化妆品。哈哈！这帮弟兄啊！\n一艘军舰上的舰员来自五湖四海，而且很多人都有一技之长。有一段时间，全海军舰艇上流行玩吉它；会弹的教不会弹的，不会弹的教更不会弹的；时间不长，大家便都成了高手；丰富文化生活，这领导还很支持；只是吉它这玩意在出海时保管成了大问题。不怕各位笑话，本人去年在朋友处重操旧业，竟还能吸引不少MM听众，搞得老夫心里痒痒的；回到家里被她老人家一顿臭骂：\"瞧你当时的得性，年轻时准不是什么好东西\"。人老了，这弦好像调得更准了。\n\n　　出海训练，晚上最好能在没有人烟的岛附近抛锚过夜；吃完晚饭，找一个合情合理的借口，开着救生艇，五六个弟兄上岛；等天完全黑下来，先在沙滩上堆起两道沙墙，脱掉裤子，扎好裤口；然后再一起打开手电筒，你看吧，满沙滩上尽是又肥又大的，无处逃生的螃蟹。这时你可不能手软，脚踩手抓，不一会就装满一裤子。回到舰上，军医，卫生员早就给弟兄们准备好了药品，先把螃蟹夹的伤口包一下，再把螃蟹安顿好。这时的舰领导一般都呆在舱室里不出来，详装什么也不知道。弟兄们在军医的指挥下，把有毒不能吃的螃蟹挑出来扔掉，剩下的交给军医，他可是个烹饪螃蟹的高手。现在你再看，弟兄们全都把吃饭的家伙准备好了，欢天喜地直流口水。等厨房没了动静，离开吃就不远了。别忙，这会儿舰务长会准时出现，只见他满脸不高兴：\"给你们说了多少次，厨房不许随便开伙\"。先抓几个大家伙塞给他，他也挺难啊！本人干过多少次这等事，已记不清了。让我奇怪的是，每次第二天早上，文书就会从舰长，政委的舱室里拿出一包用报纸包着的螃蟹残渣碎尸。\n\n### 南海巡逻\n有一年，南方一番国出于对我国南海诸岛的野心，在其国家最新出版的地图上；首次把我国南海诸岛划进它的版图。这可是该国历史上的第一次。为了体现它们的所谓主权，一定还会有下一步动作。果然，没过多久，守岛部队便频频发现那帮小的们开着各式各样的破舰烂船出没于我群岛。其间，它们一度还想登上一座无人岛。这还了得，不用上级动员，弟兄们便自觉地把武器装备保养到最佳状态。不容易呀！尽管弟兄们平时有这样那样的毛病，可到关键时刻谁都没有跑肚子。外交部发言人照例一遍又一遍发照会提抗议。有个鸟用，这抗议有用早他妈解放M国了，弟兄们耳朵都听得起老茧了。那些天，码头上好像现在的商品博览会，大卡车一辆接一辆。真开眼界了；各种各样的急救包，最新式的堵漏器材，最新式的钢盔，最新式的防化服；连最常见的罐头也是最新式的，这帮后勤，早他妈干啥去了。弟兄们执行的任务多得数不清，这架式还是头一次见到；看样子这次要玩真的了。玩就玩的彻底，各舰军医卫生员拿着理发推子，看谁都不顺眼，一阵连推带拔，连喊带叫。终于，一支光头编队诞生了。\"政委带头，一根不留\"这句军舰上的名言，便是那时流传下来的。都光光的了，可弟兄们还不过瘾，拿出刮胡刀，上下左右恶作剧似的来了个自我备皮。哈哈！这才叫一根不留。一个弟兄让我也如此这般，我没敢，我担心万一那个地方长不出来可就惨了；青龙多多，可你上那去找白虎呀！给弟兄点面子吧，便把眉毛给刮掉了。\n在群岛海域转了好几天，连个番国海军的影子也没看见。弟兄们有些着急了，眼看淡水食品不多了，这不是白忙活了吗。一纸电文，由巡逻改为暂驻。那地方可不流行办暂驻证，也不用担心警察老哥抓你。靠主岛补给，弟兄们眼睛都发直了；一群晒得黑呼呼的女兵上舰参观；真漂亮啊！一个油鬼弟兄差点没把淡水给加到柴油柜里。女兵们来自驻岛医院，这是我所见到的最小，而设备最先进的海军医院。女兵们对军舰上什么都特别感兴趣，满舱室乱蹿，还来个边走边问。机会来了，弟兄们抢着去做解说；我真的纳闷，那些平时满口家乡土话的弟兄们，一时间全都变成标准的普通话，还嗲声嗲气的。我本想拉上两个弟兄在岛上转转，可谁都不给面子，这帮小子，真他妈重色轻友。下午事就来了，医院里挤满了来看病的舰员。有病的，没病的，真病的，假病的几呼是商量好似的，把舰上的军医一顿乱棍，还特别要求要打针。政委和军医可不干了：\"都给我回舰上去看病，别在这丢人现眼\"。这帮弟兄的几根花花肠子，哪是政委的对手，他可是专业玩这个的。\n\n　　上级通报，番国一艘侦察船将在午夜前后抵达我海区。小的们还真敢来，弟兄们兴奋无比，顷刻之间就把那医院的mm忘得精光，真是好样的，本人至今佩服！跳帮组全副武装临时*练了一番。午夜十分，雷达上还真的发现了目标。看来咱的情报要比m国的准确得多。战斗警报，全速接敌，开强光灯，靠帮。还他妈真是番国的船，几个渔民打扮的家伙嘴里哇啦哇啦不知说些啥。\"跳帮组跳帮\"舰长一声令下，我带着七八个弟兄准确无误地落在它甲板上。弟兄们还没站稳，便横端着冲锋枪，嘴里大叫\"送爷冬蘑\"直冲向它的驾驶舱和电台室；这帮小的们当时就吓傻了，人多势众却没有一个敢抵抗的，前后用了不到两分钟，往天上打了一梭子弹，弟兄们就完全控制住了这艘大约两百多吨的伪装渔船，小的们也老老实实到甲板面上扒下。经搜查，在船上发现了十多支冲锋枪，两具四零火箭筒，大量的s国制造的电子侦察设备，连我舰的观通长看了都直称先进；这小子，灭自家威风，长它人志气。把小的们拷好，扔进锚链舱。返航。嘿嘿，本人提前过了一把舰长瘾，只是那条破船的速度实在是太慢了。本人不材，到港靠码头时把那破船的首部给撞瘪了。老夫我现在还挺遗憾，这可是老夫唯一的一次离靠码头不良记录。\n\n　　第三天，番国外交部向我提出强烈抗议，说我在其领海上抓走它们的渔民若干。弟兄们可不爱听这等鸟话，一门心思往医院照跑不误，政委的喝斥早忘得一干二净！\n因生活所迫，老夫不得不下海打鱼。前两天忙于补网，没有续言，实在有愧。今天闲来无事，又高喝了两杯猫尿，迷迷糊糊才想起那帮弟兄......\n\n　　在岛上暂住了几个个月，对这群岛也慢慢熟悉了。不远处还有一小岛，岛上有时会有泉水涌出；来往的渔船也会在岛上做片刻的停留。这一天，弟兄们连续颠簸了几十个小时，浑身上下臭气熏天；弟兄们太苦了，在南海这湿热的环境下呆长了，两腿之间的宝贝蛋全烂了，烂得蛋黄都快流出来，又痒又痛。前几天下过雨，说不定岛上能有泉水。在军医强烈请求下，上面同意登岛清理个人卫生，但不得污染泉源。军舰离岛五六百米处抛锚，放下小艇，按走路姿势难看程度排好先后，分批登岛。老夫前些年已多次尝过这滋味，无药可救。但天然的矿泉水对它倒有意想不到的疗效，两次三番后便可脱离绝后的险境。泉水有限，军医便想出一绝；让弟兄们每人拿一小容器，里面放满泉水，用一只手端稳，再把那门大炮连弹放进去。你再看，甲板上站满了这等姿势的弟兄。弟兄们那个爽啊，眼睛爽成一条缝了，嘴里还#￥%胡言乱语。你现在可别惹他们，真会跟你急。友邻舰发来信号讯问：你舰厕所坏了吗？是否需要帮助修理。\n\n　　常出海的人都知道，风浪其实并不可怕，涌浪才是舰船的天敌。弟兄们终于熬过了炎热的夏季，也该回基地了。这几个月下来已经和医院里那群黑mm混的厮熟的弟兄们傻眼了。俗话说：拿得起，放得下。没想到这帮弟兄还啥也没拿到，便这般放不下了，真他妈丢人。启航那天，老夫早有准备地拿出望远镜，在码头旁的椰林里发现了两三个眼睛哭成桃似的黑mm，含情脉脉地注视着即将启航的军舰。\n\n　　返航途中遇大涌浪，航程没到一半又来任务了。配合某潜艇部队训练。说是训练，其实就是给人家当靶子，一枚训练鱼雷从舰下穿过，你就算输。这等的鸟活，谁他妈都不愿意干，不吉利！可谁让你摊上了，摊上就得干好。当天训练完活，弟兄们便随潜艇来到一新的环境，一个更大的海岛。那时正流行一部香港武打电视剧，只要没任务，每天必看，如痴如醉。那天训练结束，吃完晚饭，弟兄们便把电视在码头上架好，只等着赵忠祥他老人家闭嘴。\n\n　　可偏在这会，通知要开会。弟兄们耐着性子，听大中小首长没完没了，又香又长的报告总结；末了，这大首长便站将起来：\"我再补充三点......\"。打开电视，黄花菜都凉了。\n\n　　逢不出海的日子，弟兄们干完例行工作，便可自由活动。说是自由，可他妈买包烟来回都要走两小时的路。码头上太吵闹，潜艇主机轰轰作响，好像永远充不完的鸟电。一个弟兄发现一好去处，军港山后有一片礁石，退潮后礁石上寄生的海生物便裸露出来。政委是浙江人，天生对这等海物抱有好感。只是途中要经过一岗哨，据说那地方不安全，禁止一切动物进入。或许还有商量的余地；政委便带上几个弟兄，口袋里揣上刮锈刀和钓具，顺手拿了两盒水果罐头。这警通连的小哨兵还挺会来事，一声首长长首长短，听得弟兄们心花怒放，两盒罐头递上去，他也不客气，三下五除二便下了肚。有门，这糖衣炮弹果然厉害。谁知道这小子吃完一抹嘴，眼皮一翻，照旧。弟兄们可气坏了，要耍蛮的，政委怕闹出事来，便带大家返回。\"回头再找你算帐\"临走留下一句狠话。老夫由此得出结论：天下的哨兵一般黑，对他们只能像电影里那样。气不打一处来，返回途中偏偏碰上发现那礁石的弟兄。他嘿嘿一乐，带着大家进了一座洞库。左拐右拐，像地道战里的游击队，不一会便从一洞口钻出。这是洞库发电机组的排气口。这小子，天生当贼的料，这等旁门佐道他也能找到。摊开家伙，一阵敲敲打打，钓鱼可是老夫强项。太阳西下，满载而归。从大路走，气死那奸哨；走不远，这好端端的路楞没了，涨潮的潮水淹没了大路，路的另一侧是悬崖绝壁。礁石边的潮水流动复杂，一般都有暗流。弟兄们倒吸了一口冷气。好险啊！晚上要是回不去，这事可就真的闹大了。\n回到舰上，照例大吃一顿。只是那鸡爪螺，老夫看着实在是恐怖，不敢染指。\n\n### 援外\n咱们国家前些年建造的军舰，综合性能是比发达国家的差了点。但单项性能指标一点也不差，咱还有别人难以比较的优势，它太便宜了。花同样多的银子，你到发达国家也许只能买到一艘豪华游艇，还得是二手货。可在咱这里，就能买到一艘装备齐全的，真正意义的，能打响炮的军舰。\n\n　　这一天，弟兄们干完例行工作，便来到岸边的凉亭休息。太阳晒得甲板发烫，这甲板下的舱室里温度更高达五十多度，无处藏身。坐在凉亭的石凳上，小风一吹，摊开战场，命令师长，军长站好位置，大家吵吵嚷嚷，杀它个天昏地暗。这快赢了的，嘴里叼着烟屁股，露出大黄牙，还不依不饶；这眼看要输了的弟兄，脸都憋青了，气得虚汗直往下淌，看谁都想踢上一脚。这小子，冰棍是买定了，见人有份。哈，谁让他平时太小气，不招人同情！\"我--爱--你，卖冰棍的小老头啊个头啊个头啊个头......\"这大黄牙还唱将起来。得势不饶人，也不是他妈啥好东西！\n\n　　下午接到命令。弟兄们要单舰出海，去一座\"较比大\"的城市执行外事任务。油水，副食按远航进行补给。航行了十多个小时，弟兄们筋疲力尽。晚上军舰便驶进一家造船厂。工人弟兄当晚就拆下会议室的桌椅板凳，安装上真皮沙发，竟然未留下任何拆装过的痕迹。这家鸟工厂，要是他妈造船有这等拍马屁的功夫，也不至于......改革开放了，但这等新奇事还是头一回遇到。\n\n　　弟兄们想象力及其丰富，争论猜测的结果，一致认为可能是要送来访的某国家元首回国。老夫那天偷喝了几杯小酒，迷迷糊糊坐在柔软的真皮沙发上，居然想到那鸟元首屁眼上一定长满了痔疮，要不然这沙发没道理搞得这么软。这大热天他有飞机不坐，想玩心跳的游戏？准是个变态狂。只是将要苦了这帮弟兄，大热天，不动还一身臭汗。照例，全舰大扫除，擦拭铜器，补漆；弟兄们还要忙着理发，擦皮鞋，一尘不染。三天后，军舰来到一码头。挂代满旗，弟兄们着装整齐右甲板站坡。拉泡屎的工夫，来了一车队，前呼后拥下来一帮皮肤悠黑的外国军人。在我方陪同人员带领下来到码头，行过大礼，登舰转了三圈,便来到会议室。领头的是一半黑胖子军官，坐在那沙发上左右不定神。哈，真有痔疮啊，老夫偷着乐。基地一\"在城里吃馆子都不给钱\"的弟兄偷告老夫，原来这几个鸟人是某南亚国家元首访华团成员，那\"痔疮\"是该国海军部长，欲订购多艘咱这同型号军舰，弟兄们这次的任务只是要栽着他们，在海上充分发挥这型舰的性能，好让那\"痔疮\"最后敲定画押。一笔好买卖，弟兄们当然义不容辞。\n升火启航。弟兄们换好工作服，各就各位，各司其职。那些黑随从也闲不住，满舱室胡乱闯。要知道，他们可都是行家里手，还是政委脑袋来得快，传令下去，这要害舱室，谢绝参观。军舰来到公海，高速航行，高速转弯，高速倒车，直把那机动性能发挥到极限。机电长事后摸着机器，哎声叹气直掉眼泪，他真的心疼啊。对海攻击，对空攻击，反潜攻击。弟兄们假戏真唱，演练得如火纯青。看得出来，那\"痔疮\"非常满意，一阵相互吹捧。晚上回到港口，\"痔疮\"提出要宴请所有军官。**疤子，弟兄们饿了一天，少数人沾光，太不公平。\n\n　　第二年底，该国派来了大批接舰人员，领头的是一海军中校。老夫有幸加入了所谓的援外大队，手把手教这些异国的老爷们。其间，老夫对他们异常严厉，他们永远也只会说一句中国话：\"是，长官。\"你破口大骂他们，往往得到的也是如此回答，真是三棍子敲不出一个屁来。气死老夫我了。不知为什么，老夫每次看见那领头的中校，便马上联想到那黑胖子的\"痔疮\"，于是，那下面的排泻口便火辣辣的，没完没了！\n\n### 北部湾风云\n每年的夏季，南太平洋上经常产生冷暖空气对流，紧接着便形成了台风。年年一到这个季节，这地方和军队的气象部门便全天候监测，防止灾害发生。动物们在大自然面前，往往显出太多的无奈和被动。记得老夫有一年去\"刷?郎\"之地，正巧赶上来台风，这大小舰船便沿着一条江逆流而上躲避，在一个临江的半山腰上，惊讶地发现一艘数千吨的新加坡客轮平躺在哪里。这便是一九六九年台风在\"刷偷\"登陆时的杰作。那次还造成浏田洋海堤大决口，可怜了浏田洋内陆军某农场一个团的弟兄，他们很多人都不会游泳啊，向驻地海军求助，可海军的舰船都去了很远的锚地避风......这两支兄弟部队便从那时起，至今还不相互来往。海军也冤啊，这都是台风惹得祸！\n\n　　在我国南海，有一个著名大海湾，那便是北部湾。这几年，我国与临近番国进行了边界划分谈判，取得了良好成果。但这谈判也仅限于陆地边界。在茫茫大海上，这边界可就没那么好分了。在北部湾正中间，有一个具有传奇色彩的小岛。说它传奇，是因为这岛在七十年代前还一直归我国管辖，这后来不知道怎么回事，它变成了与番国有\"争议\"地区之一。据番国鸟人说，它们的\"狐仔鸣\"爷爷在抗m时期，曾在这岛上泡过法国妞。不信？有贵国当时最高领导人所赠送诗词一首为证，这诗词中提到的岛便是这里。老夫倒是没看见过那诗词，总觉得这也不算什么狐屁理由啊！这岛虽然不大，但战略地位可了不得，它是扼守我广西地区出海口的重要门户。果然，当两国交恶，这番国便一头栽向北方某超级大国的怀抱。终于有一天，情报显示，番国在那岛上正准备进行一项\"工程\"。以番国的科技水平和财力，搞这类工程是不太可能的，这背后有人给出技术和银子。这\"工程\"一但上马完工，将对我国南部舰队产生巨大的威胁。以老夫对海军的了解，这口恶气是绝对要出的。\n不久，各部队便接到通知，让各舰申报故障，按故障大小，安排修理。当一切准备就绪，这命令便下达了。说是要举行大型军事演习，代号\"狼字无号\"。那个阵容，足以让这号称\"南亚第一军事强国\"的番国胆寒。弟兄们心知肚明，备战便多了一份紧张与热情。验证血型，配给各类物质，政治动员，各式各样的请战书，弟兄们玩着花样来表达自己的爱国热情。这等事老夫向来不甘落后，便悄悄递给政委一份入党申请书，嘿嘿，好像有点投机的嫌疑，见笑！记得还有一个来自广西的小弟兄找到军医，硬是要把他家祖传的止血秘方贡献出来。且不说这秘方效果如何，只是他那副认真劲便令老夫感动不已。为了证实弟兄们的猜测，老夫便和一个在海军陆战队的弟兄通了电话。他那边也在搞临战训练，而且重点是搞抢滩登陆。看来一切如弟兄们猜测。于是，弟兄们便都给家人留下书信物品，老夫也生平第一次写下了一封遗书。夜间出航，赶赴集结锚地。出港时，那山顶信号台更发来一组不同寻常的灯光信号......出港加速，这数百海里航程要在二十个小时内赶到，弟兄们可不敢掉以轻心。只是航渡途中收到一坏消息：集结海区将有台风光临，咱这六艘舰被编为第二梯队，且命令就近待命。指挥舰发来信号：进驻某岛，港内抛锚待命。弟兄们那个气啊，不管公母，天王老子挨个草了一遍。这鸟二梯队其实就是预备队，和流动收容站无异。可怜这支屡见战功的部队，竟然沦落到与西沙海战时相同的命运。\n\n　　一天后。那不受欢迎的台风，竟然在预定集结海区虚晃一枪，然后向左，直奔番国东北海岸。那鸟番国措手不及，台风所到之处，不是人仰便是马翻。当然，我广西沿海也是重灾区，同样也是措手不及。驻当地一支\"第一\"的编队损失惨重，数艘军舰被掀上滩涂搁浅，且要等\"高潮\"来临方可拖入深水。老夫偷算，这样的\"高潮\"可不是天天都能有，起码得等到下个月，他们怕是赶不上这波了。很自然地，弟兄们接到命令，目标直指广西。哈！这\"第二\"也他妈变成了\"第一\"。真爽啊！\n\n　　那段时间，咱国家这外交上的表现非常良好，一直保持静默。不象后来某海峡大演习，大张其鼓，惊天动地，结果事与愿违。要知道，这真想要咬你的东西，他从来不叫唤。那番国也通过其主子知道了我国的决心，再来一次\"收复西沙\"完全可能。于是，那\"工程\"便再无下文，至今如此。这便是中国版的\"姑霸危机\"的由来。通过一次大型军事演习，而达到战略目的，这在我国海军史上是仅有的一次。\"狼字无号\"演习注定要载入海军史册。难怪那演习进行到尾声时，当时的最高领袖会亲临演习现场，检阅了参加演习的部队。老夫也第一次领到了当时还未列装的雪白的海军裤。至于那件有投机嫌疑之事，很快也如愿以偿 。嘿嘿！见笑！\n\n\n　　\"不战而屈人之兵\"，真是妙不可言！\n\n### 关于\"军医\"\n老夫小时候体弱多病，小学没上几天，汉字也就认不了几个。儿时老天爷常下雨，贪玩时淋成落汤鸡更是常事，被老爸一顿疼扁之后可能是伤了元气，小小的年记也会卧病不起。好在家乡附近有一家军队的医院，于是便成了那里的常客。由于瘦得象一只类似于人的动物，那里的医生护士便称老夫为\"猴子\"。一个漂亮的女护士有一天神秘地告诉我，她把我住院病历改成某部战士了，这样出院时就可免除一大笔钱。\"猴子\"年幼无知，并不知道这样做会有啥好处，只是以为解放军阿姨特别喜欢猴子。。。。。。\n\n长大来到部队才知道，这军舰上的军医可不是好当的，除了要医治病人外，他还得根据特殊的情况来甄别你患的是真病还是假病。整天面对熟悉的弟兄们，有的事还真拉不下面子。好在老夫所在舰上的军医是个大活宝，这等鸟事好象也难不倒他。\n\n舰上的军医姓王，北京人，军衔在舰上排老二，于是又有\"王老二\"的别名。此人及其不正经，整天疯疯颠颠，没事便各舱室乱蹿神侃，倒也受弟兄们的欢迎，老夫有时甚至担心他会教坏了这帮弟兄，\"老不正经\"的雅号他也当之无愧。别看他老哥嘴上不太正经，医术却十分了得，治疗肝病更是他的绝活，在驻地小有名气。但是据他说其实自己最精通的还是妇科，弟兄们听后无不突出双眼，佩服！佩服！的赞叹声响成一片。。。。。。\n\n每次出海回来或是进工厂修船，都会有少部分弟兄找\"王老二\"看病，也不管是大病小病一律要求住院治疗。有的弟兄也就是图个新鲜，没去过的地方他想方设法也要去，再加上住过医院的弟兄添油加醋的一通乱侃，把个好端端的医院描述的乱七八糟。你去住过医院要是没遇到什么\"特别\"之事，那弟兄们是绝对看不起你的，甚至是鄙视你，会说你是个\"沙鼻蛋\"白他玛住院了。于是，只要是从医院大病痊愈胜利归来的弟兄，为了不当那\"沙鼻蛋\"，回到舰上后便会给其它弟兄大讲特讲自己的艳遇，并哎声叹气改称自己为\"过来人\"。那几天每天晚饭后便是\"过来人\"固定的开讲时间，弟兄们围成圈听得浮想联翩仔细非常。舰长曰：\"你们这帮家伙开会时为何老打磕睡\"。这些艳遇的最后的结果大都惊人地相似：临别时那些护士mm哭得泪人一般，送了一程又一程，赶也赶她不走。。。。。。\n\n舰上的弟兄们大都是二十岁左右的小伙子，经过那些\"过来人\"如此这般地形容描述，便可以想象那医院在弟兄们心目中的位置。弟兄们有病一般是先经过舰上军医或是基地门诊部诊治，如遇大病则需要舰上或门诊部的军医开出\"介绍信\"送往条件更好的大医院。这大医院科目详细，包治百病，还有不少退休的\"老军医\"坐诊。但让弟兄们最看中的是这里能住院，能与护士mm零距离接触。。。。。。\n\n有一年厂修，舰上还未宣布进厂具体时间，有消息灵通弟兄就坐不住了。在海上奔波了一年多，终于可以有机会去\"大病一场\"。有一个弟兄好象拜过师练过绝活，竟能达到说病就能病的最高境界，而且是大病，非住院治疗不可。。。。。。。真可怜，一个大小伙子，在床上一躺就是几天，饭也几天没吃了，说话声小的象蚊子叫，一到晚上便呻吟不止，谁见了都会心酸落泪。军医检查几次不能药到病除，他老哥眼珠一转，大笔一挥，住院介绍信便开出，临别还不忘嘱咐一句：\"你这病一定要找'老军医'，他们包治\"。那小子欢天喜地去医院一检查，果然是\"疑难杂症\"，先住院观察几天，打针吃药的伺候。\n\n军医是何等人也，小眼珠一转准让弟兄们发虚，在体温计上做手脚等小儿科已难骗到\"介绍信\"。这一招的确是高，还是第一次见到，老夫佩服，但几天不吃饭实在是让一般的弟兄不敢效仿。跪计多端的军医，带上卫生员来到那位弟兄床位，内外一翻，竟然找出了不少空食品袋。。。。。。\n\n真象大白，军医一个电话便打到医院，说了些什么就不得而知。第二天，医院便有医生找那小子谈话，说他患有重病，马上需要动手术，让他有个思想准备。。。。。。\n\n大医院果然厉害，用的药一定是高级货，真是奇迹。第三天那小子就回舰报到，自称药到病除，病已痊愈，看上去还真是活蹦乱跳如初，老夫百思不得其解。据他说回来是为了能赶上卸炮弹这等体力活，怕是部门里人手不够。真是个好同志，生病期间也能想着工作，真应该嘉奖。军医更是关心爱护病号，好说歹说劝他回医院再观察几天，他小子说啥也不再回去。。。。。。晚上医院来电话，口气极其不满，大意是告那小子偷跑出院，并让小子回医院补办个出院手续。。。。。。真是无组织无纪律。\n\n军医也不是铁板一块，毕竟是弟兄们中的一员，如果你确实是有病，他也会亲自出马送弟兄们入院治疗。每年年长的弟兄们退伍前几个月，他便会大发一次疯颠，挨个问老兵们：\"掏你那鸟出来让我瞧瞧\"，老兵们大惊，双手将鸟护得严严实实，恐其飞走，这鸟军医实在是让人难以预料。他查看\"那鸟\"的结果是将几个鸟皮过长的弟兄送进医院做割除手术，还说过几年便会有人感谢他，真是放屁。临离别部队，才给弟兄们这住院的机会，真是恨死这\"王老二\"。弟兄们割完鸟皮出院回到舰上，便有大胆的\"沙鼻蛋\"前去痛诉那些\"过来人\"：\"你们害得我差点挨上一耳光\"。\n\n### 紧急出航\n 弟兄们的业余时间不太多，但也算活的精彩。弟兄们的驻地码头在郊区，与城区隔海相望，每天有几班轮渡来往。城区也有一海军码头，驻扎着另一支兄弟部队，那边的弟兄只要是出了码头营区几百米，就能来到城市的商业中心区，满街的花花绿绿，真是让我等乡下人羡慕不已，浮想联翩。\n\n郊区这边的弟兄们平时想要进城，就得步行半小时到那轮渡码头坐船摆渡，费时费神不说，还老担心它会突然间出航。多年以来，郊区这边码头上的弟兄们一直在向\"上面\"反映，说是水质不好，吃了常常会\"多拉快跑\"，强烈要求到对面的x号码头加注淡水。其实，这郊区的水质好不好弟兄们自然是心中有数，大家心照不宣异口同声，还是政委同志眼睛雪亮。他老人家常常敲打弟兄们，情急时便一语道破天机。当然，他也只是在弟兄们面前假正经，对外也是牢骚一大堆。\n\n\"上面\"自然是关心爱护弟兄们的身体健康，每逢舰上淡水少于规定，\"上面\"便安排军舰靠x码头加注城里人喝的高级水，加水过程中除了舱段班外，其他弟兄基本上没啥屁事。于是请假的弟兄大増，理由也五花八门，而且这些理由听起来还真的让值更官动容不好拒绝。\n\n每次进城加水都是中午靠过去晚饭前回来，而且只让停靠四五个小时，不让在城里过夜，但用四五个小时的时间来加水还是足够了。这样靠过去的次数一多，便有弟兄对城里的某些人有了牵挂。说来也怪，随着进城加水的次数增多，这加水的速度却是越来越慢，慢到必须要隔夜才能加满。问那鸟班长，答是水压太低，后半夜才够压力。于是\"上面\"便也开通，顺其自然。。。。。。别看弟兄们平时有些贪玩，甚至玩的有些违纪的嫌疑，但对待工作可决不含糊，大家尽可放心，老夫也敢保证，弟兄们是绝对经得起考验。\n\n终于有一天，这考验弟兄们的事说来就来了。那天晚饭后刚进到城里码头加水，十几个弟兄抹得油头粉面，请假外出，说是要买学习用的书籍。这帮小子，耍的新花招居然让人不好回绝。买书学习理所当然会准假，只是小子们满身的劣质香水味十分令人生疑。\n\n也活该小子们倒霉，他们走后屁大的功夫事就来了。某观通站上报，有一艘不明国籍的鸟船在我领海线的公海上晃荡了几个小时，来回往返数次十分可疑，据判断可能是某国的侦察船，\"上面\"令我前去电子干扰，软硬兼施不赶儿走决不收兵。\n\n水自然是加不成了，得马上返回乡下码头载上几个\"高科技\"，安装临时设备。汽笛声声还真唤回了几个爱学习的弟兄，但那几个更爱学习的弟兄可就没有这般幸运。他们只是晚回来片刻便立在码头边唉声叹气隔海相望。眼看着海湾对面军舰桅杆上亮起了五颜六色的紧急信号灯，急的几个小子着急上火。坐轮渡怕是赶不上了，这突然来的事准不是小事，虽说是正常请假外出，但弟兄们谁也不愿错过这类\"紧急状态\"。养爷千日，用爷一时，这个道理弟兄们都懂。几个小子一商量，立刻脱掉衣裤往槊料袋里一装，便一头扎进水里。还不是吹牛，这六七百米的距离，舰上任何一位弟兄都不会放在眼里。\n\n眼看出航时间将至，借调顶替人员已经到位，这时便有舰上弟兄发现不远处海中有几个人头时隐时现。信号灯照过去，发现是自家弟兄正往码头游来。真是没看出来，这几个小子，平时吊儿啷噹没少给领导惹麻烦，这关键时刻小子们还真是敢想敢干。\"不错，好样的\"，老夫这可是头一次听舰长夸奖弟兄。好在潮水不急，小子们很快便游到军舰舷边，抛下缆绳，舰务长指挥弟兄们七手八脚拽他们上舰。老夫生来就爱凑个热闹，前去一看便大惊失色，原来几个小子都一丝不挂，个个三点暴露。其中一个弟兄的家伙好生特别，还真是如传说中般大小，真是大开了眼界，这世界上果然有此巨物。老夫开眼之余便联想到了家乡的名菜驴三件。。。。。。\n\n其他弟兄们自然是对驴尾马头不感兴趣，便一哄而散回到岗位上。军舰准时出航，无一人\"掉码头\"。航渡途中，舰务长突然间心血来潮，独自下厨房亲自给那几位鸟人做饭加餐，说是游泳最消耗体力，得给小子们补补。老夫嘴谗，闻讯后便死皮赖脸拿着碗筷窜到厨房，还未进门，便见到那老抠门右手拿菜刀，左手拿一个大萝卜比划间自言自语道：\"他的家伙硬起来怕是该有这么大\"。言语间菜刀重重落下，罗卜被斩成两半。老夫大惊，用碗护住私处落荒而逃。。。。。。\n\n### 关于\"舰务长\"\n 记得刚到海军，学的有一门课程名叫\"舰艇共同科目\"，也就是前面所提到的共同规矩。随便翻了一下课本，便对内容大概有所了解。这门课程主要是靠死记硬背方能考试过关。老夫那时还掌管区队里的一片菜地，业余时间便大多献给了那些罗卜白菜们。考试前临时抱了抱佛脚丫，竟也顺利过关，只有一道关于舰务长的解释题答出了差错，扣分不少。\n\n八月分配，弟兄们乘运兵舰来到一陌生码头，通知各舰舰长亲自领回新来的弟兄。等到最后一刻，来了一个胖子\"舰长\"，拿起老夫的行李，扔下一句话：\"军舰在工厂保养，算你小子命好\"。望着他那胖胖的背影，老夫暗自高兴，这艘军舰大概伙食是最好的。跟随那胖子上了一艘登陆艇，半小时后来到工厂。临下艇，胖子来到艇上的厨房，顺手抓起一大块猪排骨，对那艇长说：\"上次借你的几棵白菜不用你还了\"，说罢转身就走，气得那艇长在驾驶台上跳脚骂娘。这个鸟舰长怎么如此小气没有风度，老夫也为他脸红。\n\n\n后来才知道，那天舰长政委有事，来接我的胖子是舰务部门的头头舰务长。此人张姓，山东人氏，弟兄们在不同的场合称呼他为胖子张，首长或是老抠门，他也是我所见过外号最多的一个另类人物。与弟兄们在一块说笑时，你可称呼他为胖子张；你要有事求他，称呼他为首长，你的事就算办成了一半；他惹弟兄们不高兴时，弟兄们就会背后骂他老抠门。说来也怪，他从不说山东话却说得一口地道的河南话，家乡的不清不楚颇令人生疑。他常常在新来的弟兄们面前诉苦称：很小的时候嘴谗，跟着一个卖麦牙糖的货郎来到了河南，后来那货郎不知怎么就成了他的家长。一席话便让弟兄们听的直掉眼泪，对他倍感同情。这时他准会\"哈哈\"一笑，扭头便走，搞得弟兄们哭笑不得，难辨真假。\n\n\n关于胖子张的传说有好有坏，据比较了解他的政委介绍，胖子张是最后一批没经过部队院校提拔的军官。他原是另一艘舰上的志愿兵，任职炊事班长，烧得一手好菜，人也勤快，常常天没亮就起床打扫码头。时间长了，便被晨练的几个支队首长所注意。首长每次来码头巡视，中午点名要到他所在的舰上吃饭，说是吃了他烧的菜解谗，过瘾。问他烧菜绝窍，他便会象讲家史一样脱口而出：\"烧菜不用学，火大和油多\"，真是干净利落。\n\n或许是舰务部门专业性不是很强，还是另有其它原因，胖子张便被破格提拔为我舰的舰务长，掌管着舰上的后勤与帆缆班的十多个弟兄。理论上军医和卫生员也应该是他的下属，可他老哥就对用钱的地方感兴趣。舰长，舰务长一字之差，再加上他老哥的体型，还真闹出过许多笑话。最离奇的是一次运送新上任的基地首长视察某岛仓库，那时还没军衔，鸟首长外型远不如胖子张气派。靠好码头，官们便陪伴首长走上引桥，引桥的尽头跑来那仓库领导，径直来到胖子张面前立正行礼：\"报告首长同志，xx仓库全体官兵集合完毕，请您指示\"。。。。。。不远处舰上的弟兄们捂住嘴笑的直想尿。从此，这\"首长\"的大名便远扬，故事也就越传越神奇。\n\n胖子张绝对是一个称职的管家，精打细算，上上下下对他的工作无可挑剔。例如，他嫌供应站的菜太贵，便悄悄去市场联系菜贩送菜，附近的不少菜贩都知道海军有一个胖子舰长亲自来讨价还价，很难对付。为此，害得专门负责买菜的上士同志抽烟档次直线下降，背后没少骂他。要说缺点，他也是一大堆，他常常不顾场合隔着裤子用左手拽\"那个地方\"，有心的弟兄给他统计过，平均每小时要拽十多次，弟兄们天性好奇，便想在澡堂里见识一下，可几年下来都没有成功，他是在故意躲着弟兄们。他还有一个毛病，就是在外办事他常擅自提拔自己，方式也颇简单，介绍时省去一个\"务\"字，他便能连升几级，按他的理论说，就是官大好办事，弟兄们想来想去，觉得有些道理。他对弟兄们是真心实意，弟兄们当然事事也罩着他。他谈第一个对象时，先与女方通信半年互没见面，他在信中是如何吹嘘自己的不太清楚。女方一日突来部队见他，在码头哨位上正好遇到文书同志，称要找xxx舰的张舰长，好在文书同志拍马屁多年头脑灵活，瞬间判明来人身份，便先稳住对方，自己飞奔回舰通报敌情。不一会，这\"张舰长\"便亲临哨位迎接女友登舰参观。登舰时，武装更给了个舰长登舰的礼哨，晚膳更是在舰长室享用并由军医亲自跑堂。弟兄们一声声\"张舰长\"叫得胖子张好不自在。面子是给足他了，可后来还是没谈成，按舰长政委的话说就是：\"我早觉得这么干太悬\"。其实，人家是嫌他体型太胖不合国际潮流，且前任男友是个杀猪的。\n\n胖子张刚三十出头，却怎么看着都象四十好几的人了，再联想到他那不清不楚的出身，有弟兄便怀疑他年龄有诈，但更多的弟兄是替他着急上火。每次提及此事他便装着欲发脾气，好在弟兄们十分了解他，嘻嘻哈哈也就过去了。印象中胖子张还真是发过一次大脾气，也就是那次的大脾气，才使弟兄们多年的疑惑得以解除。那次好象是在游泳时，他一个猛子扎的太冲，水的阻力把他的蛋囊裤退掉，一个弟兄捡到后死活不给还扔到岸边，胖子张大怒，光着屁股追打那弟兄直到岸上，把弟兄吓个半死，抱头鼠窜。第二天，全舰的弟兄们都在悄悄地议论胖子张的某个部位，谈论间还伸出小指头比比划划，非常神秘。打那天以后，弟兄们在他面前便尽量避免使用诸如花生米，蚕蛹之类的字眼。。。。。。\n\n胖子张当了多年的舰务长，工作上成绩突出，弟兄们都幻想着他能早一点被提拔重用；也希望他生活上来个突破，搞个把\"码头\"靠靠。果然，一年以后，也就是在老夫临离开那艘军舰前夕，基地终于宣布命令，胖子张被提拔任命为另一艘军舰上的副政委。我舰的弟兄们难过了几天后便又都乐了。原来，新的职务要求他还须辅管舰务部门。看来他老哥还真是很难跳出这个圈子。按胖子张的话说就是：\"提不提拔鸟球一个样\"。\n\n### 偷拍事件\n现在真是开放了，游人见到自己感兴趣的东西，便可拿着照像机乱拍一通。看见网上有些好像片明显是出自弟兄们之手，真是不简单。前些年生活水平远不如现在，购买一架照像机要花掉弟兄们许多银两。老夫所购买的第一架照像机便是花费了四个月的饷银。那是架上海产的双镜头反光像机，真是可惜，它跟了我不长时间就离开了我。\n\n自从那位摄影家勾起弟兄们摄影兴趣后，老夫也咬牙切齿买了一架像机，虽然没出什么大作，但也给弟兄们带来不少乐趣。每次拍摄完毕，来到队部自建的暗室，自己冲洗放大像片。在红灯下看着那些慢慢显现的人影，心里得意万分。\n\n一次出海，来到一潜艇基地与潜艇搞对抗训练，老夫利用训练休息间隙，给弟兄们留下了不少美好的回忆。也记不清是哪一天的黄昏，几个弟兄正在军港防波提上相互留影，正巧赶上一艘潜艇训练回港，圆滑的艇身在低角度阳光的照射下，显得异常美丽，真是一幅油画般的景色，我等弟兄来不及多考虑其它，几台像机同时对准了那艘归航的潜艇一通神拍。本还想再多拍摄几张，这祸也就在不知不觉闯下了，那艘潜艇上有人大声呼唤岸上的哨兵，让哨兵把弟兄们扣下。其实，弟兄们也知道军港内是禁止照像的，尤其是拍摄军舰潜艇，更是不允许。但每个军港要求的尺度并不一样，在很多军港内弟兄们拍几张像片是不会有人来管的，今天算是遇见个真鬼子。\n\n趁那哨兵还没来，弟兄们快步跑回舰上躲藏起来。没想到这一躲更把事情闹大了。弟兄们当时认为潜艇上的人喊叫只是想制止拍照，过后不会追究。等那艘潜艇靠好码头，下来了一帮领导模样的鸟人，把码头哨兵骂个狗血淋头。事后才知道喊话的领导是那个基地的\"放啥屁都响\"的人物。也许是我们逃跑的行为激怒了他，他不顾出海的疲劳找到我舰舰长政委，要求协助他们调查是哪几个胆大包天者所为。毕竟与他们不是一个单位，他们对舰长政委的态度也算客气。值更官集合全舰弟兄，把\"坦白从严，抗拒更严\"的政策连说三遍，是哪几个人干的自觉站出来。老夫等人早已受到惊吓，腿肚子哆哾，如何敢站得出来。搞得他们没有面子，灰溜溜地走了。\n\n更吓人的事第二天一早就来了，那基地竟然动用了保卫部门的人前来调查，真是有点小题大做，看架式他们不查出来是决不罢休了，弟兄们也是在劫难逃。\"坦白从严，抗拒更严\"这句话果然没错，弟兄们实在是受惊吓过度，无奈之中便选择了坦白从严。\n\n弟兄们遭灾，舰长政委脸上也无光，带着几个倒霉弟兄来到那基地队部，一番舰上管教不严，今后从严要求的屁话之后，便任由他们发落。几个弟兄也铁了心，摆出一付死猪不怕开水烫的架式。。。。。。\n\n保卫人员不知天高地厚打起了官腔。首先，认错态度恶劣。因此，这鸟事被定性为\"事件\"，需写深刻检查；其次，取消几个弟兄随潜艇出海体验的资格；再其次，暂时扣留照像机，你舰返航时凭检查领回。\n\n\n幸亏与他们不是一个单位，要不然非脱层黑皮不可。回来的路上，舰长政委也觉得有些过份，并对弟兄们表示同情。半个月后，弟兄们终于返航离开那个鸟地方。由于不愿意再看到那些保卫人员的\"官腔\"，弟兄们都没去领回那些照像机。\n\n实话实说，老夫本是死脸一张，并不在乎那次的随潜艇出海体验的机会，留得青山在，还怕没柴烧。只是对那架照像机深怀思念之情，几次做梦都没少了它，它毕竟是老夫的\"第一次\"，也不知道它现在是否还活在人间，过得还好吗？\n\n### 小镇趣事\n现在真是高科技了，人坐在室内，用鼠标轻轻一点，天下大事皆可尽知。尤其是能欣赏到网上弟兄用照像机记录下的新舰建造进度，看了真让人精神震奋。国庆大假，电视节目真是让人失望，几十个电视台中竟然找不到合胃口的东西。\n\n记得很多年以前，\"上面\"将我等十余个弟兄分配到一支屡建功勋的英雄部队，老夫更是分在一艘参加过箸名战斗的军舰上，部队在一靠近香港的箸名小镇上还有一小码头，码头营区十分简陋，基本没有文化娱乐设施，军舰每次巡航训练路过都会在此小住补充淡水。码头驻地有间军人小卖部，但里面弟兄们能买的起的东西不多。出了码头不太远，便是镇上的商业中心，那里的东西便宜且品种多样。说那小镇大名鼎鼎，绝非夸大其词。从分来这支部队的第一天起，大小领导便警告弟兄们，这鸟镇上的老百姓家里多是收看香港电视节目，节目内容尽是黄色下流之类，令人作呕。为了怕弟兄们无意之中观看到那些\"令人作呕\"的节目，每次路过此地，便临时规定禁止任何人晚间外出，白天出去的弟兄晚饭前必须要回舰。从此，那电视节目在弟兄们心中神秘异常。\n\n一年夏季，弟兄们正被各种考试搞得晕头转向，突传来上好的消息，让弟兄们去配合一支快艇部队训练，且训练海区就在那小镇外海，为期一个月。这类训练其实非常简单，早出晚归，当好陪练就算完成任务。于是，出航前几天弟兄们晚上睡觉前的话题自然转到这小镇上。有弟兄呜咽发下誓言，定要\"牺牲我一个\"，前去\"令人作呕\"一把。\n\n几个小时的航程，把弟兄们带到了预定海区。一艘快艇靠将过来，送上来了几个快艇部队的鸟人。上到指挥台，安装上几个老夫不懂的仪器，其中一个胖鸟人便开始发号施令。说来也怪，那快艇部队的人个个体态雍肿，白白胖胖，不是伙食不错，就是长期没出过海。真让人羡慕三分。\n\n训练终于正式开始，军舰按预定航向行驶，忽快忽慢，迎接那几艘快艇的攻击。海面风浪偏大，第一天训练便给几个胖子下马威，吐得东倒西歪。舰长心肠软，急令炊事班上酸菜，偏方这会儿最有功效。那几个鸟人不断调整仪器，嘴里高喊\"xxxx号命中目标\"，看着那些胖子的得意劲，老夫心中不是滋味，便用望远镜观察四周，却连个快艇的影子也没见。来到雷达室，荧光屏上竟然显示出上百个运动目标。与渔船混在一起，还真是不易分出，果然都是行家高手，不可小视。一天下来，经那几个鸟人统计，我舰被\"命中\"十多次，舰长闷闷不乐，自称倒霉。。。。。。\n\n训练完活，如弟兄们所愿，来到那小镇。由于是单舰停泊，码头上显得空荡荡，吃罢晚饭，便有弟兄试着请假，理由绝对催人泪下。领导同志果然厉害,且让你屁也放不出，把弟兄们欲办之事集中，交由文书同志外出统一办理。晚上黄金时间，把弟兄们集合在码头上，点名后军医官亲自出马，指挥弟兄们大唱革命歌曲。。。。。。\n\n唱罢军歌，弟兄们便聚集后甲板，望着不远处的民居心神不安，只为那外出购物的文书同志担心，万一他小子\"呕吐不止\"该如何是好。一发过誓言弟兄挺身而出，自告奋勇前去寻找。革命同志真是亲如兄弟，关键时刻尽显真情，老夫感动万分。只是小子如何能躲开门岗那双火眼金金。。。。。。\n\n文书按时归队，弟兄们便围拢过来，关怀备至询问到底\"呕了几次\"。眼见文书头冒虚汗，嘴唇哆哾，死也不肯承认看过\"令人作呕\"节目。弟兄们断定，领导说的没错，那电视节目果然毒性很大，连政治过硬的文书同志都扛不住搞成这等模样。。。。。。\n\n那外出找人的小子终于回来，躺在床板上大讲如何买了一包烟便看了几个小时的电视节目，却只字不谈弟兄们最关心的\"令人作呕\"的节目内容，任凭弟兄们软硬兼施，小子只是奸笑不语，真是中毒不浅。\n\n一连几天，那些军歌被弟兄们翻来覆去唱了八百遍，实在是无歌可唱，晚饭后便任由弟兄们聊天胡侃。那小子更是如法炮制，和弟兄们玩起了失踪的游戏，并且每次都在就寝前返回，回来后小子手舞足蹈，口中还念念有词，好生奇怪。弟兄们一致认定，该同志病毒已入膏肓，危在旦夕。\n\n为了挽救该同志，有弟兄便上报舰领导。领导集体找他谈了几次话。令人吃惊的是，谈话后舰上居然没屁反应，连份检查也没见他写。当晚，该同志更是与政委一道大摇大摆从大门出去。。。。。。\n\n周六加餐，军医照例又偷喝几口小酒。趁着酒劲，他宣布一条爆炸性消息：从今晚起，弟兄们将要收看那香港电视台节目，但不许弟兄们声张，出事他来扛。鱼骨天线已经买回，饭后安装。弟兄们听后大惊失色。。。。。。\n\n架好天线，弟兄们迫不及待打开电视。调试几个电视台，却怎么也找不到那\"令人作呕\"的节目，倒是一部叫\"天龙八部\"的电视剧吸引了弟兄们整晚的眼球，可惜那香港鸟话弟兄们大都听不太懂。。。。。。\n\n二十多天后，弟兄们胜利完成训练任务，返航回到基地。那段时间，弟兄们又染上一个怪毛病，两人见面就手脚并用\"咳，咳\"开打，直打得一人落荒而逃方才罢休。临舰的弟兄们见状议论纷纷，大惑不解。。。。。。\n\n### 油船事件\n在海军的训练基地里，有时能看见身穿其它军种制服的弟兄在懆练，前些年甚至还能见到一些外国水兵的身影。初见觉得奇怪，后来才了解到原来舰船并不是海军的专利。通过这些制服可以看出，各兵种甚至武警也有自己的舰船队伍。那些花花绿绿的制服扎在海军堆里还真是抢眼好看。\n\n每次弟兄们出海执行任务回来，舰上都会加上几个菜，饭前舰长政委便会说上一些老套的客气话，以鼓励大家再接再厉。真是考验弟兄们啊，山珍海味摆在你面前，还要流着口水耐着性子听一些都能倒背如流的屁话。次数多了，弟兄们意志薄弱经不住菜肴的诱惑，往往站着的还没放完，蹲着的便已偷吃下肚。也不能怪弟兄们嘴谗贪吃，这人在海上时间久了，肚子里的一点油料都交给大海。但记得有一次，弟兄们出海回来，也是一样的好菜，但弟兄们却无一人能吃的下去，因为弟兄们心里难过，谁也没想到结果是这样残酷无情。。。。。。\n\n也是在一年的冬季集训，来到某岛海域，几艘军舰正在搞编队防空训练，突然接到紧急命令，令我等两艘军舰停止训练，全速赶往某海区。舰长不敢怠慢，急加速脱离编队，跟上指挥舰朝着一海峡方向全速驶去。航渡途中宣布成立跳帮组，配发轻武器弹药等。弟兄们直纳闷，莫不是改了训练科目？经政委简单介绍弟兄们才明白，原来是一艘我空军满载油料的油船，途径那海峡来到海峡出口时，鸟船突然停车且偏离了航道，向一大岛方向漂去，那里可是个敏感的海区，来往军舰都要拉响战斗警报，随时准备开打。弟兄们知道如果那艘油船漂过去的后果，据那船长称是主机出了故障正在排除，且抛下双锚也无济于事。也许\"上面\"考虑问题比弟兄们更为深刻，接下来的发生的事更是让弟兄们不忍。\n\n少了两短声的战斗警报铃声更是与往常不同，铃声告诉弟兄们，这不是演习。很快便找到了那艘油船，接近观察，看样子真是主机停车，船身在涌浪中忽上忽下漂浮不定，船首正在收回锚链。不远处也有两艘敌方军舰在监视弟兄们的一举一动，天空中两架我方的战机在盘旋，弟兄们看的真切，战机上挂满了蛋蛋。\"上面\"命令跳帮，并让弟兄们控制住那艘油船。有弟兄借口风浪太大，不愿意带枪跳过去，可军令难违。。。。。。\n\n接管了油船，油船船长教导员正急得满头大汗，他们的机电长更是满身油污大骂某厂。。。。。。看得出来，他们也是尽了全力。弟兄们接好缆绳，实施拖带部署，也真是难为了这型只能快跑的军舰，拖上这么个沉重包袱，只能慢悠悠离开那个鬼地方。。。。\n\n好不容易迎来了拖船，舰长便奉命请那船长教导员及机电长\"跳\"到我舰来\"喝茶\"。这三个空军老哥似乎感觉到了什么，便都着装整齐进驻我舰会议室。老夫好奇，便前去泡茶款待，竟发现他们也都穿着呢制服，绿色的呢制服真是好看。提出交换一套，船长的回答令我心酸：\"恐怕这是最后一套了，要是这次没事我送你一套\"。\n\n回到基地码头，早有空军人员表情严肃等待。在弟兄们的眼皮底下，三个人被\"请\"进吉普车呼啸而去。弟兄们无语，据下过机舱的弟兄说，那船的主机的确损坏严重，好象是什么鸟曲轴断裂。。。。。。看来各种审查是跑不掉了，但愿他们能顺利过关。\n\n弟兄怎么也想不到，这次任务的圆满完成后会是这样的结果。晚上照例加菜，没有了领导的饭前屁话，弟兄们也是心中难受的吃不下饭，他们都太善良了。。。。。。一个月后，传来好消息，经专家检查，那油船的确是发生突发性故障，并且没有人为破坏迹象，船长等人顺利过关。记得那天晚饭临时加菜，不少弟兄偷喝光了军医一瓶珍藏多年的大补酒，气得军医同志大骂三天。。。。。。\n\n那艘船前些年还看见过，这几年却不知去向。老夫心里一直还在掂记着那套空军呢制服，如果遇见那船长，必定厚颜无耻继续索要，不达目的决不罢休。\n\n令人吃惊的是，在满是侃大山高手的军舰上，这件事是唯一没有再被弟兄们提起的，也许是弟兄们记性不好，早已忘个干干净净。\n\n（完）","categories":["reprint"]},{"title":"图片 JPEG 显示优化","url":"/2019/10/31/gradual-jpeg.html","content":"### 1. JPEG介绍\nJPEG 是Joint Photographic Experts Group（联合图像专家小组）的缩写，是第一个国际图像压缩标准。JPEG图像压缩算法能够在提供良好的压缩性能的同时，具有比较好的重建质量，被广泛应用于图像、视频处理领域。\n\n### 2. 保存方式\nJPEG文件格式有两种保存方式。他们是Baseline JPEG和Progressive JPEG.\n两种格式有相同尺寸以及图像数据，他们的扩展名也是相同的，唯一的区别是二者显示的方式不同。\n\n* ##### 2.1 Baseline JPEG （基线）\n这种类型的JPEG文件存储方式是按从上到下的扫描方式，把每一行顺序的保存在JPEG文件中。打开这个文件显示它的内容时，数据将按照存储时的顺序从上到下一行一行的被显示出来，直到所有的数据都被读完，就完成了整张图片的显示。如果文件较大或者网络下载速度较慢，那么就会看到图片被一行行加载的效果，这种格式的JPEG没有什么优点，因此，一般都推荐使用Progressive JPEG\n![ ](./gradual-jpeg/structure-baseline.jpg)\n\n* ##### 2.2 Progressive JPEG （渐进）\n和Baseline一遍扫描不同，Progressive JPEG文件包含多次扫描，这些扫描顺寻的存储在JPEG文件中。打开文件过程中，会先显示整个图片的模糊轮廓，随着扫描次数的增加，图片变得越来越清晰。这种格式的主要优点是在网络较慢的情况下，可以看到图片的轮廓知道正在加载的图片大概是什么。在一些网站打开较大图片时，你就会注意到这种技术。\n![ ](./gradual-jpeg/structure-progressive.jpg)\n\n### 3. 如何创建\n1. 使用Photoshop\n2. 文件 > 存储为 > 先点击保存，随后会弹出JPEG选项\n3. 如果想创建渐进式JPEG，选择连续\n![ ](./gradual-jpeg/jpeg-option.jpg)\n\n### 4. 应用\n1. 基本JPEG和渐进JPEG该什么时候使用？\n2. 当您的JPEG图像低于10K时，最好保存为基本JPEG（估计有75％的可能性会更小）\n对于超过10K的文件，渐进式JPEG将为您提供更好的压缩（在94％的情况下）\nChrome + Firefox + IE9浏览器下，渐进式图片加载更快，而且是快很多，至于其他浏览器，与基本式图片的加载一致，至少不会拖后腿。\n3.渐进式图片也有不足，就是吃CPU吃内存。\n","categories":["note"]},{"title":"母鸡与前端工程师","url":"/2019/10/25/hen-and-front-end-engineer.html","content":"转载：[母鸡与前端工程师](http://www.ruanyifeng.com/blog/2016/07/hen-and-front-end-engineer.html)\n作者：阮一峰\n\n1.\n\n新闻说，今年全国高校毕业生达到空前的756万，又赶上很多传统行业压缩产能，就业压力很大。\n\n很多曾经的\"明星专业\"，都已经就业困难。我考大学的时候，国际贸易是最热门的专业之一，大家认定这个专业容易赚钱。但是现在这个专业的毕业生，想找一份好工作会很难，上海将它列入10大预警专业，即最难就业的十个专业之一。\n\n![ ](./hen-and-front-end-engineer/bg2016072601.jpg)\n\n但是，并非所有行业都不景气。至少有一个行业的用工需求极其旺盛，到处都是招聘广告，工作岗位是应聘者数量的好几倍，通常你都有好几家公司可以挑。每周都有朋友发来消息，能不能帮忙介绍几个人过来，我们实在是缺人啊。\n\n这个行业就叫做互联网开发。\n\n2.\n\n互联网行业的劳动力需求，可以用\"用工荒\"来形容。\n\n只要你会做网页，尤其是手机App的页面，或者微信的活动页面，就不愁找不到工作。哪怕你刚刚学会几个月，或者刚从培训班毕业，只要能拿出作品，就会有比其他行业高得多的起薪。等到有了一两年工作经验，工资就可以达到大学教授的水平。\n\n这样的就业行情，怎不令人趋之若骛。尽管每年都有好几万新人加入，互联网公司还是在喊，工程师严重短缺。\n\n我曾经不太理解，为什么网页开发工程师（或称\"前端工程师\"）这么抢手。直到有一天，看到了一组鸡蛋的统计数据，才想通了这个问题。\n\n![ ](./hen-and-front-end-engineer/bg2016072602.jpg)\n\n中国是世界鸡蛋第一大国。据统计，2013年全国产量5750亿枚，一个中国人平均一年要吃掉400多枚鸡蛋。\n\n那么中国需要多少只母鸡，才能达到这样的产量？\n\n![ ](./hen-and-front-end-engineer/bg2016072603.jpg)\n\n据说，普通母鸡一年大概生200～250枚鸡蛋。养鸡场里面最优秀的母鸡，一年可以达到320枚。以250枚计算的话，中国至少需要有23亿只母鸡，才能满足全国人民吃蛋的需求。\n\n![ ](./hen-and-front-end-engineer/bg2016072604.jpg)\n\n4.\n\n如果把鸡蛋换成网页，同样的问题就是，中国一年需要生产多少张网页，才能满足人民消费的需要？\n\n去年，我国手机用户超过13亿，智能手机用户超过6亿。就算其中只有一半人上网，那也是3亿多人。这么多人，每天都有几十分钟或者几个小时，要使用手机上网。全体中国人一年消费的网页和App的数量，是一个天文数字。\n\n![ ](./hen-and-front-end-engineer/bg2016072605.jpg)\n\n鸡蛋是母鸡生出来的，网页从哪里来？归根结底，所有页面都需要工程师做出来。那么多互联网公司，每家公司都需要前端工程师。而全国的前端工程师，目前可能总共有几十万人，对比那么大的内容消费量，肯定是远远不够的（想一想吧，全国的母鸡有23亿只）。这样一想，工程师抢手就不奇怪了。\n\n还有一个很重要的原因，学校不教前端开发，可能会有一些相关课程，但不会系统地教，所有前端工程师都是靠自学的。这也导致了供给偏少。\n\n5.\n\n由于工作好找和工资较高，前端工程师现在成了一个热门职业。很多不是搞计算机的人，也在考虑转行加入。社会上的培训班，每个周末的各种讲座和大会，都已经人满为患。\n\n我经常收到电子邮件，咨询是否应该改行。\n\n> \"我是一名会计/教师/导游，现在的工作没有任何成就感，感到没有发展空间。如果我拿出一年左右的时间去自学前端类的课程，将来能走上程序员这条路吗？\"\n\n这可怎么答复？\n\n6.\n\n前端编程入门，确实不难，可以短期速成。只要你对计算机有基本的理解，哪怕编程零基础，经过三四个月的培训，也能做出网页和App。\n\n如果你确实想改行，我觉得，这基本上是一件好事，你应该选择那些更有前景的职业。但问题是，并非每个人都适合编程。现在那么多人一窝蜂学习互联网开发，肯定有人将来会后悔。\n\n你最好事先知道下面三件事，再考虑加入这个行业。\n\n7.\n\n首先，你应该热爱编程。\n\n职业程序员每天都必须长时间地坐在电脑前面，与机器对话的时间，远超过与人对话。如果不是真心热爱编程，这会很难忍受，简直像是一种惩罚。让一个人在他不喜欢的事情上面，筋疲力尽地干上几年甚至几十年，那是多么痛苦的人生。\n\n其次，编程本身虽然是一种智力活动，但是中国的现实却更像一种体力劳动。\n\n由于运营活动太多，开发是做不完的，App必须不断地推出新版本。工作量常常是超负荷的，任务排期一个接着一个，中间根本没有喘息时间，同时做多个项目也是家常便饭。每个项目都有截止期，做不完只能加班。这样说吧，制作网页本身是有趣的，但是像流水线一样的\"制造\"网页是乏味的，好比养鸡场的母鸡不停得下蛋，每周必须完成5个蛋的指标。\n\n最后，这个行业的新陈代谢很快。\n\n快速的技术更新和极大的工作强度，使得年轻人具有天然的优势。等到职业生涯后期，你的开发速度开始慢下来，就是你被更年轻的人取代的时候。一只母鸡一生中，大约总共可以生2000枚鸡蛋，你的一生中可以制作的网页（或者 App），大概也是一个常数。\n\n8.\n\n如果你不喜欢编程，体会不到代码的乐趣和成就感，只是为了一份好的薪水，就跑来干，那就是很糟糕的选择。想一想如果十年前，你听说国际贸易很兴旺，高考志愿就填了国际贸易，今天会怎样呢？\n\n你应该选择，那些让你产生最大兴趣和热情的职业。因为未来所有行业，低端的、低技能的岗位都会被机器取代，只有技能最强、最有创造性的人不会被淘汰。兴趣，也只有兴趣，才会让你产生不倦的热情，钻研下去，变得更优秀。\n\n（完）","categories":["reprint"]},{"title":"Object","url":"/2019/10/24/object.html","content":"## JavaScript Object 对象\n#### 语法\n``` javascript\nvar obj = new Object();\n等价于下面：\nvar obj = {};\n```\n\n#### 对象属性\n可以说 'JavaScript 对象是变量的容器'。\n但是，我们通常认为 'JavaScript 对象是键值对的容器'。\n键值对通常写法为 name : value (键与值以冒号分割)。\n键值对在 JavaScript 对象通常称为 对象属性。\n\n> 对象键值对的写法类似于：\n> * PHP 中的关联数组\n> * Python 中的字典\n> * C 语言中的哈希表\n> * Java 中的哈希映射\n> * Ruby 和 Perl 中的哈希表\n\n#### ES6 方法：\n| 方法名称 | 描述 |\n| ------- | --- |\n| [Object.assign](#Object-assign-target-source1-source2-…) | 该方法主要用于对象的合并。 |\n| [Object.keys](#Object-keys-obj) | 返回一个由一个给定对象的自身可枚举属性组成的数组。 |\n| [Object.values](#Object-values-obj) | 返回一个给定对象自己的所有可枚举属性值的数组。 |\n| [Object.entries](#Object-entries-obj) | 返回一个给定对象自身可枚举属性的键值对数组。 |\n| [Object.freeze](#Object-freeze-obj) | 冻结一个对象。 |\n| [Object.preventExtensions](#Object-preventExtensions-obj) | 对象不能再添加新的属性。 |\n| [Object.isExtensible](#Object-isExtensible-obj) | 判断对象是否是可扩展的。 |\n| [Object.seal](#Object-seal-obj) | 让一个对象密封，并返回被密封后的对象。 |\n| [Object.isSealed](#Object-isSealed-obj) | 判断一个对象是否被密封。 |\n| [hasOwnProperty](#hasOwnProperty-NaN) | 判断对象自身属性中是否具有指定的属性。 |\n| [Object.create](#Object-create-prototype-propertiesObject) | 使用指定的原型对象及其属性去创建一个新的对象。 |\n| [Object.defineProperties](#Object-defineProperties-obj-props) | 直接在一个对象上定义新的属性或修改现有属性，并返回该对象。 |\n| [Object.defineProperty](#Object-defineProperty-obj-prop-descriptor) | 在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回这个对象。 |\n| [Object.getOwnPropertyDescriptor](#Object-getOwnPropertyDescriptor-obj-prop) | 返回指定对象上一个自有属性对应的属性描述符。 |\n| [Object.getOwnPropertyDescriptors](#Object-getOwnPropertyDescriptors-obj) | 获取一个对象的所有自身属性的描述符。 |\n| [Object.getOwnPropertyNames](#Object-getOwnPropertyNames) | 返回一个由指定对象的所有自身属性的属性名组成的数组。 |\n| [Object.getOwnPropertySymbols](#Object-getOwnPropertySymbols) | 返回一个给定对象自身的所有 Symbol 属性的数组。 |\n| [Object.getPrototypeOf](#Object-getPrototypeOf) | 返回指定对象的原型（内部[[Prototype]]属性的值，即proto，而非对象的prototype）。 |\n| [isPrototypeOf](#isPrototypeOf-NaN) | 判断一个对象是否存在于另一个对象的原型链上。 |\n| [Object.setPrototypeOf](#Object-setPrototypeOf-obj-prototype) | 设置对象的原型对象。 |\n| [Object.is](#Object-is) | 判断两个值是否相同。 |\n\n* #### Object.assign(target, source1, source2, ...)\n该方法主要用于对象的合并，将源对象source的所有可枚举属性合并到目标对象target上,此方法只拷贝源对象的自身属性，不拷贝继承的属性。\n> `Object.assign` 方法实行的是浅拷贝，而不是深拷贝。也就是说，如果源对象某个属性的值是对象，那么目标对象拷贝得到的是这个对象的引用。同名属性会替换。\n> `Object.assign` 只能进行值的复制，如果要复制的值是一个取值函数，那么将求值后再复制。\n> `Object.assign` 可以用来处理数组，但是会把数组视为对象。\n``` javascript\nconst target = { x: 0, y: 1 };\nconst source = {\n  x: 1,\n  z: 2,\n  fn: {\n    number: 1\n  }\n};\n\nObject.assign(target, source);\n// target  {x : 1, y : 1, z : 2, fn : {number : 1}}    // 同名属性会被覆盖\n// source  {x : 1, z : 2, fn : {number : 1}}\ntarget.fn.number = 2;                                  // 拷贝为对象引用\n// source  {x : 1, z : 2, fn : {number : 2}}\n\nfunction Person() {\n  this.name = 1\n}\nPerson.prototype.country = 'china';\n\nlet student = new Person();\nstudent.age = 29;\nconst young = {insterst: 'sport'};\n\nObject.assign(young, student);\n// young {instest : 'sport' , age : 29, name: 1} // 只能拷贝自身的属性，不能拷贝prototype\n\nObject.assign([1, 2, 3], [4, 5]); // 把数组当作对象来处理\n// [4, 5, 3]\n```\n\n* #### Object.keys(obj)\n返回一个由一个给定对象的自身可枚举属性组成的数组，数组中属性名的排列顺序和使用 `for...in` 循环遍历该对象时返回的顺序一致 （两者的主要区别是 一个 for-in 循环还会枚举其原型链上的属性）。\n``` javascript\n/* Array 对象 */\nconst arr = ['a', 'b', 'c'];\nconsole.log(Object.keys(arr)); // ['0', '1', '2']\n \n/* Object 对象 */\nconst obj = { foo: 'bar', baz: 42 };\nconsole.log(Object.keys(obj)); // ['foo','baz'] \n```\n\n* #### Object.values(obj)\n返回一个给定对象自己的所有可枚举属性值的数组，值的顺序与使用 `for...in` 循环的顺序相同 ( 区别在于 for-in 循环枚举原型链中的属性 )。\n> `Object.values` 会过滤属性名为 Symbol 值的属性。\n``` javascript\nconst an_obj = { 100: 'a', 2: 'b', 7: 'c' };\nconsole.log(Object.values(an_obj)); // ['b', 'c', 'a']\n \nconst obj = { 0: 'a', 1: 'b', 2: 'c' };\nconsole.log(Object.values(obj)); // ['a', 'b', 'c']\n```\n\n* #### Object.entries(obj)\n返回一个给定对象自身可枚举属性的键值对数组，其排列与使用 `for...in` 循环遍历该对象时返回的顺序一致（区别在于 for-in 循环也枚举原型链中的属性）。\n``` javascript\nconst obj = { foo: 'bar', baz: 42 };\nconsole.log(Object.entries(obj)); // [ ['foo', 'bar'], ['baz', 42] ]\n \nconst simuArray = { 0: 'a', 1: 'b', 2: 'c' };\nconsole.log(Object.entries(simuArray)); // [ ['0', 'a'], ['1', 'b'], ['2', 'c'] ]\n```\n\n* #### Object.freeze(obj)\n冻结一个对象，冻结指的是不能向这个对象添加新的属性，不能修改其已有属性的值，不能删除已有属性，以及不能修改该对象已有属性的可枚举性、可配置性、可写性。也就是说，这个对象永远是不可变的。该方法返回被冻结的对象。\n``` javascript\nconst obj = {\n  prop: function() {},\n  foo: 'bar'\n};\n \n// 新的属性会被添加, 已存在的属性可能\n// 会被修改或移除\nobj.foo = 'baz';\nobj.lumpy = 'woof';\ndelete obj.prop;\n \n// 作为参数传递的对象与返回的对象都被冻结\n// 所以不必保存返回的对象（因为两个对象全等）\nconst obj2 = Object.freeze(obj);\n \nobj2 === obj; // true\nObject.isFrozen(obj); // === true\n \n// 现在任何改变都会失效\nobj.foo = 'quux'; // 静默地不做任何事\n// 静默地不添加此属性\nobj.quaxxor = 'the friendly duck';\nconsole.log(obj)\n```\n\n* #### Object.isFrozen(obj)\n判断一个对象是否被冻结 .\n\n* #### Object.preventExtensions(obj)\n对象不能再添加新的属性。可修改，删除现有属性，不能添加新属性。\n``` javascript\nconst obj = {\n  name:'lilei',\n  age: 30 ,\n  sex: 'male'\n}\n \nobj = Object.preventExtensions(obj);\nconsole.log(obj);    // {name: 'lilei', age: 30, sex: 'male'}\nobj.name = 'haha';\nconsole.log(obj)     // {name: 'haha', age: 30, sex: 'male'}\ndelete obj.sex ;\nconsole.log(obj);    // {name: 'haha', age: 30}\nobj.address  = 'china';\nconsole.log(obj)     // {name: 'haha', age: 30}\n```\n\n* #### Object.isExtensible(obj)\n判断对象是否是可扩展的，Object.preventExtensions，Object.seal 或 Object.freeze 方法都可以标记一个对象为不可扩展（non-extensible）\n\n* #### Object.seal(obj)\n`Object.seal()` 方法可以让一个对象密封，并返回被密封后的对象。密封一个对象会让这个对象变的不能添加新属性，且所有已有属性会变的不可配置。属性不可配置的效果就是属性变的不可删除，以及一个数据属性不能被重新定义成为访问器属性，或者反之。但属性的值仍然可以修改。尝试删除一个密封对象的属性或者将某个密封对象的属性从数据属性转换成访问器属性，结果会静默失败或抛出\n> TypeError 异常. 不会影响从原型链上继承的属性。但 __proto__ (  ) 属性的值也会不能修改。\n``` javascript\nconst obj = {\n  prop: function () {},\n  foo: 'bar'\n};\n \n// 可以添加新的属性,已有属性的值可以修改,可以删除\nobj.foo = 'baz';\nobj.lumpy = 'woof';\ndelete obj.prop;\n \nconst obj2 = Object.seal(obj);\n \nassert(obj2 === obj);\nassert(Object.isSealed(obj) === true);\n \n// 仍然可以修改密封对象上的属性的值.\nobj.foo = 'quux';\n \n// 但你不能把一个数据属性重定义成访问器属性.\nObject.defineProperty(\n  obj, \n  'foo', \n  { \n    get: function() { \n      return 'g'; \n    }\n  }\n); // 抛出TypeError异常\n \n// 现在,任何属性值以外的修改操作都会失败.\nobj.quaxxor = 'the friendly duck'; // 静默失败,新属性没有成功添加\ndelete obj.foo; // 静默失败,属性没有删除成功\n \n// ...在严格模式中,会抛出TypeError异常\nfunction fail() {\n  'use strict';\n  delete obj.foo; // 抛出TypeError异常\n  obj.sparky = 'arf'; // 抛出TypeError异常\n}\n\nfail();\n \n// 使用Object.defineProperty方法同样会抛出异常\nObject.defineProperty(obj, 'ohai', { value: 17 }); // 抛出TypeError异常\nObject.defineProperty(obj, 'foo', { value: 'eit' }); // 成功将原有值改变\n```\n\n* #### Object.isSealed(obj)\n判断一个对象是否被密封\n\n* #### hasOwnProperty()\n判断对象自身属性中是否具有指定的属性。\n``` javascript\nobj.hasOwnProperty('name') // true or false\n```\n* #### Object.create(prototype[,propertiesObject])\n使用指定的原型对象及其属性去创建一个新的对象。\n``` javascript\nconst parent = {\n  x: 1,\n  y: 1\n};\nconst child = Object.create(parent,{\n  z: {                           // z会成为创建对象的属性\n    writable: true,\n    configurable: true,\n    value: 'newAdd'\n  }\n});\nconsole.log(child)\n```\n\n* #### Object.defineProperties(obj, props)\n直接在一个对象上定义新的属性或修改现有属性，并返回该对象。\n``` javascript\nconst obj = {};\nObject.defineProperties(obj, {\n  'property1': {\n    value: true,\n    writable: true\n  },\n  'property2': {\n    value: 'Hello',\n    writable: false\n  }\n  // etc. etc.\n});\nconsole.log(obj)   // {property1: true, property2: 'Hello'}\n```\n\n* #### Object.defineProperty(obj, prop, descriptor)\n在一个对象上定义一个新属性，或者修改一个对象的现有属性， 并返回这个对象。\n``` javascript\nObject.defineProperty(Object, 'is', {\n  value: function(x, y) {\n    if (x === y) {\n      // 针对+0 不等于 -0的情况\n      return x !== 0 || 1 / x === 1 / y;\n    }\n    // 针对NaN的情况\n    return x !== x && y !== y;\n  },\n  configurable: true,\n  enumerable: false,\n  writable: true \n}); \n \n// 注意不能同时设置(writable，value) 和 get，set方法，否则\n// 浏览器会报错： Invalid property descriptor. Cannot both specify accessors and a value or writable attribute\n```\n\n* #### Object.getOwnPropertyDescriptor(obj, prop)\n返回指定对象上一个自有属性对应的属性描述符。（自有属性指的是直接赋予该对象的属性，不需要从原型链上进行查找的属性）.\n如果指定的属性存在于对象上，则返回其属性描述符对象（property descriptor），否则返回 undefined。\n``` javascript\nconst arr = ['name','age'] ;\narr.forEach(val => console.log(Object.getOwnPropertyDescriptor(obj,val)))\n\n// { value: 'js', writable: true, enumerable: true, configurable: true }\n// undefined\n```\n\n* #### Object.getOwnPropertyDescriptors(obj)\n获取一个对象的所有自身属性的描述符。\n``` javascript\nconst obj = {\n  name: 'js',\n  age: 20\n};\nconsole.log(Object.getOwnPropertyDescriptors(obj))\n// {\n//   name: {\n//     configurable: true,\n//     enumerable: true,\n//     value: 'js',\n//     writable: true,\n//   },\n//   age: {\n//     configurable: true,\n//     enumerable: true,\n//     value: 20,\n//     writable: true,\n//   }\n// }\n```\n\n* #### Object.getOwnPropertyNames()\n返回一个由指定对象的所有自身属性的属性名（包括不可枚举属性但不包括Symbol值作为名称的属性）组成的数组。\n``` javascript\nconst obj = { 0: 'a', 1: 'b', 2: 'c'};\n \nObject.getOwnPropertyNames(obj).forEach(function(val) {\n  console.log(val);\n});\n \n \nconst obj = {\n  x: 1,\n  y: 2\n};\n \nObject.defineProperty(obj,'z',{\n    enumerable : false\n})\nconsole.log(Object.getOwnPropertyNames(obj))  // ['x', 'y', 'z'] 包含不可枚举属性 。\nconsole.log(Object.keys(obj))                 // ['x', 'y']      只包含可枚举属性 。\n```\n\n* #### Object.getOwnPropertySymbols()\n返回一个给定对象自身的所有 Symbol 属性的数组。\n\n* #### Object.getPrototypeOf()\n返回指定对象的原型（内部[[Prototype]]属性的值，即__proto__，而非对象的prototype）。\n\n* #### isPrototypeOf()\n判断一个对象是否存在于另一个对象的原型链上。\n\n* #### Object.setPrototypeOf(obj, prototype)\n设置对象的原型对象\n\n* #### Object.is()\n判断两个值是否相同。\n> 如果下列任何一项成立，则两个值相同：\n> * 两个值都是 `undefined`\n> * 两个值都是 `null`\n> * 两个值都是 `true` 或者都是 `false`\n> * 两个值是由相同个数的字符按照相同的顺序组成的字符串\n> * 两个值指向同一个对象\n> * 两个值都是数字并且:\n>   1. 都是正零 `+0`\n>   2. 都是负零 `-0`\n>   3. 都是 `NaN`\n>   4. 都是除零和 `NaN` 外的其它同一个数字\n``` javascript\nObject.is('foo', 'foo');     // true\nObject.is(window, window);   // true\n \nObject.is('foo', 'bar');     // false\nObject.is([], []);           // false\n \nvar test = { a: 1 };\nObject.is(test, test);       // true\n \nObject.is(null, null);       // true\n \n// 特例\nObject.is(0, -0);            // false\nObject.is(-0, -0);           // true\nObject.is(NaN, 0/0);         // true\n```","categories":["javascript"]},{"title":"RegExp","url":"/2019/10/22/regexp.html","content":"## JavaScript RegExp 对象\n#### 语法\n``` javascript\nvar regexp = new RegExp(pattern, modifiers);    // 通过 RegExp 构造函数创建\n\nvar regexp = /[pattern]/[modifiers];            // 通过字面量创建\n```\n> * pattern（模式） 描述了表达式的模式\n> * modifiers (修饰符) 用于指定全局匹配、区分大小写的匹配和多行匹配\n> \n> 注意：当使用构造函数创造正则对象时，需要常规的字符转义规则（在前面加反斜杠 \\）。比如，以下是等价的： \n``` javascript\nvar regexp = new RegExp('\\\\w+');\nvar regexp = /\\w+/;\n```\n\n#### 修饰符\n> 修饰符 (Modifiers) 用于指定全局匹配、区分大小写的匹配和多行匹配：\n\n| 修饰符 | 描述 |\n| ----- | --- |\n| i     | 执行对大小写不敏感的匹配。|\n| g     | 执行全局匹配（查找所有匹配而非在找到第一个匹配后停止）。|\n| m     | 执行多行匹配。|\n\n#### 量词\n> 量词（Quantifiers）定义了重复匹配字符的确数或约数：\n\n| 量词 | 描述 |\n| --- | --- |\n| n+     | 匹配任何包含至少一个 n 的字符串。|\n| n*     | 匹配任何包含零个或多个 n 的字符串。|\n| n?     | 匹配任何包含零个或一个 n 的字符串。|\n| n{X}   | 匹配包含 X 个 n 的序列的字符串。|\n| n{X,}  | 匹配包含最少 x 个、最多 y 个 n 的序列的字符串。|\n| n{X,Y} | 匹配包含至少 x 个 n 的序列的字符串。|\n| ^n     | 匹配任何开头为 n 的字符串。|\n| n$     | 匹配任何结尾为 n 的字符串。|\n| ?=n    | 匹配任何其后紧接指定字符串 n 的字符串。|\n| ?!n    | 匹配任何其后没有紧接指定字符串 n 的字符串。|\n\n#### 元字符\n> 元字符（Metacharacter）是拥有特殊含义的字符：\n\n| 元字符 | 描述 |\n| ----- | --- |\n| .      | 查找单个字符，除了换行和行结束符。|\n| \\w     | 查找单词字符。|\n| \\W     | 查找非单词字符。|\n| \\d     | 查找数字。|\n| \\D     | 查找非数字字符。|\n| \\s     | 查找空白字符。|\n| \\S     | 查找非空白字符。|\n| \\b     | 匹配单词边界。|\n| \\B     | 匹配非单词边界。|\n| \\0     | 查找 NULL 字符。|\n| \\n     | 查找换行符。|\n| \\f     | 查找换页符。|\n| \\r     | 查找回车符。|\n| \\t     | 查找制表符。|\n| \\v     | 查找垂直制表符。|\n| \\xxx   | 查找以八进制数 xxx 规定的字符。|\n| \\xdd   | 查找以十六进制数 dd 规定的字符。|\n| \\uxxxx | 查找以十六进制数 xxxx 规定的 Unicode 字符。|\n\n#### 方括号\n> 方括号用于查找某个范围内的字符：\n\n| 表达式 | 描述 |\n| ----- | --- |\n| [abc]              | 查找方括号之间的任何字符。|\n| [^abc]             | 查找任何不在方括号之间的字符。|\n| [0-9]              | 查找任何从 0 至 9 的数字。|\n| [a-z]              | 查找任何从小写 a 到小写 z 的字符。|\n| [A-Z]              | 查找任何从大写 A 到大写 Z 的字符。|\n| [A-z]              | 查找任何从大写 A 到小写 z 的字符。|\n| (red\\|blue\\|green) | 查找任何指定的选项。|\n\n#### RegExp 对象方法\n| 表达式 | 描述 |\n| ----- | --- |\n| compile | 编译正则表达式。|\n| exec    | 检索字符串中指定的值。返回找到的值，并确定其位置。|\n| test    | 检索字符串中指定的值。返回 true 或 false。|\n\n#### 支持正则表达式的 String 对象的方法\n| 表达式 | 描述 |\n| ----- | --- |\n| search  | 检索与正则表达式相匹配的值。。|\n| match   | 找到一个或多个正则表达式的匹配。|\n| replace | 替换与正则表达式匹配的子串。|\n| split   | 把字符串分割为字符串数组。|\n\n#### 先行断言和先行否定断言\n> 先行断言（lookahead）指的是，x只有在y前面才匹配，必须写成/x(?=y)/。比如，只匹配百分号之前的数字，要写成/\\d+(?=%)/。\n``` javascript\nvar string = '100% of US presidents have been male';\n\n/\\d+(?=%)/.exec(string) // ['100']\n\n/have(?=%)/.exec(string) // null\n```\n\n> 先行否定断言（negative lookahead）x只有不在y前面才匹配，必须写成/x(?!y)/。比如，只匹配不在百分号之前的数字，要写成/\\d+(?!%)/。\n``` javascript\nvar string = 'that’s all 44 of them';\n\n/\\d+(?!%)/.exec(string) // ['44']\n\n/\\d+(?!.*of)/.exec(string) // null\n\n/\\d+(?!.*all)/.exec(string) // ['44']\n\n/\\d+(?!.*of|.*all)/.exec(string) // null\n```\n\n#### 后行断言和后行否定断言\n> ES2018 引入后行断言，V8 引擎 4.9 版（Chrome 62）已经支持。\n> 后行断言（lookbehind）指的是，x只有在y后面才匹配，必须写成/(?<=y)x/。比如，只匹配美元符号之后的数字，要写成 /(?<=\\\\$)\\d+/。\n```javascript\nvar string = 'Benjamin Franklin is on the $100 bill';\n\n/(?<=\\$)\\d+/.exec(string)  // [\"100\"]\n```\n\n> 后行否定断言（negative lookbehind）指的是，x只有不在y后面才匹配，必须写成/(?<!y)x/。比如，只匹配不在美元符号后面的数字，要写成 /(?<!\\\\$)\\d+/。\n```javascript\nvar string = 'it’s is worth about €90';\n\n/(?<!\\$)\\d+/.exec(string)  // [\"90\"]\n```\n\n#### 贪婪模式和非贪婪模式\n> 贪婪模式: 正则表达式一般趋向于最大长度匹配，总是尝试匹配尽可能多的字符。\n``` javascript\nvar html = '<html><head><title></title></head><body></body></html>';\nvar regexp = /(<.*>)/;\n\nhtml.match(regexp) // ['<html><head><title></title></head><body></body></html>']\n```\n\n> 非贪婪模式: 非贪婪匹配就是匹配到结果就好，总是尝试匹配尽可能少的字符。\n``` javascript\nvar html = '<html><head><title></title></head><body></body></html>';\nvar regexp = /(<.*?>)/;\n\nhtml.match(regexp) // ['<html>']\n```\n> 针对 6 种重复类惰性匹配的简单描述如下：\n> * {n,m}?：尽量匹配 n 次，但是为了满足限定条件也可能最多重复 m 次。\n> * {n}?：尽量匹配 n 次。\n> * {n,}?：尽量匹配 n 次，但是为了满足限定条件也可能匹配任意次。\n> * ??：尽量匹配，但是为了满足限定条件也可能最多匹配 1 次，相当于 {0,1}?。\n> * +?：尽量匹配 1 次，但是为了满足限定条件也可能匹配任意次，相当于 {1,}?。\n> * *? ：尽量不匹配，但是为了满足限定条件也可能匹配任意次，相当于 {0,}?。\n\n#### 捕获型分组和非捕获型分组\n> 捕获型()：捕获型分组会把每个捕获分组所匹配的内容暂且存储在某个地方，以便下次使用。在JavaScript中，捕获性分组所匹配的内容都是以$1,$2,$3…的格式保存的。因此捕获型分组会有性能上的损失。\n``` javascript\nvar string = 'sjds24324abcabc1234';\nvar regexp = /(abc){2}/;\n\nstr.match(regexp) // ['abcabc', 'abc']\n```\n> 非捕获型(?:)：非捕获型分组只会返回一个不含各个分组匹配（不含字串）的结果。所以会提高匹配速度。\n``` javascript\nvar string = 'sjds24324abcabc1234';\nvar regexp = /(?:abc){2}/;\n\nstr.match(regexp) // ['abcabc']\n```","categories":["javascript"]},{"title":"String","url":"/2019/10/21/string.html","content":"## JavaScript String 对象\n#### 语法\n``` javascript\nvar txt = new String('string');\n或者更简单方式：\nvar txt = 'string';\n```\n\n#### 方法集合：\n| 方法名称 | 描述 |\n| ------- | --- |\n| [replace](#replace-regexp-substr-replacement) | 该方法用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串。 |\n| [slice](#slice-start-end) | 提取字符串的某个部分并在新字符串中返回被提取的部分。 |\n| [substring](#substring-start-end) | 提取字符串中介于两个指定下标之间的字符。 |\n| [substr](#substr-start-length) | 在字符串中抽取从 start 下标开始的指定数目的字符。 |\n| [localeCompare](#localeCompare-compareString-locales-options) | 该方法返回一个数字来指示一个参考字符串是否在排序顺序前面或之后或与给定字符串相同。 |  \n\n* #### replace(regexp/substr, replacement)\n该方法用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串。\n| 参数 | 描述 |\n| ---- | ---- |\n| regexp/substr        | 必需。规定子字符串或要替换的模式的 RegExp 对象。<br/>请注意，如果该值是一个字符串，则将它作为要检索的直接量文本模式，而不是首先被转换为 RegExp 对象。|\n| replacement/function | 必需。一个字符串值或者一个函数。规定了替换文本或生成替换文本的函数。<br/>请注意，如果该值是一个函数，每个匹配都调用该函数，它返回的字符串将作为替换文本使用。该函数的第一个参数是匹配模式的字符串。接下来的参数是与模式中的子表达式匹配的字符串，可以有 0 个或多个这样的参数。接下来的参数是一个整数，声明了匹配在 string 中出现的位置。最后一个参数是 string 本身。|\n\n  **1. Example**\n在本例中，我们将把 \"Doe, John\" 转换为 \"John Doe\" 的形式：\n``` javascript\nvar name = 'Doe, John';\nname.replace(/(\\w+)\\s*, \\s*(\\w+)/, '$2 $1');\n```\n| 字符 | 替换文本 |\n| ---- | ------- |\n| $1、$2、...、$99 | 与 regexp 中的第 1 到第 99 个子表达式相匹配的文本。 |\n| $&              | 与 regexp 相匹配的子串。 |\n| $`              | 位于匹配子串左侧的文本。 |\n| $'              | 位于匹配子串右侧的文本。 |\n| $$              | 直接量符号。 |\n\n  **2. Example**\n在本例中，我们将把字符串中所有单词的首字母都转换为大写：\n``` javascript\nvar words = 'hello word';\nwords = words.replace(/\\b\\w+\\b/g, function(word) {\n  return word.substring(0, 1).toUpperCase() + word.substring(1);\n});\nconsole.log(words); // Hello Word\n```\n> `\\b` 匹配单词边界， `\\w` 查找单词字符。\n\n\n* #### slice(start, end)\n提取字符串的某个部分并在新字符串中返回被提取的部分。\n> 该方法设置两个参数（可以为负数）：起始索引（开始位置），终止索引（结束位置）。\n```javascript\nvar str = \"Apple, Banana, Mango\";\nvar res = str.slice(7, 13);\n// 等同\nvar res = str.slice(-13, -7);\nconsole.log(res); // Banana\n```\n\n* #### substring(start[, end])\n提取字符串中介于两个指定下标之间的字符。\n> substring() 无法接受负的索引。\n> 如果省略第二个参数，则该 substring() 将裁剪字符串的剩余部分。\n```javascript\nvar str = \"Apple, Banana, Mango\";\nvar res = str.substring(7);\nconsole.log(res); // Banana, Mango\n```\n\n* #### substr(start[, length])\n在字符串中抽取从 start 下标开始的指定数目的字符。\n> 第二个参数规定被提取部分的长度。\n> 如果省略第二个参数，则该 substr() 将裁剪字符串的剩余部分。\n```javascript\nvar str = \"Apple, Banana, Mango\";\nvar res = str.substr(7, 6);\nconsole.log(res); // Banana\n```\n\n* #### localeCompare(compareString[, locales[, options]])\n该方法返回一个数字来指示一个参考字符串是否在排序顺序前面或之后或与给定字符串相同。\n| 参数 | 描述 |\n| ---- | ---- |\n| compareString | 用来比较的字符串。|\n| locales | 可选。 用来表示一种或多种语言或区域的一个符合 BCP 47 标准的字符串或一个字符串数组。|\n| options | 可选。详情[点击此处](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare) |\n> 根据汉字拼音首字母排序。\n```javascript\nvar names = [ '张三', '李四', '王五', '赵六' ];\n\nnames.sort((a, b) => a.localeCompare(b, 'zh')); // ['李四', '王五', '张三', '赵六']\n```","categories":["javascript"]},{"title":"Array","url":"/2019/10/10/array.html","content":"## JavaScript Array 对象\n#### 语法\n``` javascript\nvar cars = new Array('Saab', 'Volvo', 'BMW');\n等价于下面：\nvar cars = ['Saab', 'Volvo', 'BMW'];\n```\n\n#### 方法集合：\n| 方法名称 | 描述 |\n| ------- | --- |\n| [reduce](#reduce-function-total-currentValue-currentIndex-arr-initialValue) | 该方法接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值。 |\n| [splice](#splice-index-howmany-item1-…-itemX) | 从数组中添加/删除项目，然后返回被删除的项目。 |\n| [slice](#slice-start-end) | 从某个已有的数组返回选定的元素。 |\n\n* #### reduce(function(total, currentValue, currentIndex, arr), initialValue)\n该方法接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值。\n| 参数 | 描述 |\n| ---- | ---- |\n| total        | 必需。初始值, 或者计算结束后的返回值。 |\n| currentValue | 必需。当前元素。 |\n| currentIndex | 可选。当前元素的索引。 |\n| arr          | 可选。当前元素所属的数组对象。 |\n| initialValue          | 可选。传递给函数的初始值。 |\n> 注意: reduce() 对于空数组是不会执行回调函数的。\n> 整合 `map` 和 `filter` 功能的例子\n``` javascript\nvar arr = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ];\nvar newArr = arr.reduce(function(total, currentValue, index, arr) {\n  if (currentValue <= 5) {\n    total.push(currentValue * 10);\n  }\n  return total;\n}, []);\nconsole.log(newArr); //  [0, 10, 20, 30, 40, 50]\n```\n\n* #### splice(index, howmany, item1, ....., itemX)\n从数组中添加/删除项目，然后返回被删除的项目。\n| 参数 | 描述 |\n| ---- | ---- |\n| index               | 必需。整数，规定添加/删除项目的位置，使用负数可从数组结尾处规定位置。 |\n| howmany             | 必需。要删除的项目数量。如果设置为 0，则不会删除项目。 |\n| item1, ..., itemX   | 可选。向数组添加的新项目。 |\n> 该方法会改变原始数组。\n```javascript\nvar fruits = ['Banana', 'Orange', 'Lemon', 'Apple', 'Mango'];\nvar citrus = fruits.splice(1, 1, 'Watermelon');\n\nconsole.log(fruits); // ['Banana', 'Watermelon', 'Lemon', 'Apple', 'Mango'];\nconsole.log(citrus); // ['Watermelon'];\n```\n\n* #### slice(start, end)\n从某个已有的数组返回选定的元素。\n| 参数 | 描述 |\n| ---- | ---- |\n| start | 必需。开始元素的索引。 |\n| end   | 可选。结束元素的索引。 |\n> slice()方法创建新数组。它不会从源数组中删除任何元素。\n> 如果结束参数被省略，slice() 会切出数组的剩余部分。\n```javascript\nvar fruits = ['Banana', 'Orange', 'Lemon', 'Apple', 'Mango'];\nvar citrus = fruits.slice(1, 3); // ['Orange', 'Lemon'];\nvar others = fruits.slice(3); // ['Apple', 'Mango'];\n```","categories":["javascript"]},{"title":"VSCode","url":"/2019/09/21/vscode.html","content":"汉化教程：https://jingyan.baidu.com/article/7e44095377c9d12fc1e2ef5b.html\n\n#### 插件\n* GitLens：显示某一行代码是谁写的\n* vscode-fileheader：显示文件作者修改信息\n\n#### 格式化代码快捷键：\n##### Windows\n```\nShift + Alt + F\n```\n##### Mac\n```\nShift + Option + F\n```\n##### Ubuntu\n```\nCtrl + Shift + I\n```\n\n#### 开启 ESLint 验证：\n``` json\n{\n  \"editor.detectIndentation\": false,\n  \"editor.tabSize\": 2,\n  \"editor.insertSpaces\": true,\n  \"eslint.autoFixOnSave\": true,   // 保存文件时自动修复ESLint验证\n  \"eslint.validate\": [\n    {\n      \"language\": \"vue\",   //   该项是验证Vue文件并启动保存文件时自动修复ESLint验证\n      \"autoFix\": true\n    },\n    {\n      \"language\": \"javascriptreact\",   // React验证，同上\n      \"autoFix\": true\n    },\n    \"javascript\",\n    \"html\",\n  ],\n}\n```\n\n#### 快捷键配置：\nEmmet（展开缩写）:\n> 要使该快捷键生效需在配置中设置\n``` json\n{\n  \"emmet.triggerExpansionOnTab\": true,  // 设置emmet展开标签时必要条件\n}\n```\n\nRedo（反撤销）：\n```\nCtrl + Y\n```\n\nCopy Line Down（快速拷贝一行）:\n```\nShift + Alt + ↓\n```\n\n\n\n\n\n\n\n\n\n\n\n\n","categories":["note"]},{"title":"Webstorm","url":"/2019/09/20/webstorm.html","content":"#### 设置中文字体\nShow only monospaced fonts 取消打钩\n\nFont：consolas\n\nSize：14\n\nLine spacing: 1.2\n\nFallback font：Microsoft YaHei\n\n\n#### 格式化代码快捷键：\n```\nCtrl + Alt + L\n```\n\n#### 键盘快捷键：\nAdd Or Remove Caret（多光标）:\n```\nAlt+ Button1 Click\n```\nRedo（反撤销）:\n```\nCtrl + Shift + Z\n```\nExpand Live Template / Emmet Abbreviation（展开标签）:\n```\nTab\n```\nFix ESLint Problems（修复ESLint错误）:\n```\nAlt + Shift + L\n```\n\n#### 花括号和中括号之间加上空格配置：\nSetting > Editor > Code Style > JavaScript > Space,  找到 Within，勾选以下几项并打上勾：\n* Object literal braces\n* ES6 import/export braces\n* Array brackets\n* Interpolation expressions\n\n#### 配置ESlint\n1. Setting > Plugins，安装ESlint插件\n2. Setting > ESLint Settings，配置\n3. Setting 搜索ESLint，或者查找 Setting > Languages & Frameworks > JavaScript > Code Quality Tools > ESLint\n\n#### 取消webstorm自动保存\n第一步：\n```\nSettings > Appearance & Behavior > System Settings\n> Synchronization\n   > Synchroniza files on frame or editor tab activation           // 激活当前窗口时保存\n   > Save files on frame deactivation                                       // 切换到其他窗口时保存\n   > Save files automatically if application is idle for  15 sec.    // 设定一个时间自动保存\n   > Use \"safe write\" (save changes to a temporary file first)    // 安全写入,这个选项会不停的保存源文件,因此关闭最后一个就好\n```\n第二步：\n```\nSettings > Editor > General > Editor Tabs\n> Appearance\n   > Mark modified(*)   // 被修改的文件会出现 * 号（在文件图标右下角）\n```","categories":["note"]}]